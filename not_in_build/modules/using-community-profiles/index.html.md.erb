---
id: using-community-profiles
description: "Learn how to the use of InSpec and Chef Supermarket community compliance profiles."
title: 'Using community compliance profiles on Ubuntu'
short_title: 'Using community compliance profiles'
platform: Ubuntu
platform_id: ubuntu
category: local-development
type: topic
time_to_complete: 60 minutes
breadcrumb_label: Using Community Profiles
headings: [
  { label: 'Prerequisites', href: '#prerequisites' },
  { label: '1. Run a community profile', href: '#step1' },
  { label: '2. Skip the sshd-48 control', href: '#step2' },
]
---
[START_BOX]
# Using community compliance profiles on Ubuntu

## Prerequisites:

In this tutorial, you will use Test Kitchen and Inspec with virtual machines using VirtualBox and Vagrant.

1. **VirtualBox** is a [hypervisor](https://en.wikipedia.org/wiki/Hypervisor) used to running virtual machine instances.
1. **Vagrant** help you configure virtual machines using a [Vagrantfile](https://www.vagrantup.com/docs/vagrantfile/), that makes specifying and loading virtual machines consistent and reproducible.
1. **ChefDK** If you do not already have the Chef Development Kit installed, you will need to install it.  You can find directions in the [Get started with Test Kitchen](/tutorials/local-development) tutorial. You can also jump right in and [download the ChefDK](https://downloads.chef.io/chefdk).
1. **Test Kitchen** is part of the ChefDK. It provides you with an environment for integration testing.

In this tutorial, you'll learn how to use [InSpec](http://www.inspec.io/) to verify a server's configuration. You'll run InSpec from Test Kitchen on a virtual machine running on your workstation.

[COMMENT] This tutorial follows [Compliance as code using InSpec](/tutorials/compliance-as-code-using-inspec/). You may wish to continue working with the same system from the previous tutorial, if it is still availible. You will also have the material you will need to start a new system.

[COMMENT] If you're new to automated testing, consider reading [Getting started with automated testing](/skills/get-started-with-testing/) before you start this tutorial.

[COMMENT] If you're new to Test Kitchen, consider reading [Get started with Test Kitchen](/tutorials/local-development). Test Kitchen provides a reproducible environment for designing and testing infrastructure.

InSpec provides [integration testing](https://en.wikipedia.org/wiki/Integration_testing), where you verify that multiple components function correctly together. With InSpec, you write code that describes the desired state of the server. InSpec translates this code into SSH commands that it runs on the server. InSpec also provides [compliance testing](https://en.wikipedia.org/wiki/Conformance_testing), which is used to determine if a system complies with relevant standards and requirements.

It's common to write InSpec tests after you write your configuration code. But another way is to take a _test-driven_ approach, where you write your tests first before you write any Chef code.

The idea behind test-driven development is to use tests, also called _specifications_ or _specs_, to clearly document your requirements. You run your tests on the server and watch them each fail. Then you write just enough Chef code to make at least one failing test pass. You then repeat the process until all of your tests pass.

[TIP] Here's a 60-minute webcast that discusses the test-driven process in greater depth and shows working examples. You can watch the video before or after you complete this tutorial.

<script type="text/javascript" src="https://www.brighttalk.com/clients/js/embed/embed.js"></script> <object class="BrightTALKEmbed" width="705" height="660">     <param name="player" value="channel_player"/>     <param name="domain" value="https://www.brighttalk.com"/>     <param name="channelid" value="11349"/>     <param name="communicationid" value="191263"/>     <param name="autoStart" value="false"/>     <param name="theme" value=""/> </object>

An important benefit of test-driven development is that it helps limit the scope of your work. You know you're done when all tests pass. And because the tests are code, they're versionable through source control. When a requirement changes, you capture that change by updating the tests. This gives you the complete history of your requirements and better insight into when and how your requirements changed.

[END_BOX]

[START_BOX]

##Get Started with Test Kitchen and InSpec

This module introduces the use of InSpec and Chef Supermarket community compliance profiles.

Test Kitchen is a tool for testing code by simulating different environments. Test kitchen makes it possible to incorporate infrastructure testing into your continuous integration workflow, shortening the time needed for performing testing, giving feedback, and remediating problems.

In this lesson you will use first use Test Kitchen to write a test for the ssh-baseline community profile, watch it fail, and then write just enough code to make it pass. You will learn about using communities profiles community profile, Test Kitchen, and testing with InSpec. Later, you will use InSpec to alter the way that the community profile works.

Chef cookbooks are the fundamental unit of configuration and policy distribution in Chef.  A cookbook defines a scenario and contains everything that is required to support that scenario. Learn more [about cookbooks](https://docs.chef.io/cookbooks.html).  In this scenario, you will quickly generate a cookbook and make a few changes to it before moving on to InSpec and Chef Supermarket community profiles.

1. Get Test Kitchen up and running on your workstation.

    Navigate to your `learn-chef` directory, install Test Kitchen with `gem install test-kitchen` and verify the installation with `kitchen version`.

    ```bash
    $ cd learn-chef
    learn-chef$ gem install test-kitchen
    Successfully installed test-kitchen-1.16.0
    1 gem installed
    learn-chef$ kitchen version
    Test Kitchen version 1.15.0
    ```
1. Generate a Chef cookbook.

    Use the command `chef generate cookbook kitchen_inspec`.

    ```bash
    $ chef generate cookbook kitchen_inspec
    Generating cookbook kitchen_inspec
    - Ensuring correct cookbook file content
    - Committing cookbook files to git
    - Ensuring delivery configuration
    - Ensuring correct delivery build cookbook content
    - Adding delivery configuration to feature branch
    - Adding build cookbook to feature branch
    - Merging delivery content feature branch to master

    Your cookbook is ready. Type `cd kitchen_inspec` to enter it.

    There are several commands you can run to get started locally developing and testing your cookbook.
    Type `delivery local --help` to see a full list.

    Why not start by writing a test? Tests for the default recipe are stored at:

    test/smoke/default/default_test.rb

    If you'd prefer to dive right in, the default recipe can be found at:

    recipes/default.rb
    ```

1. Navigate to the `kitchen_inspec` directory that you just created `cd kitchen_inspec`.

    You will see that an active git repo has been created for this project.

    ```bash
    learn-inspec$ cd kitchen_inspec
    kitchen_inspec git:(master)$
    ```

1. As part of generating a cookbook, a `.kitchen.yml` is created in the `kitchen_inspec` directory.

    You will use this file to define what programs are required for running Test Kitchen. Open the `.kitchen.yml` in an editor of your choice.

    ```bash
    driver:
     name: vagrant

    provisioner:
     name: chef_zero
     # You may wish to disable always updating cookbooks in CI or other testing environments.
     # For example:
     #   always_update_cookbooks: <%= !ENV['CI'] %>
     always_update_cookbooks: true

    verifier:
     name: inspec

    platforms:
     - name: ubuntu-16.04
     - name: centos-7.2

    suites:
     - name: default
       run_list:
         - recipe[kitchen_inspec::default]
       verifier:
         inspec_tests:
           - test/smoke/default
       attributes:
    ```
       You will see a short metadata list.  The elements of the `.kitchen.yml` file are:
       * "driver" is how you will set up a virtual machine instance for your testing environment. The default is Vagrant.
       * "provisioner": the directions for running Chef. The default is chef_solo.
       * "verifier": You will see that "inspec" is the default program for verifying your tests.
       * "platforms": the list of operating systems that you will use for running your tests.
       * "suites": Defines what we will test.  The run-list and node attributes that will be put onto the platforms.

1. Familiarize yourself with the `.kitchen.yml` file.

    Then, try making a few changes to remove the centos-7.2 platform and change the ubuntu instance to 14.04.

    ```bash
    #/kitchen_inspec/.kitchen.yml
    driver:
      name: vagrant

    provisioner:
      name: chef_zero
      # You may wish to disable always updating cookbooks in CI or other testing environments.
      # For example:
      #   always_update_cookbooks: <%= !ENV['CI'] %>
      always_update_cookbooks: true

    verifier:
      name: inspec

    platforms:
      - name: ubuntu-14.04

    suites:
      - name: default
        run_list:
          - recipe[kitchen_inspec::default]
        verifier:
          inspec_tests:
            - test/smoke/default
        attributes:
    ```

1. Now get the virtual machine up and running with `kitchen create`.

    Running `kitchen create` spins up an instance of the ubuntu-14.04.

    ```bash
    kitchen create
    -----> Starting Kitchen (v1.15.0)
    -----> Creating <default-ubuntu-1404>...
          Bringing machine 'default' up with 'virtualbox' provider...
          ==> default: Importing base box 'bento/ubuntu-14.04'.....
          [...]
          [...]
    ```

1. Then you should enter `kitchen list` to view the machines that Test Kitchen has set up.

    Notice that Test Kitchen already has a running instance, default-ubuntu-1404.

    ```bash
    kitchen_inspec git:(master)$ ✗ kitchen list

      Instance             Driver   Provisioner  Verifier  Transport  Last Action  Last Error
      default-ubuntu-1404  Vagrant  ChefZero     Inspec    Ssh        Created      <None>
    ```

1. From the command line make a file that we will use to log our output, `touch verify.txt`.

    You can direct the log information into this file with, `kitchen verify > verify.txt`.

    ```bash
    kitchen_inspec git:(master)$ ✗ touch verify.text
    kitchen_inspec git:(master)$ ✗ kitchen verify > verify.txt
    ```

1. Finally, look at contents of the verify.txt file using `cat verify.txt`.

    You will notice that Test Kitchen uses InSpec tests and targets a vagrant instance at forwarded port 2201. These default integration tests are located at `~/kitchen_inspec/test/smoke/default/default_test.rb`.

    ```bash
    kitchen_spec git:(master)$ ✗ cat verify.txt
    -----> Starting Kitchen (v1.15.0)
    -----> Setting up <default-ubuntu-1404>...
         [...]
   Finished setting up <default-ubuntu-1404> (0m0.00s).
    -----> Verifying <default-ubuntu-1404>...
   Loaded

    Target:  ssh://vagrant@127.0.0.1:2201


      User root
        ✔  should exist
        ↺  This is an example test, replace with your own test.
      Port 80
        ✔  should not be listening
        ↺  This is an example test, replace with your own test.

      Test Summary: 2 successful, 0 failures, 2 skipped
          Finished verifying <default-ubuntu-1404> (0m0.44s).
      -----> Kitchen is finished. (0m15.86s)
```

## Add a Chef Supermarket Community Profile

InSpec allows you to make your own test and compliance profiles, but it also supports the use of test and compliance profiles created by Chef community members. These are found on the [Chef Supermarket](https://supermarket.chef.io/) under the tools menu.

You can use InSpec commands to learn about  community profiles and how to use them. In this exercise you will use the command line to first discover and then implement the `ssh-baseline` community profile.

1. `inspec help` provides a list of InSpec commands.

    These are the broader inspec commands, you will need to look at "supermarket".

    ```bash
    # learn-inspec
    $ inspec help

    Commands:
    inspec archive PATH                # archive a profile to tar.gz (default) ...
    inspec artifact SUBCOMMAND ...     # Sign, verify and install artifacts
    inspec check PATH                  # verify all tests at the specified PATH
    inspec compliance SUBCOMMAND ...   # Chef Compliance commands
    inspec detect                      # detect the target OS
    inspec env                         # Output shell-appropriate completion co...
    inspec exec PATHS                  # run all test files at the specified PATH.
    inspec help [COMMAND]              # Describe available commands or one spe...
    inspec init TEMPLATE ...           # Scaffolds a new project
    inspec json PATH                   # read all tests in PATH and generate a ...
    inspec shell                       # open an interactive debugging shell
    inspec supermarket SUBCOMMAND ...  # Supermarket commands
    inspec vendor PATH                 # Download all dependencies and generate...
    inspec version                     # prints the version of this tool

    Options:
      l, [--log-level=LOG_LEVEL]       # Set the log level: info (default), debug, warn, error
      [--log-location=LOG_LOCATION]  # Location to send diagnostic log messages to. (default: STDOUT or STDERR)
      [--diagnose], [--no-diagnose]  # Show diagnostics (versions, configurations)
    ```

1. Use `inspec supermarket help` to view supermarket commands.

    ```bash
    # learn-inspec
    $ inspec supermarket help

    Commands:
    inspec supermarket exec PROFILE    # execute a Supermarket profile
    inspec supermarket help [COMMAND]  # Describe subcommands or one specific subcommand
    inspec supermarket info PROFILE    # display Supermarket profile details
    inspec supermarket profiles        # list all available profiles in Chef Supermarket
    ```

1. Use `inspec supermarket profiles` to view the list of compliance profiles available through the Chef Supermarket.

    ```bash
    # learn-inspec
    $ inspec supermarket profiles

    == Available profiles:

      * apache2-compliance-test-tthompson thompsontelmate/apache2-compliance-test-tthompson
      * Apache DISA STIG som3guy/apache-disa-stig
      * chef-alfresco-inspec-mysql alfresco/chef-alfresco-inspec-mysql
      * chef-alfresco-inspec-tomcat alfresco/chef-alfresco-inspec-tomcat
      * chef-client-hardening sliim/chef-client-hardening
      * CIS Docker Benchmark dev-sec/cis-docker-benchmark
      * CVE-2016-5195 ndobson/cve-2016-5195
      * DevSec Apache Baseline dev-sec/apache-baseline
      * DevSec Linux Baseline dev-sec/linux-baseline
      * DevSec Linux Patch Baseline dev-sec/linux-patch-baseline
      * DevSec MySQl Baseline dev-sec/mysql-baseline
      * DevSec Nginx Baseline dev-sec/nginx-baseline
      * DevSec PHP Baseline dev-sec/php-baseline
      * DevSec PostgreSQL Baseline dev-sec/postgres-baseline
      * DevSec SSH Baseline dev-sec/ssh-baseline
      * DevSec SSL/TLS Baseline dev-sec/ssl-basline
      * DevSec Windows Baseline dev-sec/windows-baseline
      * DevSec Windows Patch Baseline dev-sec/windows-patch-baseline
      * EC2 Instance - InSpec Profile alexpop/ec2-instance-profile
      * inspec_java awim/inspec_java
      * inspec_oracledb awim/inspec_oracledb
      * profile-test bigbam505/profile-test
      * RHEL6 STIG paulczar/rhel6-stig
      * SSL Certificate - InSpec Profile alexpop/ssl-certificate-profile
      * /tmp Compliance Profile nathenharvey/tmp-compliance-profile
      * utils alfresco/utils
    ```

1. Enter `inspec supermarket info dev-sec/ssh-baseline`.

    This provides information about this particular profile:

    ```bash
    # learn-inspec
    $ inspec supermarket info dev-sec/ssh-baseline

    name:   ssh-baseline
    owner:  dev-sec
    url:    https://github.com/dev-sec/ssh-baseline

    description:   SSH compliance profile, used for Security + DevOps. More information is available at http://dev-sec.io
    ```


    Now that you have all of the information that you need for implementing a community compliance profile. Including a community profile in your cookbook takes two steps, opening your `.kitchen.yml` file and including the ssh-baseline test as a recipe in your suites.

1. Open the `.kitchen.yml` file in your editor.

    It should look like:

    ```bash
    # kitchen_inspec
    driver:
      name: vagrant

    provisioner:
      name: chef_zero
      always_update_cookbooks: true

    verifier:
      name: inspec

    platforms:
      - name: ubuntu-14.04

    suites:
      - name: default
        run_list:
          - recipe[learning_inspec::default]
        verifier:
          inspec_tests:
        attributes:

       ```

1. Add another line to the .kitchen.yml to pull in the community profile for ssh-baseline, which should look like:

    ```bash
    # kitchen_inspec/.kitchen.yml
    suites:
     - name: default
      run_list:
        - recipe[learning_inspec::default]
      verifier:
        inspec_tests:
          - name: dev-sec/ssh-baseline
          - url: https://github.com/dev-sec/ssh-baseline
      attributes:
    ```

1. To see that the new profile is working, enter`kitchen verify`.

    You should see that the both the original test profile and the community profile are now included.

    ```bash
    #kitchen_inspec
    $ kitchen verify

    ```

1. If you recall, you set up `kitchen verify` to log into `verify.txt`.

    If you open `verify.txt` in your editor, or if you `cat verify.txt` onto your workstation screen, you will be able to examine the output. If you wished to look for a particular control,  “sshd-48” for example, you might run `cat verify.txt | grep sshd-48`

    ```ruby
    #learn-inspec
    $ cat verify.txt
    $ cat verify.txt | grep sshd-48
    ```


[END_BOX]

[START_BOX]

##Make Local Changes to the Community Profile

You can modify the community profiles to perform additional tests--or to skip specific ones. In this exercise, you will use InSpec to run the ssh-baseline profile instead of running it within a cookbook. To use InSpec for running a profile, you will remove the lines you added to the `.kitchen.yml`, create a custom InSpec profile, and run the profile using InSpec. Finally, you will add a control that skips the `sshd-48` control.

1. Remove the `ssh-baseline` profile from your `.kitchen.yml`

    ```bash
    #kitchen_inspec/.kitchen.yml
    driver:
      name: vagrant

    provisioner:
      name: chef_zero
      always_update_cookbooks: true

    verifier:
      name: inspec

    platforms:
      - name: ubuntu-14.04

    suites:
      - name: default
        run_list:
          - recipe[learning_inspec::default]
        verifier:
          inspec_tests:
        attributes:
    ```

1. Navigate the learn-inspec directory.

    From the top level of learn-inspec, create a custom profile with `inspec init profile profiles/test`.

    ```bash
    #~/learn-inspec
    $ inspec init profile profiles/test

    ```

1. Modify the test profile to depend on the `ssh-baseline` profile.

    Add the following depends statement to the `profiles/test/inspec.yml`:

    ```ruby
    #learn-inspec/profiles/test
       name: test
       title: InSpec Profile
       maintainer: The Authors
       copyright: The Authors
       copyright_email: you@example.com
       license: All Rights Reserved
       summary: An InSpec Compliance Profile
       version: 0.1.0

       depends:
         - name: ssh-baseline
           url: https://github.com/dev-sec/ssh-baseline
    ```

1. Modify the control to include 'ssh-baseline' using an editor of your choice.

    ```ruby
    #learn-inspec/profiles/test/controls/example.rbß
    # ensure servers are hardened
    include_controls 'ssh-baseline'
    ```
1. Run 'inspec check' to validate the control.

    ```bash
    #~/learn-inspec/profiles
    $ inspec check test

    Location:    test
    Profile:     test
    Controls:    1
    Timestamp:   2017-05-12T09:22:06-07:00
    Valid:       true

    No errors or warnings

    ```


1. Modify the control to skip_control sshd-48.

    Edit profiles/test/controls/example.rb like this:

    ```ruby
    #learn-inspec/profiles/test/controls/example.rb

    # change the ssh-baseline to skip ssh-48
    include_controls 'ssh-baseline' do
      skip_control 'sshd-48'
    end
    ```

1. `kitchen verify` should now not show that control being run

    To illustrate you can `kitchen verify > verify.txt` and then `cat verify.txt | grep sshd-48`. It should not return any output. You can also examine the text file manually.

1. Now that you know how to modify one control, you can modify any control.

    You can copy the changed control into your profile with a new name and modify for your specific needs.

[END_BOX]

[START_BOX]

## Conclusion

In this tutorial, you learned that using InSpec in combination with the larger Chef environment allows you to pull in compliance profiles made by community members. By modifying community compliance profiles, you are able to specify testing that addresses your unique needs while still reaping the benefits of automation.


[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).

[END_BOX]
