---
title: 'Assess your Red Hat Enterprise Linux infrastructure with Chef Compliance'
layout: lesson-overview
platform: 'Red Hat Enterprise Linux'
logo: redhat.svg
order: 1
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
Whether you must comply with regulatory frameworks such as PCI, HIPAA, or Dodd-Frank, or you have internal company standards you must meet, adhering to your compliance policies helps you deliver safe, secure applications and services.

Meeting the challenge of compliance requires both planning and action, and can be broken down into these stages:

* **Analyze** &mdash; Be clear about your compliance requirements and the desired state of your infrastructure.
* **Specify** &mdash; Translate your desired state into a formal language that precisely specifies your requirements.
* **Test** &mdash; Verify whether the actual state of your infrastructure meets the desired state. Automated tests scale better than manual tests, and can be written even before a new software system or service is developed to provide a clear set of standards that must be met.
* **Remediate** &ndash; When a compliance risk is identified, configure your infrastructure to meet the desired state. Like automated testing, configuring your infrastructure through automation can reduce risk more effectively because the process is more scalable and repeatable than manual configuration. You can use automation not only to configure new systems, but also to prevent configuration drift from occurring on existing systems.
* **Certify** &mdash; Although not always required, many compliance processes require a final human sign off. The better your tests, the shorter the certification step can be.

Think about your current compliance and audit process. How can you _prove_ that the actual state of your infrastructure meets your requirements?

With Chef, you write code to describe the desired state of your infrastructure. When Chef runs, it applies the configuration only when the current state differs from the desired state. This approach is called _test and repair_.

But compliance is not only about what's _on_ the system, but what's _not_ on the system. For example, a database server in production might have certain requirements around which users can access data and which ports are open, but it may also be required to disallow access to services such as FTP and Telnet.

[Chef Compliance](https://www.chef.io/compliance/) allows you to assess your infrastructure's adherence to compliance requirements and to monitor that infrastructure on an ongoing basis. It includes:

* the Chef Compliance server.
* prebuilt compliance profiles to help you get started quickly.
* a language for writing audit controls, which includes audit resources that you can invoke.

With Chef Compliance, the audit process is repeatable. You can automatically run compliance scans every day, every hour, or on every change, giving you increased confidence that even minor changes won't break any compliance rules.

<img src="/assets/images/networks/compliance-ssh-node.svg" style="width: 80%; box-shadow: none;" alt="Your workstation, Chef server, Chef Analytics, and nodes" />

Chef Compliance works with Linux and Windows Server. For Linux, Chef Compliance runs compliance tests by running commands remotely over SSH. This enables you to monitor your systems without the need to install additional software.

You can use Chef Compliance in environments that are not managed by Chef. You can start by using Chef Compliance to assess your existing infrastructure to discover audit failures. As a second step, you can write Chef or other automation code that address those audit failures. Chef's test and repair approach helps ensure that your servers stay in compliance, and you'll have repeatable tests that you can run to prove it.

In this tutorial, you'll set up a Chef Compliance server and scan a Red Hat Enterprise Linux or CentOS server for potential compliance risks. In the next tutorial, you'll use Chef to remediate a common security vulnerability.

After completing this tutorial, you should be able to:

* install and configure Chef Compliance server.
* prepare a server, or _node_, to scan.
* scan your node against the built-in compliance profiles. 

On the next page, you'll start by installing Chef Compliance on your own hardware or virtual machine or from the AWS Marketplace. Or, get an overview of Chef Compliance with this 50-minute webcast.

<% accordion('compliance-webcast', 'Watch the webcast') do %>

<script type="text/javascript" src="https://www.brighttalk.com/clients/js/embed/embed.js"></script> <object class="BrightTALKEmbed" width="705" height="660">     <param name="player" value="channel_player"/>     <param name="domain" value="https://www.brighttalk.com"/>     <param name="channelid" value="11349"/>     <param name="communicationid" value="196633"/>     <param name="autoStart" value="false"/>     <param name="theme" value=""/> </object>

<% end %>