---
title: 'Get a node to scan'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
---
In this part, you'll prepare an Ubuntu 14.04 node to scan, add your node to the Chef compliance scanner, and verify that the Chef compliance scanner can connect to your node.

Recall that for Linux systems, the Chef compliance scanner runs compliance tests remotely over SSH. To enable communication, in this part you'll set up your node to use key-based authentication. (Key-based authentication is recommended over password authentication.)

Here's what you'll do:

1. [Get an Ubuntu 14.04 node to scan](#step1)
1. [Create an SSH key pair to connect to your node](#step2)
1. [Provide your SSH private key to the Chef compliance scanner](#step3)
1. [Add your node to the Chef compliance scanner](#step4)
1. [Create a test connection to your node](#step5)

[COMMENT] Although the Chef compliance scanner works with many Linux distributions, for learning purposes we recommend that you use Ubuntu 14.04 to ensure that what you see matches the procedures and output that's shown here.

Before you begin, open a command prompt or terminal window on your workstation.

[WINDOWS] In this part, you'll run commands such as `ssh-keygen`, `ssh`, and `scp`, which are typically available on Linux systems and Mac OS. From Windows, the easiest way to access these tools is to [install Git for Windows](/manage-a-node/ubuntu/get-set-up#step4). Git for Windows includes Git Bash, a terminal emulator that makes it easy to run Linux commands.

[START_BOX]

## 1. Get an Ubuntu 14.04 node to scan

For this part, you need to bring up an Ubuntu 14.04 server that has the standard configuration. Your server also needs:

* an IP address that's reachable from both your workstation and your Chef compliance scanner server.
* access to the `root` user account or an account with `sudo` access.
* the ability to connect over SSH.

Although not required, you may find it easiest to bring up your node in the same environment as your Chef compliance scanner server. For example, if you're running the Chef compliance scanner server on a virtual machine, your node can be a second virtual machine on the same private network.

If you're interested in using Chef to remediate compliance failures, as you'll do in the next tutorial, now's a good time to make sure that your node has port 443 (HTTPS) open for network traffic. This will enable your node to communicate with a Chef server (you'll set up a Chef server in the next tutorial if you don't have one already).

The [Manage a node](/manage-a-node/ubuntu/get-a-node-to-bootstrap/) tutorial describes some options on how to set up an Ubuntu 14.04 node in the cloud or on a virtual machine, as well as how to prepare your node for use with Chef.

Bring up an Ubuntu 14.04 system now. In the next step, you set up your node to be connectable using key-based authentication.

[COMMENT] You'll see the username `vagrant` and the IP address 192.168.145.134 in the commands and sample output. Be sure to change these to match your environment.

[END_BOX]

[START_BOX]

## 2. Create an SSH key pair to connect to your node

> You perform this part from your workstation and your node.

You need to generate an SSH key pair on your workstation so that the Chef compliance scanner can connect to your node.


[COMMENT] If your node is already set to be connectable through key-based authentication, such as with an Amazon EC2 instance, and you have access to both the public and private parts of the key pair, you can [skip to the next step](#step3) to provide your SSH private key to the Chef compliance scanner.

In this part, you first create an SSH key pair. Then, you copy the public part of your key to your node. Finally, you create a test connection to your node to verify connectivity.

First, ensure you have the <% fp '~/.ssh' %> directory on your workstation. This directory is commonly used to manage public and private SSH keys. This step is important for Windows workstations &ndash; Linux and Mac OS workstations typically already have this directory.

```bash
# ~
$ mkdir ~/.ssh
```

Next, run `ssh-keygen -t rsa` to generate an RSA key pair. When prompted, specify a unique key pair name (for example, `node1`) under the <% fp '~/.ssh' %> directory. Specifying a unique name will ensure that any existing keys are not overwritten. Leave the passphrase blank when prompted.

Here's an example on Windows from a Git Bash window.

```bash
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/c/Users/Thomas/.ssh/id_rsa): /c/users/Thomas/.ssh/node1
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /c/users/Thomas/.ssh/node1.
Your public key has been saved in /c/users/Thomas/.ssh/node1.pub.
The key fingerprint is:
SHA256:VmeqYw0cenm24qvVllK+kt8oj3kCDtNioloHyErtrCM Thomas@DESKTOP-CQOJ2L9
The key's randomart image is:
+---[RSA 2048]----+
|                 |
|                 |
|        . . o    |
|...    o + +     |
|.o.. .. S =      |
|o +.= oo X o     |
|...=.= .B.B      |
|Eo..  .+=B.+     |
|+..   ..=O= .    |
+----[SHA256]-----+
```

Next, copy the public part of your key pair (the public part has the <% fp '.pub' %> file extension) to your node. An easy way to do that is to run the `scp` command. Specify the username and password for the user account that you want the Chef compliance scanner to connect to. Your user account can be the root account or one that has `sudo` access. Here's an example:

```bash
$ scp ~/.ssh/node1.pub vagrant@192.168.145.134:/home/vagrant/.ssh
The authenticity of host '192.168.145.134 (192.168.145.134)' can't be established.
ECDSA key fingerprint is SHA256:J+lrvc6OeB1Wtc1Tz2IKoMJrPyHFXR4K6cJLBoLk20k.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.145.134' (ECDSA) to the list of known hosts.
vagrant@192.168.145.134's password:
node1.pub                                     100%  404     0.4KB/s   00:00
```

Next, connect to your node over SSH.

```bash
$ ssh vagrant@192.168.145.134
vagrant@192.168.145.134's password:
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 4.2.0-35-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Tue May 10 01:26:23 2016 from 192.168.145.1
```

Append the contents of your public key to <% fp '~/.ssh/authorized_keys' %>. Then, delete the public key file because it is no longer needed.

```bash
[vagrant@node-1 ~]$ cat ~/.ssh/node1.pub >> ~/.ssh/authorized_keys
[vagrant@node-1 ~]$ rm ~/.ssh/node1.pub
```

Log out of your SSH session.

```bash
[vagrant@node-1 ~]$ logout
Connection to 192.168.145.134 closed.
```

If you're running Linux or Mac OS on your workstation, you need to set permissions so that only the owner can read and write the private key file. Run this command to set those permissions.

```bash
$ chmod 600 ~/.ssh/node1
```

Finally, create a test connection to your node to verify that your node is connectable through key-based authentication.

```bash
$ ssh -i ~/.ssh/node1 vagrant@192.168.145.134
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 4.2.0-35-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Tue May 10 01:26:23 2016 from 192.168.145.1
```

[COMMENT] In production, you might disable password authentication entirely to improve security even further. This is typically done by specifying `PasswordAuthentication no` in your SSH configuration file, <% fp '/etc/ssh/sshd_config' %>.

[END_BOX]

[START_BOX]

## 3. Provide your SSH private key to the Chef compliance scanner

> You do this part from the Chef compliance scanner web interface.

The next step is to provide the Chef compliance scanner with your SSH private key so that it can connect to your node.

An easy way to get your private key file's contents is to print the file to the terminal and copy the output to your clipboard. Run this command on your workstation.

```bash
$ cat ~/.ssh/node1
-----BEGIN RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAzJOWYo2SSSeJlFPl8EaRvPzz+KBeSGmjpLk/yBge/jNviy1Q
1Q5q3SO8lWV0kbCgyk8qSvwujdmARd3lFwJ5j4aB/PWDr3rD7CasYz1bX2HdrjW6
w0dYam5lZkrzw7k51MX7iFDRzXhb5650CzPF37yJM5rtshL+NJuVLilHkJ7Z7eAi
YcTgts9qyg2mu94O11njy/LyIrW2ZfJ1nwOLr+0jc1N6AifqUsFHE99PdynuACSG
pswGb0QuIS0uv5sc0vxVWiPxFRCoIN7Bq3LiJDZJLCwgd5fPNktem8E5yuHZD7tZ
fhBWLERddhzDcdFI+MJIBn4l4yj11RqIcEnn+QIDAQABAoIBAQDJb62Nfx8Cv1ad
4fqwm5wXPe+w6Z/Mp5BFu07NZMrnvJfhsA4+q8KX2v9vD4Y3inbYnhjj2uqwK/E9
Wl+gR4SQyX4nKUywNi7C0dW+pgTZp5DTX/51GEQ8EFXx4m2iVDlYhFXHhOUA77l3
KHUFLsZxJsDmOnBAfqkl/ehnmqfoAm7QFu0I4a8FH7is7Jhn+MGeTRnw2j00U1Jb
lq6i/NgEjTk4J16Te35b4InENKv3S/GXVjXJwV4/7uttD+RUgMBJW+1qWW5is4kV
7oocwY9aZU4Odtjfv6asr0ORr04hQZvdE/EBrOQTNcDdzddlcvJXQgD5C/B+sAQE
odgEWp4tAoGBAPMEhiApgJiVN5dOffQXBTkF3lW3+/YzH5/GoT8eBY7ivM64XwwB
3uqrdVTS1YsedUoF/R7hBG/ToHgt8oVSrXensfR6mAq2jEElRpEbFzQQLREBv5Sq
ihFaPH6s7IJKnDUDwwmx3ex87JIpaOFEajj2NuFLq9z4SwTER6DDYsoTAoGBANeB
WPkHYKKJs8t7gjhnZGov43O2gelGxNJnmW/QTuJhEJ53CzzPUbL34GNcU3R1HD3N
w1XLO9f/CcI1XwCzJ0CIGYNDRpF0BeicA1Ujpj2t004OmGSYjBZxe4tKmRmlABbi
GyiDW5B8kaNOIs1rn/21fpMlIr0403tL1rkDhYdDAoGBAMOd9qFZBwzLwG3pXvXm
ueuGz8vMR+OMj347k3yNHAhCd50nSEsQDnJ0BgR7mi1cHSmy3GfI1Zt2jItw4PF0
9fGFaXfUXyLwgsHF0aHoXqsoAj7YW3C+Pllte5i0dcUDbe420v6w0GUWwg99idEb
Ey468z4zfWpn62sw3D+KR7FFAoGBANTbseHnY4+nq6skxy6nEQvBWUwFzLN5bxbT
tT435nK7pQqgUr0xmWTIaR47J0M0GT0CbBnlr6pdAmqNBNVQH0kiJPD+Fkm868kh
sDj8CUuK0debmvJhqpzQYlLmz+oAi+IOWvzdIifIoqFGoCF+WHzkM61rVLDJ3DlA
Y0pDLDS5AoGAEh+QfboEMHRjD5+wKPuWZPW0dCTRzEnqRw/mXWBy+eKxr6PcTZZ3
BWg87XTYB/Z61tU1aB60Q4Wi1zWAdZVHE+TmA6xet1npH6e8GWEEc9QNDQDJIzIb
NCetfThYzoyaUia54uT2/hMSA/hHJqZaPXhrDXgfEWk+MMPGEU5riKU=
-----END RSA PRIVATE KEY-----
```

Next, from the web interface, navigate to the **Settings** menu and click **Add Private Key**.

![](compliance/add_pk_button.png)

Fill in the **Name** field. You can use a name other than **node1** if you'd like. Then paste the RSA private key that you retrieved in the previous step into the **Private Key** field.

![](compliance/add_pk.png)

Click **Add Private Key**. You see this confirmation.

![](compliance/add_pk_confirm.png)

[COMMENT] Depending on your requirements, you can use the same key pair to connect to multiple nodes. You only need to generate and import the private part of the key into the Chef compliance scanner one time. Each server requires the public part of the key.

[END_BOX]

[START_BOX]

## 4. Add your node to the Chef compliance scanner

Now you add your node to the Chef compliance scanner.

From the **Dashboard** menu, click **Add** or **Add Nodes**.

![](compliance/add_node_button.png)

Enter your node's hostname or IP address. Leave the **Add to environment** field empty. The Chef compliance scanner creates a default environment for you.

![](compliance/add_node_ip_env_ubuntu.png)

Under **Access configuration**, enter the account the Chef compliance scanner will connect through and specify your private key.

![](compliance/add_node_access.png)

Leave the fields under **Sudo Configuration** at their default values.

![](compliance/add_node_sudo.png)

Click the **Add 1 node** button.

![](compliance/add_node_confirm_button.png)

You're taken back to the dashboard.

![](compliance/add_node_confirm_ubuntu.png)

As an optional step, you can give your node a name to help you identify it later. To do so, click on your node from the dashboard.

In the **Name** field, give your node a descriptive name, for example, **node1-ubuntu1404**.

![](compliance/name_node-ubuntu1404.png)

Scroll to the bottom of the page and click **Save**.

![](compliance/edit_node_save_button.png)

[COMMENT] You can repeat these steps to add additional nodes. You can also add multiple nodes at the same time by separating each hostname or IP address with a comma or a space. The Chef compliance scanner also provides a REST API that enables you to programatically [add multiple nodes in bulk](https://docs.chef.io/api_compliance.html#post-bulk).

[END_BOX]

[START_BOX]

## 5. Create a test connection to your node

You've already manually verified that your node is connectable from your workstation over SSH using key-based authentication. But let's verify that the Chef compliance scanner is also properly set up to use your key pair.

From the dashboard, select your node and click the **Connectivity** button.

![](compliance/connectivity_button_ubuntu1404.png)

The Chef compliance scanner creates a test connection over SSH. You see this in the connectivity report.

![](compliance/connectivity_report_ubuntu1404.png)

<% accordion('troubleshooting-connectivity', 'Troubleshooting connectivity issues') do %>

<%= partial 'troubleshooting' %>

<% end %>

[END_BOX]
