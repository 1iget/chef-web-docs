Remember, you can target more than one platform, and also define more than one suite. Test Kitchen multiplies the number of platforms by the number of suites, creating a _matrix_ of test scenarios.

For example, imagine that you have two suites &ndash; one named `development` and one `test` &ndash; and that you wish to target both Ubuntu 12.04 and Ubuntu 14.04. Your <% fp '.kitchen.yml' %> file might look like this.

```yaml
# ~/learn-chef/cookbooks/motd_ubuntu/.kitchen.yml
driver:
  name: vagrant

provisioner:
  name: chef_zero

platforms:
  - name: ubuntu-12.04
  - name: ubuntu-14.04

suites:
  - name: development
    run_list:
      - recipe[motd_ubuntu::default]
      - recipe[web_dev_tools::default]
    attributes:
  - name: test
    run_list:
      - recipe[motd_ubuntu::default]
    attributes:
```

When you run `kitchen list`, you'll see the full test matrix.

```bash
$ kitchen list
Instance                  Driver   Provisioner  Verifier  Transport  Last Action
development-ubuntu-12.04  Vagrant  ChefZero     Busser    Ssh        <Not Created>
development-ubuntu-14.04  Vagrant  ChefZero     Busser    Ssh        <Not Created>
test-ubuntu-12.04         Vagrant  ChefZero     Busser    Ssh        <Not Created>
test-ubuntu-14.04         Vagrant  ChefZero     Busser    Ssh        <Not Created>
```

Notice that the `development` suite adds a second recipe to the run list from a cookbook named `web_dev_tools` (not shown in this tutorial). This recipe might install additional tools needed for web site development.

Test matrices enable you to define multiple configurations, and test each configuration against one or more platforms.