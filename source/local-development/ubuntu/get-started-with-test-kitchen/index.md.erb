---
title: 'Build and apply a basic cookbook'
order: 2
keywords: TODO
layout: lesson
sections: [exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 30 minutes
---
[HEADLINE] Test Kitchen enables you to run your cookbooks in a temporary environment that resembles production. With Test Kitchen, you confirm that things are working before you deploy your code to a test, preproduction, or production environment. Many users incorporate this kind of local development as part of their overall Chef workflow.

In this lesson, you'll run through the Test Kitchen workflow to get the hang of things.

<img src="/assets/images/misc/local_dev_workflow.png" style="box-shadow: none;" alt=""/>

<table class="icon-description">
  <tr>
    <td><img src="/assets/images/misc/local_dev_create.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen creates an instance of your virtual environment, for example, an Ubuntu 14.04 virtual machine.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_converge.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen applies your cookbook to the virtual environment.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_login.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen creates an SSH session into your virtual environment.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_verify.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, you manually verify that your virtual environment is configured as you expect.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_destroy.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen shuts down and destroys your virtual environment.</td>
  </tr>
</table>

Here, we'll create a cookbook that configures the Message of the Day (MOTD) file. Then we'll apply that cookbook on an Ubuntu virtual machine. Then we'll verify that everything's working. Finally, we'll destroy the instance.

[START_BOX]

## 1. Create the motd_ubuntu cookbook

From the <code class="file-path">~/learn-chef</code> directory on your workstation, run the following command to create a cookbook named `motd_ubuntu`.

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/motd_ubuntu
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/home/user/learn-chef/cookbooks/motd_ubuntu] action create
    - create new directory /home/user/learn-chef/cookbooks/motd_ubuntu
[...]
  * cookbook_file[/home/user/learn-chef/cookbooks/motd_ubuntu/.gitignore] action create
    - create new file /home/user/learn-chef/cookbooks/motd_ubuntu/.gitignore
    - update content in file /home/user/learn-chef/cookbooks/motd_ubuntu/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

[COMMENT] For learning purposes, we'll build a basic MOTD cookbook ourselves. The [motd](https://supermarket.chef.io/cookbooks/motd) cookbook on Chef Supermarket provides a more robust solution.

### Create the MOTD template

We'll use a template to dynamically add information about the virtual machine to the MOTD file, <code class="file-path">/etc/motd</code>. Run the following command to generate a template in your `motd_ubuntu` cookbook named <code class="file-path">server-info</code>.

```bash
# ~/learn-chef
$ chef generate template cookbooks/motd_ubuntu server-info
Compiling Cookbooks...
Recipe: code_generator::template
  * directory[./cookbooks/motd_ubuntu/templates/default] action create
    - create new directory ./cookbooks/motd_ubuntu/templates/default
  * template[./cookbooks/motd_ubuntu/templates/default/server-info.erb] action create
    - create new file ./cookbooks/motd_ubuntu/templates/default/server-info.erb
    - update content in file ./cookbooks/motd_ubuntu/templates/default/server-info.erb from none to e3b0c4
    (diff output suppressed by config)
```

Now add this to <code class="file-path">server-info.erb</code>.

<%= partial 'template-server-info' %>

### Write the default recipe

The default recipe, <code class="file-path">default.rb</code>, fills in the template parameters and writes the resulting file to <code class="file-path">/etc/update-motd.d/98-server-info</code>.

Write out the default recipe like this.

```ruby
# ~/learn-chef/cookbooks/motd_ubuntu/recipes/default.rb
template '/etc/update-motd.d/98-server-info' do
  source 'server-info.erb'
  mode '0755'
end
```

[END_BOX]

[START_BOX]

## 2. Set up the Test Kitchen configuration file

Now we need to tell Test Kitchen a bit about the environment where our cookbook will run.

When you use the `chef generate cookbook` command to create a cookbook, Chef creates a file named <code class="file-path">.kitchen.yml</code> in the root directory of your cookbook. <code class="file-path">.kitchen.yml</code> defines what's needed to run Test Kitchen, including which virtualization provider to use, how to run Chef, and what platforms to run your code on.

The default <code class="file-path">.kitchen.yml</code> file looks like this.

```yaml
# ~/learn-chef/cookbooks/motd_ubuntu/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

# Uncomment the following verifier to leverage Inspec instead of Busser (the
# default verifier)
# verifier:
#   name: inspec
#   format: doc

platforms:
  - name: ubuntu-16.04
  - name: centos-7.2

suites:
  - name: default
    run_list:
      - recipe[motd_ubuntu::default]
    attributes:
```

[COMMENT] On Linux and Mac OS, <code class="file-path">.kitchen.yml</code> is a hidden file. Run `ls -a` if you want to see it from your terminal window.

Test Kitchen can manage more than one instance at a time. The default configuration creates both an Ubuntu and a CentOS virtual machine. Since we want only Ubuntu, modify <code class="file-path">~/learn-chef/cookbooks/motd_ubuntu/.kitchen.yml</code> like this. (Be sure to replace `ubuntu-16.04` with `ubuntu-14.04`.)


```yaml
# ~/learn-chef/cookbooks/motd_ubuntu/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

platforms:
  - name: ubuntu-14.04
    driver:
      customize:
        memory: 256

suites:
  - name: default
    run_list:
      - recipe[motd_ubuntu::default]
    attributes:
```

This configuration also specifies that the virtual machine should have 256 MB of memory available to it.

Here's how the file breaks down.

* **driver** specifies the software that manages the machine. We're using Vagrant.
* **provisioner** specifies how to run Chef. We use `chef_zero` because it enables you to mimic a Chef server environment on your local machine. This allows us to work with node attributes and data bags. This allows us to work with node attributes and other Chef server features.
* **platforms** specifies the target operating systems. We're targeting just one &ndash; Ubuntu 14.04.
* **suites** specifies what we want to apply to the virtual environment. You can have more than one suite. We define just one, named `default`. This is where we provide the run-list, which defines which recipes to run and in the order to run them. Our run-list contains one recipe &ndash; our `motd_ubuntu` cookbook's default recipe.

[COMMENT] When Test Kitchen runs, it downloads the base virtual machine image, called a _box_, if the image does not already exist locally. Test Kitchen can [infer the location](https://github.com/test-kitchen/kitchen-vagrant#-default-configuration) for a set number of common configurations. The Test Kitchen [documentation](https://github.com/test-kitchen/kitchen-vagrant#-configuration) explains in detail about how to provide the box name, download URL, and other configuration parameters.

The [Chef documentation](http://docs.chef.io/config_yml_kitchen.html) explains the structure of the <code class="file-path">.kitchen.yml</code> file in greater detail, and also explains more about the available settings.

[END_BOX]

[START_BOX]

## 3. Create the Test Kitchen instance

Now you'll provision a virtual machine to serve as your test environment. This is the `kitchen create` step in our workflow.

<img src="/assets/images/misc/local_dev_workflow1.png" style="box-shadow: none;" alt=""/>

We often call the set of virtual environments that's created by Test Kitchen simply a _kitchen_.

To work with Test Kitchen, first move to the directory that contains your <code class="file-path">.kitchen.yml</code> file, <code class="file-path">~/learn-chef/cookbooks/motd_ubuntu</code>.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/motd_ubuntu
```

Now run `kitchen list` to see what's in the kitchen.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen list
Instance             Driver   Provisioner  Verifier  Transport  Last Action
default-ubuntu-1404  Vagrant  ChefZero     Busser    Ssh        <Not Created>
```

Our kitchen includes just one instance &ndash; an Ubuntu 14.04 virtual machine that's configured to run the `default` suite. The `Last Action` column shows that the virtual machine is not yet created.

<% accordion('test-matrices', 'Learn more about test matrices') do %>

<%= partial 'test_matrices' %>

<% end %>
<br>

Create the instance now by running `kitchen create`.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen create
-----> Starting Kitchen (v1.4.2)
-----> Creating <default-ubuntu-1404>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Box 'opscode-ubuntu-14.04' could not be found. Attempting to find and install...
           default: Box Provider: virtualbox
           default: Box Version: >= 0
       ==> default: Box file was not detected as metadata. Adding it directly...
       ==> default: Adding box 'opscode-ubuntu-14.04' (v0) for provider: virtualbox
           default: Downloading: https://opscode-vm-bento.s3.amazonaws.com/vagrant/virtualbox/opscode_ubuntu-14.04_chef-provisionerless.box
[...]
       Vagrant instance <default-ubuntu-1404> created.
       Finished creating <default-ubuntu-1404> (2m45.43s).
-----> Kitchen is finished. (2m46.03s)
```

[WINDOWS] [Due to an issue with newer versions of Vagrant](https://github.com/mitchellh/vagrant/issues/6852), if you're using a Windows workstation and the command fails with a blank error message, [you may need to install the Microsoft Visual C++ 2010 SP1 Redistributable Package](https://www.microsoft.com/en-us/download/details.aspx?id=8328). Then try the command again.

This command will take longer the first time you run it because Vagrant needs to download the base image, or box. After the base box is downloaded, `kitchen create` will complete much more quickly.

Now run `kitchen list` again.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen list
Instance             Driver   Provisioner  Verifier  Transport  Last Action
default-ubuntu-1404  Vagrant  ChefZero     Busser    Ssh        Created
```

The `Last Action` column now shows that the virtual machine has been created.

[END_BOX]

[START_BOX]

## 4. Apply the motd_ubuntu cookbook to your Test Kitchen instance

Now run `kitchen converge` to apply the cookbook to the Ubuntu virtual machine.

<img src="/assets/images/misc/local_dev_workflow2.png" style="box-shadow: none;" alt=""/>

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Installing Chef Omnibus (install only if missing)
       Downloading https://www.chef.io/chef/install.sh to file /tmp/install.sh
       Trying wget...
       Download complete.
[...]
       Compiling Cookbooks...
       Converging 1 resources
       Recipe: motd_ubuntu::default
         * template[/etc/update-motd.d/98-server-info] action create
           - create new file /etc/update-motd.d/98-server-info
           - update content in file /etc/update-motd.d/98-server-info from none to 6333ef
           --- /etc/update-motd.d/98-server-info	2016-01-14 21:51:11.534819687 +0000
           +++ /etc/update-motd.d/.98-server-info20160114-5095-1roqsi7	2016-01-14 21:51:11.530819687 +0000
           @@ -1 +1,7 @@
           +#!/bin/sh
           +
           +printf "\nhostname:  default-ubuntu-1404"
           +printf "\nfqdn:      default-ubuntu-1404"
           +printf "\nmemory:    242936kB"
           +printf "\ncpu count: 1\n"
           - change mode from '' to '0755'

       Running handlers:
       Running handlers complete
       Chef Client finished, 1/1 resources updated in 01 seconds
       Finished converging <default-ubuntu-1404> (0m17.95s).
-----> Kitchen is finished. (0m18.80s)
```

[TIP] When you see the word _converge_, think _test and repair_.

Test Kitchen runs `chef-client` on the instance. When the `chef-client` run completes successfully, Test Kitchen exits with exit code `0`. Run the following to check the exit code.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ echo $?
0
```

### From a Windows workstation

```ps
# ~/learn-chef/cookbooks/motd_ubuntu
$ echo $LastExitCode
0
```

If you receive a result other than `0`, fix the errors that were reported. Then run `kitchen converge` to apply the changes and again check the exit code.

Run `kitchen list` to see the latest status.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen list
Instance             Driver   Provisioner  Verifier  Transport  Last Action
default-ubuntu-1404  Vagrant  ChefZero     Busser    Ssh        Converged
```

`kitchen converge` takes longer the first time you run it on a new instance because Test Kitchen needs to install the Chef tools. Run `kitchen converge` a second time to see how much faster it is.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.6.0
       resolving cookbooks for run list: ["motd_ubuntu::default"]
       Synchronizing Cookbooks:
         - motd_ubuntu (0.1.0)
       Compiling Cookbooks...
       Converging 1 resources
       Recipe: motd_ubuntu::default
         * template[/etc/update-motd.d/98-server-info] action create (up to date)

       Running handlers:
       Running handlers complete
       Chef Client finished, 0/1 resources updated in 01 seconds
       Finished converging <default-ubuntu-1404> (0m3.29s).
-----> Kitchen is finished. (0m3.95s)
```

This run was faster &ndash; 4 seconds compared to 18 in this example &ndash; not only because the instance already had the Chef tools installed, but also because it was already in the desired state, so Chef had no work to do.

[END_BOX]

[START_BOX]

## 5. Verify that your Test Kitchen instance contains the updated MOTD

Now let's log in to your virtual machine and verify that the MOTD was updated on your Ubuntu virtual machine.

<img src="/assets/images/misc/local_dev_workflow3_4.png" style="box-shadow: none;" alt=""/>

Run `kitchen login` to log in to your instance.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen login
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

hostname:  default-ubuntu-1404
fqdn:      default-ubuntu-1404
memory:    242936kB
cpu count: 1
Last login: Thu Jan 14 21:57:54 2016 from 10.0.2.2
```

The MOTD appears as expected and displays the information about your instance.

If you don't see the system info appear in the MOTD, then the system may not yet have updated it. In this case, run the following from your Test Kitchen instance to print the updated MOTD to the console.

```bash
# ~
vagrant@default-ubuntu-1404:~$ run-parts /etc/update-motd.d
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

hostname:  default-ubuntu-1404
fqdn:      default-ubuntu-1404
memory:    242936kB
cpu count: 1
```

You can now log out from your Test Kitchen instance.

```bash
# ~
vagrant@default-ubuntu-1404:~$ exit
logout
Connection to 127.0.0.1 closed.
```

[END_BOX]

[START_BOX]

## 6. Delete the Test Kitchen instance

We're all done with our virtual machine, so now run the `kitchen destroy` command to delete it.

<img src="/assets/images/misc/local_dev_workflow5.png" style="box-shadow: none;" alt=""/>

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
-----> Starting Kitchen (v1.4.2)
-----> Destroying <default-ubuntu-1404>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-ubuntu-1404> destroyed.
       Finished destroying <default-ubuntu-1404> (0m5.15s).
-----> Kitchen is finished. (0m6.16s)
```

Run `kitchen list` and you'll see that the `Last Action` column shows that the virtual machine no longer exists.

```bash
# ~/learn-chef/cookbooks/motd_ubuntu
$ kitchen list
Instance             Driver   Provisioner  Verifier  Transport  Last Action
default-ubuntu-1404  Vagrant  ChefZero     Busser    Ssh        <Not Created>
```

[END_BOX]
