Remember, you can target more than one platform, and also define more than one suite. Test Kitchen multiplies the number of platforms by the number of suites, creating a _matrix_ of test scenarios.

For example, imagine that you have two suites &ndash; one named `development` and one `test` &ndash; and that you wish to target both Windows Server 2008 R2 and Windows Server 2012 R2. Your <% fp '.kitchen.yml' %> file might look like this.

```yaml
# ~/learn-chef/cookbooks/settings/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

platforms:
  - name: windows-2008r2
  - name: windows-2012r2

suites:
  - name: development
    run_list:
      - recipe[settings::default]
      - recipe[web_dev_tools::default]
    attributes:
  - name: test
    run_list:
      - recipe[settings::default]
    attributes:
```

When you run `kitchen list`, you'll see the full test matrix.

```bash
$ kitchen list
Instance                    Driver   Provisioner  Verifier  Transport  Last Action
development-windows-2008r2  Vagrant  ChefZero     Busser    Winrm      <Not Created>
development-windows-2012r2  Vagrant  ChefZero     Busser    Winrm      <Not Created>
test-windows-2008r2         Vagrant  ChefZero     Busser    Winrm      <Not Created>
test-windows-2012r2         Vagrant  ChefZero     Busser    Winrm      <Not Created>
```

Notice that the `development` suite adds a second recipe to the run list from a cookbook named `web_dev_tools` (not shown in this tutorial). This recipe might install additional tools needed for web site development.

Test matrices enable you to define multiple configurations, and test each configuration against one or more platforms.