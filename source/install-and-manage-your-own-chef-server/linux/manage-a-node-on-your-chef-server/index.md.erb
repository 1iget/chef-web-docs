---
title: 'Manage a node on your Chef server'
order: 3
keywords: TODO
layout: lesson
sections: [exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 30 minutes
show_disqus: false
---
[HEADLINE] The process to bootstrap and manage a node with your own Chef server is very similar to how you work with hosted Chef.

Now let's put your Chef server to work by managing a node. In this lesson, you'll:

* create a basic cookbook and upload that cookbook to your Chef server.
* prepare a node, bootstrap your node to your Chef server, and apply your cookbook.
* verify that the node was configured as expected.

> Perform this part from your workstation.

[START_BOX]

## 1. Create the hello\_chef\_server cookbook

First, `cd` to <% fp '~/learn-chef/chef-repo' %> and then create the <% fp 'cookbooks' %> directory if it doesn't exist.

```bash
# ~/learn-chef
$ cd ~/learn-chef/chef-repo
$ mkdir cookbooks
```

Now run the following command to create the `hello_chef_server` cookbook.

```bash
# ~/learn-chef/chef-repo
$ chef generate cookbook cookbooks/hello_chef_server
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/home/user/learn-chef/chef-repo/cookbooks/hello_chef_server] action create
    - create new directory /home/user/learn-chef/chef-repo/cookbooks/hello_chef_server
  * template[/home/user/learn-chef/chef-repo/cookbooks/hello_chef_server/metadata.rb] action create_if_missing
    - create new file /home/user/learn-chef/chef-repo/cookbooks/hello_chef_server/metadata.rb
    - update content in file /home/user/learn-chef/chef-repo/cookbooks/hello_chef_server/metadata.rb from none to d531e8
    (diff output suppressed by config)
[...]
  * execute[initialize-git] action run
    - execute git init .
  * cookbook_file[/home/user/learn-chef/chef-repo/cookbooks/hello_chef_server/.gitignore] action create
    - create new file /home/user/learn-chef/chef-repo/cookbooks/hello_chef_server/.gitignore
    - update content in file /home/user/learn-chef/chef-repo/cookbooks/hello_chef_server/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

Now write out your default recipe, <code class="file-path">default.rb</code>, like this. This recipe writes the file <code class="file-path">hello.txt</code> to the directory that Chef sets up for temporary files and data. This recipe works on both Linux and Windows Server.

```ruby
# ~/learn-chef/chef-repo/cookbooks/hello_chef_server/recipes/default.rb
file "#{Chef::Config[:file_cache_path]}/hello.txt" do
  content 'Hello, Chef server!'
end
```

[END_BOX]

[START_BOX]

## 2. Upload the hello\_chef\_server cookbook to the Chef server

Now run the following `knife cookbook upload` command to upload the `hello_chef_server` cookbook to your Chef server.

```bash
# ~/learn-chef/chef-repo
$ knife cookbook upload hello_chef_server
Uploading hello_chef_server [0.1.0]
Uploaded 1 cookbook.
```

The output confirms that the cookbook successfully uploaded to your Chef server, but you can also run the following command to verify this.

```bash
# ~/learn-chef/chef-repo
$ knife cookbook list
hello_chef_server   0.1.0
```

[END_BOX]

[START_BOX]

## 3. Get a node to bootstrap

The process for setting up a node to bootstrap with your own Chef server is the same as working with hosted Chef.

Refer to these pages for a refresher on how to prepare a node for use with Chef. Choose the version that matches the server platform you want to manage.

* [Red Hat Enterprise Linux or CentOS](/manage-a-node/rhel/get-a-node-to-bootstrap/)
* [Windows Server](/manage-a-node/windows/get-a-node-to-bootstrap/)
* [Ubuntu](/manage-a-node/ubuntu/get-a-node-to-bootstrap/)

[END_BOX]

[START_BOX]

## 4. Bootstrap your node

Now you can bootstrap your node. The bootstrap process is the same as working with hosted Chef. Recall that during the boostrap process, you specify the node's run-list, or the collection of recipes to run on your node.

Refer to these pages for a refresher on how to bootstrap your node. Choose the same version that you followed in the previous step. Replace the `--run-list` option with `--run-list 'recipe[hello_chef_server]'` to run the `hello_chef_server` cookbook.

* [Red Hat Enterprise Linux or CentOS](/manage-a-node/rhel/bootstrap-your-node/)
* [Windows Server](/manage-a-node/windows/bootstrap-your-node/)
* [Ubuntu](/manage-a-node/ubuntu/bootstrap-your-node/)

Here's a complete example for a Linux node that uses key-based authentication to connect.

```bash
# ~/learn-chef/chef-repo
$ knife bootstrap 52.37.45.242 --ssh-user root --sudo --identity-file ~/.ssh/my.pem --node-name node1 --run-list 'recipe[hello_chef_server]'
Connecting to 52.37.45.242
52.37.45.242 -----> Installing Chef Omnibus (-v 12)
52.37.45.242 downloading https://omnitruck-direct.chef.io/chef/install.sh
52.37.45.242   to file /tmp/install.sh.1773/install.sh
[...]
52.37.45.242 Thank you for installing Chef!
52.37.45.242 Starting the first Chef Client run...
52.37.45.242 Starting Chef Client, version 12.7.2
52.37.45.242 Creating a new client identity for node1 using the validator key.
52.37.45.242 resolving cookbooks for run list: ["hello_chef_server"]
52.37.45.242 Synchronizing Cookbooks:
52.37.45.242   - hello_chef_server (0.1.0)
52.37.45.242 Compiling Cookbooks...
52.37.45.242 Converging 1 resources
52.37.45.242 Recipe: hello_chef_server::default
52.37.45.242   * file[/var/chef/cache/hello.txt] action create
52.37.45.242     - create new file /var/chef/cache/hello.txt
52.37.45.242     - update content in file /var/chef/cache/hello.txt from none to bdaf73
52.37.45.242     --- /var/chef/cache/hello.txt	2016-02-25 20:59:40.524638371 +0000
52.37.45.242     +++ /var/chef/cache/.hello.txt20160225-1851-1hvnxvh	2016-02-25 20:59:40.524638371 +0000
52.37.45.242     @@ -1 +1,2 @@
52.37.45.242     +Hello, Chef server!
52.37.45.242     - restore selinux security context
52.37.45.242
52.37.45.242 Running handlers:
52.37.45.242 Running handlers complete
52.37.45.242 Chef Client finished, 1/1 resources updated in 09 seconds
```

[END_BOX]

[START_BOX]

## 5. Confirm the result

During the bootstrap process,`chef-client` applied the `hello_chef_server` cookbook, which configured the file <code class="file-path">hello.txt</code> in the Chef cache directory.

Log into your node and verify that <code class="file-path">hello.txt</code> was correctly written. On Linux, the default location of the Chef cache directory is <code class="file-path">/var/chef/cache</code>. On Windows Server, it's <code class="file-path">C:\chef\cache</code>.

### Confirm the result on a Linux node

From your Linux node, the following to write <code class="file-path">hello.txt</code> to the console.

```bash
$ more /var/chef/cache/hello.txt
Hello, Chef server!
```

Alternatively, you can use the `knife ssh` command from your workstation. Here's now to do it using key-based authentication.

```bash
# ~
$ knife ssh ADDRESS 'more /var/chef/cache/hello.txt' --manual-list --ssh-user USER --identity-file IDENTITY_FILE
52.25.26.65 Hello, Chef server!
```

### Confirm the result on a Windows Server node

From your Windows Server node, run this to write <code class="file-path">hello.txt</code> to the console.

```ps
$ Get-Content C:\chef\cache\hello.txt
Hello, Chef server!
```

Congratulations! You've successfully configured your own Chef server and can use it to bootstrap and mangage your nodes.

[END_BOX]
