---
title: 'Make your recipe more manageable'
order: 3
layout: tutorial
description: Create a cookbook to make your recipes easier to manage
keywords: cookbook, recipe
---
[TIMETOCOMPLETE] 15

# Make your recipe more manageable

[Last time](/ubuntu/configure-a-package-and-service/) you learned how to manage a package and a service by configuring a web server. You also added a basic web page. But there was one problem &ndash; although it helped you verify that your web server was properly configured, the code for your HTML page was embedded in the Chef recipe.

Let's create a _cookbook_ to make our web server recipe easier to manage. A cookbook provides structure to your recipes and enables you to more easily reference external files, such as our web server's home page. In essence, a cookbook helps you stay organized.

## <i class="fa fa-linux" style="margin-right:3px;"></i> Get a Linux machine

Like the previous tutorials, you'll configure the server directly. You can continue with the Linux machine you used in the previous tutorial, but let's review the options.

Option 1: Use your own Ubuntu machine. If you have a machine you'd like to use that meets the [system requirements](<%= chef_docs_url %>/chef_system_requirements.html), install the [Chef Development Kit](http://www.getchef.com/downloads/chef-dk/) on it now.

Option 2: Let us provide an Ubuntu virtual machine with the Chef tools installed for you. Just click the button below.

<%= partial 'layouts/provisioner', locals: { title: 'Ubuntu', type: 'ubuntu-localmode' } %>

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:440px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, think about:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how cookbooks are organized.<br>
  <i class="fa fa-check"></i>&nbsp; why the run-list is important.<br>
</sidebar>

## <i class="fa fa-tasks" style="margin-right:3px;"></i> Here's what you'll do

  1. [Create a cookbook](#1createacookbook)
  1. [Create a template](#2createatemplate)
  1. [Update the recipe to reference the HTML template](#3updatetherecipetoreferencethehtmltemplate)
  1. [Run the cookbook](#4runthecookbook)

## 1. Create a cookbook

First, from your <code class="file-path">~/chef-repo</code> directory, create a <code class="file-path">cookbooks</code> directory and `cd` there.

```bash
# ~/chef-repo
$ mkdir cookbooks
$ cd cookbooks
```

Now run the `chef` command to generate a cookbook named **learn\_chef\_apache2**.

```bash
# ~/chef-repo/cookbooks
$ chef generate cookbook learn_chef_apache2
```

Here's the directory structure that the command created.

```bash
# ~/chef-repo/cookbooks
$ tree
.
└── learn_chef_apache2
    ├── Berksfile
    ├── chefignore
    ├── metadata.rb
    ├── README.md
    └── recipes
        └── default.rb

2 directories, 5 files
```

Note the default recipe, named <code class="file-path">default.rb</code>. This is where we'll move our Apache recipe in a moment.

## 2. Create a template

Now we'll move the home page to our cookbook to an external file. First, run this command to generate the HTML file for our home page.

```bash
# ~/chef-repo/cookbooks
$ chef generate template learn_chef_apache2 index.html
```

The file <code class="file-path">index.html.erb</code> gets created under <code class="file-path">learn\_chef\_apache2/templates/default</code>.

```bash
# ~/chef-repo/cookbooks
$ tree
.
└── learn_chef_apache2
    ├── Berksfile
    ├── chefignore
    ├── metadata.rb
    ├── README.md
    ├── recipes
    │   └── default.rb
    └── templates
        └── default
            └── index.html.erb

4 directories, 6 files
```

The .erb extension simply means that the file can have placeholders. More on that later.

Now copy the contents of the HTML file from your recipe to the new HTML file, <code class="file-path">index.html.erb</code>.

```html
<!-- ~/chef-repo/cookbooks/learn_chef_apache2/templates/default/index.html.erb -->
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

## 3. Update the recipe to reference the HTML template

Write out the recipe, <code class="file-path">default.rb</code>, like this.

```ruby
# ~/chef-repo/cookbooks/learn_chef_apache2/recipes/default.rb
package 'apache2'

service 'apache2' do
  action [:start, :enable]
end

template '/var/www/index.html' do
  source 'index.html.erb'
end
```

## 4. Run the cookbook

Now run the cookbook. To do so, we use the `chef-client` command and specify what's called the _run-list_.

```bash
# ~/chef-repo
$ sudo chef-client --local-mode --runlist 'recipe[learn_chef_apache2]'
[2014-07-28T20:05:38+00:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 11.14.0.rc.2
resolving cookbooks for run list: ["learn_chef_apache2"]
Synchronizing Cookbooks:
  - learn_chef_apache2
Compiling Cookbooks...
Converging 3 resources
Recipe: learn_chef_apache2::default
  * package[apache2] action install (up to date)
  * service[apache2] action start (up to date)
  * service[apache2] action enable (up to date)
  * template[/var/www/index.html] action create
    - update content in file /var/www/index.html from 2914aa to ef4ffd
    (no diff)

Running handlers:
Running handlers complete
Chef Client finished, 1/4 resources updated in 5.902863207 seconds
```

[COMMENT] You ran `chef-apply` to run a single recipe from the command line. `chef-client` is what you use to run a cookbook.

Run `curl` again or refresh your web browser to confirm that your web page is still available.

```bash
# ~/chef-repo
$ curl localhost
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

The result is the same as before, but with a cookbook things are now easier to manage.

## <i class="fa fa-question" style="margin-right:3px;"></i> What did we see here?

Your web server is shaping up! With a [cookbook][cookbook] you're now better organized. A cookbook adds structure to your work. You can now author your HTML code in its own file and use  a [template][template] resource to reference it from your recipe.

You also saw the [run-list][run-list]. The run-list lets you specify which recipes to run, and the order in which to run them. This is handy once you have lots of cookbooks, and the order in which they run is important.

[COMMENT] Keep in mind that the web server cookbook you wrote in this lesson likely won't be the one you'd use in production. Only _you_ know the specific needs for your infrastructure. You bring your requirements and Chef provides the tools that help you meet them.

## <i class="fa fa-road" style="margin-right:3px;"></i> What's next

You can continue to experiment with the virtual machine that we provide for this lesson. When you're done you can close the connection - we'll no longer be using that virtual machine.

Next you'll get ready to configure a second web server by uploading your cookbook to the Chef server. After that, we'll give you access to another virtual machine, which doesn't have the Chef tools installed on it, for you to configure remotely from your workstation.

<%= link_to 'Get ready to add another server &rarr;', '/ubuntu/get-ready-to-add-another-server/', class: 'button radius' %>

[cookbook]: <%= chef_docs_url %>/essentials_cookbooks.html
[template]: <%= chef_docs_url %>/resource_template.html
[run-list]: <%= chef_docs_url %>/essentials_node_object_run_lists.html
