---
title: 'Configure a package and service'
order: 2
layout: tutorial
description: Configure IIS web server as a way to learn how to work with packages and services
keywords: package, service, file, resource, Internet Information Services, IIS, W3SVC
---
[TIMETOCOMPLETE] 15

# Configure a package and service

Let's extend what you learned about file management in the [previous lesson](/windows/configure-a-resource/) to manage an Internet Information Services (IIS) web server. Like files, packages and services are also types of resources.

Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.

Although you don't need prior knowledge about web servers, configuring one is a great way to grow your Chef skills.

## <i class="fa fa-windows" style="margin-right:3px;"></i> Get a Windows Server machine

Like the previous tutorial, you'll configure the server directly. You can continue with the Windows Server machine you used in the previous tutorial, but let's review the options.

Option 1: use your own Windows Server machine. If you have a machine that meets the [system requirements](<%= chef_docs_url %>/chef_system_requirements.html) that you'd like to use, install the [Chef Development Kit](http://www.getchef.com/downloads/chef-dk/) on it now.

Option 2: let us provide an Windows Server virtual machine that has the Chef tools installed for you. Just click the button below.

<div id="pre-launch">
<center>
<a id="launch-button" href="javascript:provisionHelper('ec2', 'windows', 'localmode', 'launch-button', 'launching', 'machine-details', 'launch-error')" class="button radius"><i class='fa fa-play'></i>&nbsp;Reserve a Windows Server virtual machine</a>
</center>
</div>

<div id="launching" style="display: none;">
<div class="spinner">
  <div class="cube1"></div>
  <div class="cube2"></div>
</div>
<center>We're provisioning a virtual machine for you. This'll take just a minute.</center>
</div>

<div id="machine-details" class="indent" style="display: none">
{0} Your virtual machine is all ready to go! Download the RDP shortcut file to connect.

<p/>
<center>
<a href="http://localhost:3000/labs/download_rdp?user_name={1}&ip_address={3}" class="button radius"><i class="fa fa-download"></i>&nbsp;Download Remote Desktop File</a>
</center>

Or connect using your remote desktop client.

<div>
</p>

[RDPINFO] {3}, {1}, {2}

</div>

<p/>

<p>
The environment expires <b>{4}</b>. If it expires, you're welcome to spin up a new one.

We hope you'll use the virtual machine to continue experimenting with Chef after you complete the tutorial. We only ask that you use the machine respectfully.
</p>
</div>

<div id="launch-error" class="alert-box error" style="display: none">

<i class="fa fa-exclamation-circle" style="color: #ff2222"></i> Something went wrong while provisioning your machine. We'll look into it. If you get the error again in a few minutes, either try the first option above or <a href="mailto:learnchef@getchef.com?subject=Feedback on Learn Chef">contact us</a>.

</div>

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:420px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, watch for:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how order affects a recipe's behavior.<br>
  <i class="fa fa-check"></i>&nbsp; how to declare multiple actions.<br>
  <i class="fa fa-check"></i>&nbsp; what problems arise.
</sidebar>

## <i class="fa fa-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Install IIS](#1installiis)
  1. [Start the World Wide Web Publishing Service](#2starttheworldwidewebpublishingservice)
  1. [Configure the home page](#3configurethehomepage)

## 1. Install IIS

Let's install IIS. From your working directory, add this recipe to a file named <filepath>webserver.rb</filepath>.

```ruby
# ~/chef-repo/webserver.rb
powershell_script 'Install IIS' do
  code 'add-windowsfeature Web-Server'
  only_if 'powershell -NonInteractive -NoProfile -Command "(Get-WindowsFeature –Name Web-Server).Name -eq $null"'   #
end
```

We don't need to specify an action because <codeinline>run</codeinline> is the default.

Now run <codeinline>chef-apply</codeinline> to apply the recipe.

```ps
# ~/chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * powershell_script[Install IIS] action run
    - execute "powershell.exe" -NoLogo -NonInteractive -NoProfile -ExecutionPolicy RemoteSigned -InputFormat None -File
"C:/Users/chef/AppData/Local/Temp/chef-script20140812-3480-xwa5in.ps1"
```

Run the recipe a second time.

```ps
# ~/chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * powershell_script[Install IIS] action run (skipped due to only_if)
```

This time, Chef does not reinstall IIS. That's because the <codeinline>only\_if</codeinline> attribute executes the resource only when the condition is true. In this case, we use the <codeinline>Get-WindowsFeature</codeinline> PowerShell cmdlet to get the name of the installed web server. The <codeinline>only\_if</codeinline> attribute evaluates to true if the web server name is not set.

## 2. Start the World Wide Web Publishing Service

Now let's start the IIS World Wide Web Publishing Service (W3SVC) and enable it when the server boots. Modify <filepath>webserver.rb</filepath> to look like this.

```ruby
# ~/chef-repo/webserver.rb
powershell_script 'Install IIS' do
  code 'add-windowsfeature Web-Server'
  only_if 'powershell -NonInteractive -NoProfile -Command "(Get-WindowsFeature –Name Web-Server).Name -eq $null"'   #
end

service 'w3svc' do
  action [:start, :enable]
end
```

This code uses a list to declare multiple actions.

Now apply it.

```ps
# ~/chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * powershell_script[Install IIS] action run (skipped due to only_if)
  * service[w3svc] action start (up to date)
  * service[w3svc] action enable (up to date)
```

IIS is already installed, so again there's nothing to do. Similarly, the W3SVC service is already started and enabled. The command would install IIS if it got uninstalled and enable the W3SVC service if it was stopped or disabled.

## 3. Configure the home page

Let's spruce things up and add a custom home page.

You already know how to configure a <codeinline>file</codeinline> resource; append one that configures the default home page, <filepath>c:\inetpub\wwwroot\Default.htm</filepath>, to the end of <filepath>webserver.rb</filepath>. The entire recipe now looks like this.

```ruby
# ~/chef-repo/webserver.rb
powershell_script 'Install IIS' do
  code 'add-windowsfeature Web-Server'
  only_if 'powershell -NonInteractive -NoProfile -Command "(Get-WindowsFeature –Name Web-Server).Name -eq $null"'   #
end

service 'w3svc' do
  action [:start, :enable]
end

file 'c:\inetpub\wwwroot\Default.htm' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Now apply it.

```ps
# ~/chef-repo/
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * powershell_script[Install IIS] action run (skipped due to only_if)
  * service[w3svc] action start (up to date)
  * service[w3svc] action enable (up to date)
  * file[c:\inetpub\wwwroot\Default.htm] action create
    - create new file c:\inetpub\wwwroot\Default.htm
    - update content in file c:\inetpub\wwwroot\Default.htm from none to 2914aa
    --- c:\inetpub\wwwroot\Default.htm  2014-08-19 21:19:58.000000000 +0000
    +++ C:/Users/chef/AppData/Local/Temp/2/Default.htm20140819-596-1vshr64      2014-08-19 21:19:58.000000000 +0000
    @@ -1 +1,6 @@
    +<html>
    +  <body>
    +    <h1>hello world</h1>
    +  </body>
    +</html>
```

Run the <codeinline>Invoke-WebRequest</codeinline> PowerShell cmdlet to confirm that your web page is available.

```ps
# ~\chef-repo
$ (Invoke-WebRequest localhost).Content
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

Optionally, from a web browser on another machine, navigate to your server. You'll see something like this.

![The basic home page](misc/webserver-basic.png)

<hr>

## <i class="fa fa-question blueiconcolor" style="margin-right:3px;"></i> What did we see here?

You saw how to work with the package and service resources. You now know how to work with three types of resources: [file][file], [powershell_script][powershell_script], and [service][service].

You also saw how to apply multiple actions. But how does Chef know what order to apply resources and actions?

### <i class="fa fa-list-ol greeniconcolor" style="margin-right:3px;"></i> Chef works in the order you specify

Let's take another quick look at our web server recipe.

```ruby
# ~/chef-repo/webserver.rb
powershell_script 'Install IIS' do
  code 'add-windowsfeature Web-Server'
  only_if 'powershell -NonInteractive -NoProfile -Command "(Get-WindowsFeature –Name Web-Server).Name -eq $null"'   #
end

service 'w3svc' do
  action [:start, :enable]
end

file 'c:\inetpub\wwwroot\Default.htm' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

The resources are applied in the order they are specified in the recipe. So here IIS is installed, then the W3SVC service is configured, and finally the home page is set. If any resource is already in the desired state, Chef simply moves on to the next one.

The same idea applies to the action list <codeinline>[:start, :enable]</codeinline> for configuring the W3SVC service. The service is started before it is enabled when the server boots.

It's important to always think about how you order things. For example, the recipe wouldn't work if we tried to configure the W3SVC service before the package is even installed.

A recipe stops if any step fails (don't worry &ndash; Chef provides info about the error). That's why we ordered the service actions the way we did. If the service can't start then we don't want to enable it.

## <i class="fa fa-road blueiconcolor" style="margin-right:3px;"></i> What's next

You may notice one big problem with our recipe &ndash; the HTML code lives inside it, so there is no clear separation between our web site code and our recipe to manage it. It's a good incremental step because it helps you get things working, but this of course would never scale to a full web site.

Next you'll learn how to create a _cookbook_ to make your Chef recipes more manageable.

<%= link_to 'Make your recipe more manageable &rarr;', '/windows/make-your-recipe-more-manageable/', class: 'button radius' %>

<script src='../../../assets/javascripts/provision.js' type='text/javascript'></script>

[file]: <%= chef_docs_url %>/resource_file.html
[powershell_script]: <%= chef_docs_url %>/resource_powershell_script.html
[service]: <%= chef_docs_url %>/resource_service.html
