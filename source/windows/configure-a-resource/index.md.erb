---
title: 'Configure a resource'
order: 1
layout: tutorial
---
[TIMETOCOMPLETE] 15

# Configure a resource

To get started, let's look at a basic configuration management project. You'll learn how to manage the INI configuration file for your org's latest application. A file is an example of a _resource_. A resource describes some piece of infrastructure, such as a file, a template, or a package.

## <i class="fa fa-windows" style="margin-right:3px;"></i> Get a Windows Server machine

In this lesson, you'll configure the server directly. That's why it's important that you have a Windows Server machine available. Later you'll manage Windows Servers removely from whichever operating system you choose &ndash; be it Windows, Mac OS, or Linux.

There are two ways to get set up.

Option 1: Use your own Windows Server machine. If you have a machine you'd like to use that meets the [system requirements](<%= chef_docs_url %>/chef_system_requirements.html), install the [Chef Development Kit](<%= chef_dk_url %>) on it now.

Option 2: Let us provide a Windows Server virtual machine with the Chef tools installed for you. Just click the button below.

<%= partial 'layouts/provisioner', locals: { title: 'Windows Server', type: 'windows-localmode' } %>

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:400px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, be on the lookout for:**</span><br>
  <i class="fa fa-check"></i>&nbsp; what resources and recipes are.<br>
  <i class="fa fa-check"></i>&nbsp; what happens when you run `chef-apply`.<br>
</sidebar>

## <i class="fa fa-tasks" style="margin-right:3px;"></i> Here's what you'll do

  1. [Before you start](#beforeyoustart)
  1. [Set up your working directory](#1setupyourworkingdirectory)
  1. [Create the INI file](#2createtheinifile)
  1. [Update the INI file's contents](#3updatetheinifile39scontents)
  1. [Ensure the INI file's contents are not changed by anyone else](#4ensuretheinifile39scontentsarenotchangedbyanyoneelse)
  1. [Delete the INI file](#5deletetheinifile)

<hr>

## Before you start

If you're using your own Windows Server machine, make sure you have Administrator privileges. Also, this lesson assumes that the current user is **chef**. If you're using your own machine, either create the **chef** user as Administrator and logon as **chef** or change the paths you see to match your user name.

You can use a text editor such as Notepad to write Chef code. But a programmer's text editor provides helpful features such as syntax highlighting and line numbering. If you don't have a preferred text editor, try [Atom][atom]. We preinstalled Atom on the virtual machine that we provide, but in case you're using your own machine, these PowerShell commands install the [Chocolately][chocolately] package manager, install the Atom package, and opens a file named <code class="file-path">test.txt</code> in Atom.

```ps
$ iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
$ choco install Atom
$ atom test.txt
```

## 1. Set up your working directory

When working with Chef from Windows, we recommend that you use Windows PowerShell. Open it as Administrator.

Create the <code class="file-path">chef-repo</code> directory under your home directory, <code class="file-path">C:\Users\chef</code>.

```ps
# C:\Users\chef
$ mkdir ~\chef-repo
```

[WINDOWS] In PowerShell, <code class="file-path">~</code> represents the current user's home directory, for example <code class="file-path">C:\Users\chef</code>.

Now `cd` there.

```ps
# C:\Users\chef
$ cd ~\chef-repo
```

## 2. Create the INI file

First, you need to create the file and set its initial contents. To keep things basic, let's configure the file in the working directory.

From your `~\chef-repo` directory, create a file named <code class="file-path">hello.rb</code>, add these contents, and then save the file.

```ruby-Win32
# ~\chef-repo\hello.rb
file 'C:\Users\chef\chef-repo\settings.ini' do
  content 'greeting=hello world'
end
```

From the command prompt, run the following `chef-apply` command to apply what you've written.

```ps
# ~\chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[C:\Users\chef\chef-repo\settings.ini] action create
    - create new file C:\Users\chef\chef-repo\settings.ini
    - update content in file C:\Users\chef\chef-repo\settings.ini from none to 6823fa
    --- C:\Users\chef\chef-repo\settings.ini    2014-08-16 01:04:33.000000000 +0000
    +++ C:/Users/chef/AppData/Local/Temp/2/settings.ini20140816-2080-5hrzgl     2014-08-16 01:04:33.000000000 +0000
    @@ -1 +1,2 @@
    +greeting=hello world
```

The output tells us that a new file, <code class="file-path">settings.ini</code>, was created.

Run the `Get-Content` PowerShell cmdlet to verify that the file was written.

```ps
# ~\chef-repo
$ Get-Content settings.ini
greeting=hello world
```

### Run the command a second time

Now, let's see now what happens when you run the same command again.

```ps
# ~\chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[C:\Users\chef\chef-repo\settings.ini] action create (up to date)
```

This time you get a different response. This is because Chef does work only when it needs to.

Chef looks at the current configuration state and applies the action only if the current state doesn't match the desired state. Here, Chef doesn't create or modify <code class="file-path">settings.ini</code> because it already exists and its contents didn't change.

## 3. Update the INI file's contents

Now you're going to change the INI file.

Modify <code class="file-path">hello.rb</code> like this ('hello world' becomes 'hello chef'.)

```ruby-Win32
# ~\chef-repo\hello.rb
file 'C:\Users\chef\chef-repo\settings.ini' do
  content 'greeting=hello chef'
end
```

Run `chef-apply`.

```ps
# ~\chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[C:\Users\chef\chef-repo\settings.ini] action create
    - update content in file C:\Users\chef\chef-repo\settings.ini from 6823fa to cfde92
    --- C:\Users\chef\chef-repo\settings.ini    2014-08-12 21:27:13.000000000 +0000
    +++ C:/Users/chef/AppData/Local/Temp/settings.ini20140812-3908-1ilgurd      2014-08-12 21:29:25.000000000 +0000
    @@ -1,2 +1,2 @@
    -greeting=hello world
    +greeting=hello chef
```

This time Chef does work because we've changed the desired state of the file and need to update the installed version to match it.

## 4. Ensure the INI file's contents are not changed by anyone else

You need to make sure that no other process can change the INI file.

Imagine that a co-worker manually changes <code class="file-path">settings.ini</code> by replacing 'hello chef' with 'hello robots'. Go ahead and change your copy through your text editor. Or you can change the file from the command line like this.

```ps
# ~\chef-repo
$ Set-Content settings.ini 'greeting=hello robots'
```

Now run `chef-apply`.

```ps
# ~\chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[C:\Users\chef\chef-repo\settings.ini] action create
    - update content in file C:\Users\chef\chef-repo\settings.ini from 49c070 to cfde92
    --- C:\Users\chef\chef-repo\settings.ini    2014-08-12 21:32:38.000000000 +0000
    +++ C:/Users/chef/AppData/Local/Temp/settings.ini20140812-1288-1ub7kv2      2014-08-12 21:32:52.000000000 +0000
    @@ -1,2 +1,2 @@
    -greeting=hello robots
    +greeting=hello chef
```

Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resource matches what you specify, even if it is altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

## 5. Delete the INI file

OK, you're done experimenting with the INI file, so let's clean up. From your <code class="file-path">~\chef-repo</code> directory, create a new file named <code class="file-path">goodbye.rb</code> and save this content to it.

```ruby-Win32
# goodbye.rb
file 'C:\Users\chef\chef-repo\settings.ini' do
  action :delete
end
```

Now apply <code class="file-path">goodbye.rb</code> to delete the file.

```ps
# ~\chef-repo
$ chef-apply goodbye.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[C:\Users\chef\chef-repo\settings.ini] action delete
    - delete file C:\Users\chef\chef-repo\settings.ini
```

The output shows that <code class="file-path">settings.ini</code> is now gone, but let's prove it.

```ps
# ~\chef-repo
$ Test-Path settings.ini
False
```

<hr>

## <i class="fa fa-question" style="margin-right:3px;"></i> What did we see here?

You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state. You worked with a [file][file], which is one kind of resource.

### Resources describe the what, not the how

Your policy declares _what_ state each resource should be in, but not _how_ to get there. In this lesson, you declared that the file <code class="file-path">settings.ini</code> must exist and what its contents are, but you didn't specify how to apply that policy. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.

A recipe declares what state each resource should be in but not how to achieve that state. Chef handles these complexities for you.

### Resources have actions

When you deleted the file, you saw the `delete` action.

Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's the most common affirmative one &ndash; for example, _create_ a file, _install_ a package, and _start_ a service.

When we created the file we didn't specify the `create` action because `create` is the default. But of course you can specify it if you want.

The documentation for each resource type, [file](<%= chef_docs_url %>/resource_file.html) for example, explains the type's default action.

### Recipes organize resources

In Chef, <code class="file-path">hello.rb</code> is an example of a [recipe](<%= chef_docs_url %>/essentials_cookbook_recipes.html), or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.

Our recipe states everything we need to manage the INI file. You used [chef-apply][chef-apply] to apply that recipe from the command line.

<hr>

## <i class="fa fa-road" style="margin-right:3px;"></i> What's next

Of course, your job is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

<%= link_to 'Configure a package and service &rarr;', '/windows/configure-a-package-and-service/', class: 'button radius' %>

[atom]: http://atom.io
[chocolately]: https://chocolatey.org
[file]: <%= chef_docs_url %>/resource_file.html
[chef-apply]: <%= chef_docs_url %>/ctl_chef_apply.html
