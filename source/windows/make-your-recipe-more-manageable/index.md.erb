---
title: 'Make your recipe more manageable'
order: 4
layout: tutorial
description: Create a cookbook to make your recipes easier to manage
keywords: cookbook, recipe
---
[TIMETOCOMPLETE] 15

# Make your recipe more manageable

[Last time](/windows/configure-a-package-and-service/) you learned how to manage a package and a service by configuring a web server. You also added a basic web page. But there was one problem &ndash; although it helped you verify that your web server was properly configured, the code for your HTML page was embedded in the Chef recipe.

Let's create a _cookbook_ to make our web server recipe easier to manage. A cookbook provides structure to your recipes and enables you to more easily reference external files, such as our web server's home page. In essence, a cookbook helps you stay organized.

## <i class="fa fa-windows" style="margin-right:3px;"></i> Get a Windows Server machine

Like the previous tutorials, you'll configure the server directly. You can continue with the Windows Server machine you used in the previous tutorial, but let's review the options.

Option 1: use your own machine. If you have a Windows Server machine that meets the [system requirements](<%= chef_docs_url %>/chef_system_requirements.html) that you'd like to use, install the [Chef Development Kit](http://www.getchef.com/downloads/chef-dk/) on it now.

Option 2: let us provide an windows virtual machine that has the Chef tools installed for you. Just click the button below.

<%= partial 'layouts/provisioner', locals: { title: 'Windows Server',
                                             type: 'ec2-windows-localmode' } %>

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:440px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, think about:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how cookbooks are organized.<br>
  <i class="fa fa-check"></i>&nbsp; why the run-list is important.<br>
</sidebar>

## <i class="fa fa-tasks" style="margin-right:3px;"></i> Here's what you'll do

  1. [Create a cookbook](#1createacookbook)
  1. [Create a template](#2createatemplate)
  1. [Update the recipe to reference the HTML template](#3updatetherecipetoreferencethehtmltemplate)
  1. [Run the cookbook](#4runthecookbook)

## 1. Create a cookbook

First, from your working directory, create a <filepath>cookbooks</filepath> directory and <codeinline>cd</codeinline> there.

```ps
# ~/chef-repo
$ mkdir cookbooks
$ cd cookbooks
```

Now run the <codeinline>chef</codeinline> command to generate a cookbook named **learn\_chef\_iis**.

```ps
# ~/chef-repo/cookbooks
$ chef generate cookbook learn_chef_iis
```

Here's the directory structure that the command created.

```ps
# ~/chef-repo/cookbooks
$ tree /F
Folder PATH listing
Volume serial number is 5E71-6BA3
C:.
└───learn_chef_iis
    │   .kitchen.yml
    │   Berksfile
    │   chefignore
    │   metadata.rb
    │   README.md
    │
    └───recipes
            default.rb
```

Note the default recipe, named <filepath>default.rb</filepath>. This is where we'll move our IIS recipe in a moment.

## 2. Create a template

Now we'll move the home page to our cookbook to an external file. First, run this command to generate the HTML file for our home page.

```ps
# ~/chef-repo/cookbooks
$ chef generate template learn_chef_iis index.html
```

The file <filepath>index.html.erb</filepath> gets created under <filepath>learn\_chef\_iis\templates\default</filepath>.

```ps
# ~\chef-repo\cookbooks
$ tree /F
Folder PATH listing
Volume serial number is 5E71-6BA3
C:.
└───learn_chef_iis
    │   .kitchen.yml
    │   Berksfile
    │   chefignore
    │   metadata.rb
    │   README.md
    │
    ├───recipes
    │       default.rb
    │
    └───templates
        └───default
                index.html.erb
```

The .erb extension simply means that the file can have placeholders. More on that later.

Now copy the contents of the HTML file from your recipe to the new HTML file, <filepath>index.html.erb</filepath>.

```html
<!-- ~\chef-repo\cookbooks\learn_chef_iis\templates\default\index.html.erb -->
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

[COMMENT] If you're using the Atom text editor, running the <codeinline>atom .</codeinline> command from your <filepath>cookbooks</filepath> directory enables you to easily navigate among your cookbook's files.

## 3. Update the recipe to reference the HTML template

Write out the recipe, <filepath>default.rb</filepath>, like this.

```ruby
# ~\chef-repo\cookbooks\learn_chef_iis\recipes\default.rb
powershell_script 'Install IIS' do
  code 'add-windowsfeature Web-Server'
  not_if 'powershell -NonInteractive -NoProfile -Command "(Get-WindowsFeature –Name Web-Server).InstallState -eq Installed"'   #
end

service 'w3svc' do
  action [:start, :enable]
end

template 'c:\inetpub\wwwroot\Default.htm' do
  source 'index.html.erb'
end
```

## 4. Run the cookbook

Now run the cookbook. To do so, we use the <codeinline>chef-client</codeinline> command and specify what's called the _run-list_.

```ps
# ~\chef-repo
$ chef-client --local-mode --runlist 'recipe[learn_chef_iis]'
[2014-08-19T21:29:02+00:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 11.14.0.rc.2
resolving cookbooks for run list: ["learn_chef_iis"]
Synchronizing Cookbooks:
  - learn_chef_iis
Compiling Cookbooks...
Converging 3 resources
Recipe: learn_chef_iis::default
  * powershell_script[Install IIS] action run (skipped due to not_if)
  * service[w3svc] action start (up to date)
  * service[w3svc] action enable (up to date)
  * template[c:\inetpub\wwwroot\Default.htm] action create
    - update content in file c:\inetpub\wwwroot\Default.htm from 2914aa to 100c2f
    (no diff)

Running handlers:
Running handlers complete
Chef Client finished, 1/3 resources updated in 20.482954 seconds
```

[COMMENT] You ran <codeinline>chef-apply</codeinline> to run a single recipe from the command line. <codeinline>chef-client</codeinline> is what you use to run a cookbook.

Run <codeinline>Invoke-WebRequest</codeinline> or refresh your web browser to confirm that your web page is still available.

```ps
# ~\chef-repo
$ (Invoke-WebRequest localhost).Content
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

The result is the same as before, but with a cookbook things are now easier to manage.

## <i class="fa fa-question" style="margin-right:3px;"></i> What did we see here?

Your web server is shaping up! With a [cookbook][cookbook] you're now better organized. A cookbook adds structure to your work. You can now author your HTML code in its own file and use  a [template][template] resource to reference it from your recipe.

You also saw the [run-list][run-list]. The run-list lets you specify which recipes to run, and the order in which to run them. This is handy once you have lots of cookbooks, and the order in which they run is important.

[COMMENT] Keep in mind that the web server cookbook you wrote in this lesson likely won't be the one you'd use in production. Only _you_ know the specific needs for your infrastructure. You bring your requirements and Chef provides the tools that help you meet them.

## <i class="fa fa-road" style="margin-right:3px;"></i> What's next

Next you'll get ready to configure a second web server by uploading your cookbook to a Chef server.

<%= link_to 'Get ready to add another server &rarr;', '/windows/get-ready-to-add-another-server/', class: 'button radius' %>


[cookbook]: <%= chef_docs_url %>/essentials_cookbooks.html
[template]: <%= chef_docs_url %>/resource_template.html
[run-list]: <%= chef_docs_url %>/essentials_node_object_run_lists.html
