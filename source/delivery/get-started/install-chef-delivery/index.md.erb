---
title: 'Part 1: Install Chef Delivery on AWS'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
survey_id: 2mCgpoLBUQiBI9gS46TWiSMBYPVi_2FumGC4rJ8eJqMxJdJLzeR4SRdxnZWD5DzYU2
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
show_disqus: false
---
In this part, you install Chef Delivery on AWS using [CloudFormation](https://aws.amazon.com/cloudformation/).

The automation you run brings up a fully-functional Chef Delivery installation, which includes a Chef server, a Chef Delivery server, and build nodes that run jobs scheduled by Chef Delivery. The automation also sets up an end-user's Windows workstation as well as an Ubuntu server that runs the `awesome_customers_delivery` cookbook to bring up the Customers web application.

[COMMENT] The automation we provide for AWS gives you a preconfigured setup. We recommend that you use this approach to get a feel for how Delivery works. Later, you can [install Chef Delivery](https://docs.chef.io/release/delivery/index.html) in another cloud environment or on your own hardware.

Here are the steps to perform:

1. [Review the installation](#step1)
1. [Gather prerequisites](#step2)
1. [Run the CloudFormation template](#step3)
1. [Connect to the Windows workstation](#step4)

[START_BOX]

## 1. Review the installation

The systems that make up Chef Delivery reflect the types of software you want to deliver. For example, if you use Chef  to manage your infrastructure, your system may include [Chef Analytics](https://docs.chef.io/analytics.html) or a private [Chef Supermarket](https://docs.chef.io/supermarket.html) server that exists behind your firewall.

The automation you run for this tutorial includes the minimum number of systems that are typical for many users. Here's a diagram:

<img src="/assets/images/delivery/delivery-scenario-architecture.svg" style="width: 100%; box-shadow: none;" alt="An example Delivery installation" />

The diagram shows these components:

**Delivery cluster** &ndash; These are the systems that make up a Chef Delivery installation.

At a minimum, a Delivery cluster includes Chef Delivery and one build node.

Your setup includes Chef Delivery and Chef server, along with two build nodes. The Chef server holds the `awesome_customers_delivery` cookbook, which is an output of the pipeline. Having multiple build nodes enables phases to run in parallel.

**Acceptance, Union, Rehearsal, and Delivered environments** &ndash; Delivery deploys build artifacts, or the pipeline's final output, to these environments.

The output of your pipeline informs how you set up your environments.

For example, you might deploy a SQL Server database to a Windows Server environment. You might deploy web content and other media to an Amazon S3 bucket. In this tutorial, the `awesome_customers_delivery` cookbook configures the Customers web application on Ubuntu. Therefore, the Acceptance, Union, Rehearsal and Delivered stages would all run Ubuntu.

Your Acceptance, Union, Rehearsal, and Delivered environments typically resemble your production environment. Delivered is the final stage of the pipeline. What "delivered" means for your system is up to you. It could mean deploying the change so that it is live and receiving production traffic, or it might mean deploying the change to a staging or preproduction environment that is later promoted manually or through some other mechanism.

The automation brings up one Ubuntu 14.04 instance, and it is for the Acceptance environment. It comes already [bootstrapped to the Chef server](https://docs.chef.io/install_bootstrap.html). We provide only the Acceptance environment to minimize the number of systems involved as you learn about Chef Delivery. A complete setup might include additional Ubuntu servers for the Union, Rehearsal and Delivered stages.

**Team member's workstation** &ndash; Workstations are typically either a laptop or desktop computer. A workstation can run Windows, Mac OS X, or Linux. From the workstation, users access Chef Delivery using either the command line or the web interface. Common tasks include creating projects, writing build cookbooks, submitting new features to the pipeline, and reviewing and approving others' changes.

The automation sets up a Windows workstation because Windows provides an easy way to connect to its graphical desktop remotely.

**VPC** &ndash; Although a [virtual private cloud](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html) (VPC) is not required to use Chef Delivery on AWS, the automation creates one to give you an environment that's isolated from the rest of your AWS account. When you tear down your Delivery installation, only the resources that belong to this isolated environment are destroyed.

An added benefit to using a VPC is that it assigns a static IP adddress to each server. These IP addresses remain fixed so that you can temporarily stop and restart your AWS instances as you evaluate Chef Delivery. In a complete setup, it's common to keep the instances running so that users can access Delivery at any time.

### Instance types, network, and ports

The automation uses the recommended [instance type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) for each server.

The automation also configures the appropriate [security groups](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html) for the Delivery cluster and the environments. [Learn more about the recommended port settings](https://docs.chef.io/install_delivery_aws.html#network-and-ports)

For the Acceptance environment, the automation sets up network access on these ports:

* 22 (SSH) &ndash; enables `chef-client` to run remotely from the build nodes as the pipeline runs.
* 80 (HTTP) &ndash; enables you to access the Customers web application.
* 443 (HTTPS) &ndash; enables the environment to access the Chef server when it checks in for the latest cookbooks.

[END_BOX]

[START_BOX]

## 2. Gather prerequisites

To run the automated installation, you need:

1. an [AWS account](https://aws.amazon.com/free/).
1. an [SSH key pair](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#create-a-key-pair) for one of these regions.
  * us-east-1 (N. Virginia)
  * us-west-1 (N. California)
  * us-west-2 (Oregon)
1. a Chef Delivery license key.

Ensure you place your SSH private key in the <% fp '.ssh' %> directory under your home directory.

If you don't have a license key, click the button below, fill out the short form, and check your email for a link to a temporary license key for this tutorial.

[START_MODAL get-a-license-key Get a license key]

<script src="//app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_1438">
  <h3>Get a Delivery License Key</h3>
</form>
<script>
MktoForms2.loadForm("//app-sj05.marketo.com", "255-VFB-268", 1438, function(form) {
  form.onSuccess(function(values, followUpUrl) {
    $('a.close-reveal-modal').trigger('click'); // close modal.
    return false; // don't navigate to follow-up URL.
  });
});
</script>

[END_MODAL]

After you click the link in the email, the license file named <% fp 'delivery.license' %> will be downloaded to your web browserâ€™s downloads directory. Move this file to your home directory. The final path is <% fp '~/delivery.license' %>. The automation you'll run in the next step uploads your license key to the Delivery server.

[END_BOX]

[START_BOX]

## 3. Run the CloudFormation template

Now you're ready to run the [CloudFormation](https://aws.amazon.com/cloudformation/) template to bring up the Delivery installation. A CloudFormation template is a code file (in JSON format) that defines a collection of resources, called a _stack_. When the template runs, it brings up the preconfigured server instances to run Delivery along with their required networking and security settings.

1. From a web browser, start by navigating to the AWS home page. [https://aws.amazon.com/](https://aws.amazon.com/)
1. Click the **Sign In to the Console** button and log in to your account.
  ![](delivery/aws_sign_in.png)
1. From the **Services** menu, select **Management Tools** and then **CloudFormation**.
  ![](delivery/aws_open_cloudformation.png)
1. Click **Create Stack**
  ![](delivery/aws_create_stack.png)
1. Under **Choose a template**, choose **Specify an Amazon S3 template URL**.
  ![](delivery/aws_stack_choose_template.png)
1. Enter the URL that matches your SSH key pair's region. Then click **Next**.
  * us-east-1 (N. Virginia) &mdash; [https://s3.amazonaws.com/ned-virginia-pup-cf-templates/delivery-tutorial.json](https://s3.amazonaws.com/ned-virginia-pup-cf-templates/delivery-tutorial.json)
  * us-west-1 (N. California) &mdash; [https://s3-us-west-1.amazonaws.com/ned-pub-cf-templates/delivery-tutorial.json](https://s3-us-west-1.amazonaws.com/ned-pub-cf-templates/delivery-tutorial.json)
  * us-west-2 (Oregon) &mdash; [https://s3-us-west-2.amazonaws.com/ned-oregon-pup-templates/delivery-tutorial.json](https://s3-us-west-2.amazonaws.com/ned-oregon-pup-templates/delivery-tutorial.json)
1. From the **Specify Details** screen, fill in the required details. When you're finished, click **Next**.
  * **Stack name** can be any name you choose. This value uniquely identifies your stack in AWS. Note your stack name for later.
  * **KeyName** specifies the name of your SSH key pair. If you're new to AWS, this is the name you created in [step 2](#step2).
  * **SSHLocation** specifies the range of IP addresses (using [CIDR notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation)) that are permitted to connect to the AWS instances (users still require credentials to connect.) **0.0.0.0/0** permits access from any computer and gives you the most flexibility. Specify an address range if you want to limit who can connect.
  ![](delivery/aws_create_stack_details.png)
1. From the **Options** screen, click **Next**.
1. From the **Review** screen, click **Create**.

Your stack is now being created. The process typically takes around 2 minutes to finish.

![](delivery/aws_stack_create_in_progress.png)

The process is done when the **Status** reads **CREATE_COMPLETE**.

![](delivery/aws_stack_create_complete.png)

[COMMENT] The appendix explains and how to [temporarily suspend the AWS instances](/delivery/get-started/managing-your-aws-instances#stoppingandrestartingyourawsinstances) and how to [tear down the installation](/delivery/get-started/managing-your-aws-instances#tearingdownyourdeliveryinstallation) when you're finished with your Delivery evaluation.

Congratulations. You're almost ready to set up Delivery for your users. As a final step, you'll connect to the virtual Windows workstation.

[END_BOX]

[START_BOX]

## 4. Connect to the Windows workstation

For the remainder of the tutorial, you'll work from the virtual Windows workstation that's part of the automated installation.

Here you create a Remote Desktop Protocol (RDP) connection from your computer to your virtual workstation. Keep in mind that after the automated setup completes, it might take a few minutes for the Windows workstation to be fully connectable.

### Get the workstation's public IP address

From the CloudFormation console, select your stack and click the **Outputs** tab. Copy the IP address for the Windows workstation to the clipboard.

![](delivery/aws_stack_windows_workstation.png)

### Install an RDP client

<% accordion('install-rdp-windows', 'Windows users') do %>

<% markdown do %>

Windows comes with an RDP client. Run `mstsc` from the command prompt to bring up Remote Desktop.

<% end %>

<% end %>

<% accordion('install-rdp-macosx', 'Mac OS X users') do %>

<% markdown do %>

[Download Microsoft Remote Desktop](https://itunes.apple.com/us/app/microsoft-remote-desktop/id715768417?mt=12) from the Apple App Store. The RDP client from Microsoft's web site might not work.

<% end %>

<% end %>

<br>

### Connect to the workstation

<% accordion('connect-rdp-windows', 'Windows users') do %>

<% markdown do %>

1. Open the Remote Desktop Connection application, `mstsc`.
1. In the **Computer** field, enter the Windows workstation's public IP address or DNS name.
1. In the **User name** field, enter <span id="username-windows"><code>Administrator</code></span>. <a data-copytarget="#username-windows" class='small-button radius'>Copy</a>
1. Select the **Allow me to save credentials** option.
1. Click **Connect**.
1. Enter the password <span id="password-windows"><code>P4ssw0rd</code></span> when prompted. <a data-copytarget="#password-windows" class='small-button radius'>Copy</a>
1. A warning appears stating that the identity of the remote computer cannot be verified. This is because the Windows workstaton comes with a self-signed certificate. Click **Yes** to continue connecting.

![](/assets/images/misc/rdp_windows.png)

<% end %>

<% end %>

<% accordion('connect-rdp-macosx', 'Mac OS X users') do %>

<% markdown do %>

1. Open Microsoft Remote Desktop.
1. Select **New**.
1. In the **Connection name** field, enter a descriptive name, for example, **Delivery tutorial Windows workstation**.
1. In the **PC name** field, enter the Windows workstation's public IP address or DNS name.
1. In the **User name** field, enter <span id="username-mac"><code>Administrator</code></span>. <a data-copytarget="#username-mac" class='small-button radius'>Copy</a>
1. In the **Password** field, enter <span id="password-mac"><code>P4ssw0rd</code></span>. <a data-copytarget="#password-mac" class='small-button radius'>Copy</a>
1. Close the window.
1. Select your connection to connect.
1. A warning appears stating that the certificate could not be verified back to a root certificate. This is because the Windows workstaton comes with a self-signed certificate. Click **Continue** to continue connecting.

![](/assets/images/misc/rdp_mac.png)

<% end %>

<% end %>

[END_BOX]