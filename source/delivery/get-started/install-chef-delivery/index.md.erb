---
title: 'Install Chef Delivery on AWS'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
survey_id: 2mCgpoLBUQiBI9gS46TWiSMBYPVi_2FumGC4rJ8eJqMxJdJLzeR4SRdxnZWD5DzYU2
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
In this part, you install Chef Delivery on AWS using a [CloudFormation template](https://aws.amazon.com/cloudformation/).

The automation you run brings up a fully-functional Chef Delivery installation, which includes a Chef server, a Chef Delivery server, and build nodes that run jobs scheduled by Chef Delivery. The automation also sets up an end-user's Windows workstation as well as an Ubuntu server that runs the `awesome_customers_delivery` cookbook to bring up the Customers web application.

[COMMENT] The automation we provide for AWS gives you a preconfigured setup. We recommend that you use this approach to get a feel for how Delivery works. Later, you can [install Chef Delivery](https://docs.chef.io/release/delivery/index.html) in another cloud environment or on your own hardware.

Here are the steps to perform:

1. [Review the installation](#step1)
1. [Gather prerequisites](#step2)
1. [Run the CloudFormation template](#step3)
1. Learn how to [tear down your Delivery installation](/delivery/get-started/install-chef-delivery#howtoteardownyourdeliveryinstallation) when you're done

[START_BOX]

## 1. Review the installation

The systems that make up a Chef Delivery system depends on how you use Chef. For example, your system may include [Chef Analytics](https://docs.chef.io/analytics.html) or a private [Chef Supermarket](https://docs.chef.io/supermarket.html) server that exists behind your firewall.

The automation you run for this tutorial includes the minimum number of systems that are typical for most users. Here's a diagram:

[PRODNOTE] Update diagram to 1) remove administrator's workstation 2) include team member's workstation in the VPC 3) show two build nodes 4) grey-out U-R-D systems.

<img src="/assets/images/delivery/delivery-scenario-architecture.png" style="width: 100%; box-shadow: none;" alt="An example Delivery installation" />

The diagram shows these components:

**Delivery cluster** &ndash; These are the systems that make up a Chef Delivery installation.

At a minimum, a Delivery cluster includes Chef Delivery and one build node.

Your setup includes Chef Delivery and Chef server, along with two build nodes. Having multiple build nodes enables phases to run in parallel.

**Acceptance, Union, Rehearsal, and Delivered environments** &ndash; Delivery deploys build artifacts, or the pipeline's final output, to these environments.

The output of your pipeline informs how you set up your environments.

For example, you might deploy a SQL Server database to a Windows Server environment. You might deploy web content and other media to an Amazon S3 bucket. In this tutorial, the `awesome_customers_delivery` cookbook configures the Customers web application on Ubuntu. Therefore, the Acceptance, Union, Rehearsal and Delivered stages would all run Ubuntu.

The automation brings up one Ubuntu 14.04 instance, and it is for the Acceptance environment. It comes already [bootstrapped to the Chef server](https://docs.chef.io/install_bootstrap.html).

We provide only the Acceptance environment to minimize the number of systems involved as you learn about Chef Delivery. A complete setup might include additional Ubuntu servers for the Union, Rehearsal and Delivered stages.

**Team member's workstation** &ndash; Workstations are typically either a laptop or desktop computer. A workstation can run Windows, Mac OS X, or Linux. From the workstation, users access Chef Delivery using either the command line or the web interface. Common tasks include creating projects, writing build cookbooks, submitting new features to the pipeline, and reviewing and approving others' changes.

The automation sets up a Windows workstation because Windows provides an easy way to connect to its graphical desktop remotely.

**VPC** &ndash; Although a [virtual private cloud](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html) (VPC) is not required to use Chef Delivery on AWS, the automation creates one to give you an environment that's isolated from the rest of your AWS account. When you tear down your Delivery cluster, only the resources that belong to this isolated environment are destroyed.

An added benefit to using a VPC is that it assigns a static IP adddress to each server. These IP addresses remain fixed so that you can temporarily stop and restart your AWS instances as you evaluate Chef Delivery. In a complete setup, it's common to keep the instances running so that users can access Delivery at any time.

### Instance types, network, and ports

The automation uses the recommended [instance type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) for each server.

The automation also configures the appropriate [security groups](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html) for the Delivery cluster and the environments. ([Learn more about the recommended port settings](https://docs.chef.io/install_delivery_aws.html#network-and-ports).)

For the Acceptance environment, the automation sets up network access on these ports:

* 22 (SSH) &ndash; enables `chef-client` to run remotely from the build nodes as the pipeline runs.
* 80 (HTTP) &ndash; enables you to access the Customers web application.
* 443 (HTTPS) &ndash; enables the environment to access the Chef server when it checks in for the latest cookbooks.

[END_BOX]

[START_BOX]

## 2. Gather prerequisites

[PRODNOTE] Reviewers: You don't need to run this in US East. But users will once we create the final template.

To run the automated installation, you need:

1. an [AWS account](https://aws.amazon.com/free/).
1. an [SSH key pair](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/get-set-up-for-amazon-ec2.html#create-a-key-pair) for the US East (N. Virginia) region.
1. a Chef Delivery license key.

If you don't have a license key, click the button below, fill out the short form, and check your email for a link to a temporary license key for this tutorial.

[START_MODAL get-a-license-key Get a license key]

<script src="//app-sj05.marketo.com/js/forms2/js/forms2.min.js"></script>
<form id="mktoForm_1438">
  <h3>Get a Delivery License Key</h3>
</form>
<script>
MktoForms2.loadForm("//app-sj05.marketo.com", "255-VFB-268", 1438, function(form) {
  form.onSuccess(function(values, followUpUrl) {
    $('a.close-reveal-modal').trigger('click'); // close modal.
    return false; // don't navigate to follow-up URL.
  });
});
</script>

[END_MODAL]

After you click the link in the email, the license file named <% fp 'delivery.license' %> will be downloaded to your web browserâ€™s downloads directory. Move this file to your home directory. The final path is <% fp '~/delivery.license' %>.

[END_BOX]

[START_BOX]

## 3. Run the CloudFormation template

[PRODNOTE] This needs to be updated for the final template. For now, bring the thing up from here: [https://github.com/chef-cft/delivery-tutorial/tree/full-auto#delivery-deployment-cloudformation-template](https://github.com/chef-cft/delivery-tutorial/tree/full-auto#delivery-deployment-cloudformation-template). This will take about 30 minutes to complete. The final template will complete in less than 5 minutes.

TODO:

- Walk the user through installing from the EC2 Management Console.
- Then show the running instances from the EC2 Management Console.
- Have the user note the IP address, logon information, etc. of each machine in the cluster.

[END_BOX]

[START_BOX]

## How to tear down your Delivery installation

[PRODNOTE] TODO: Show the user how to delete the stack.

[END_BOX]
