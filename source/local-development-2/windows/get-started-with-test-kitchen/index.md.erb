---
title: 'Build and apply a basic cookbook'
order: 2
keywords: TODO
layout: lesson
sections: [exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 30 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
[HEADLINE] Test Kitchen enables you to run your cookbooks in a temporary environment that resembles production. With Test Kitchen, you confirm that things are working before you deploy your code to a test, preproduction, or production environment.

In this lesson, you'll run through the Test Kitchen workflow to get the hang of things.

<img src="/assets/images/misc/local_dev_workflow.png" style="box-shadow: none;" alt=""/>

<table class="icon-description">
  <tr>
    <td><img src="/assets/images/misc/local_dev_create.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen creates an instance of your virtual environment, for example, a Windows Server 2012 R2 virtual machine.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_converge.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen applies your cookbook to the virtual environment.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_login.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, you connect to your virtual environment, typically over Remote Desktop.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_verify.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, you manually verify that your virtual environment is configured as you expect.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_destroy.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen shuts down and destroys your virtual environment.</td>
  </tr>
</table>

Here, we'll create a cookbook that configures a file named <code class="file-path">C:\temp\server-info.txt</code> that contains information about your server. Next, we'll apply that cookbook on a Windows Server virtual machine. Then, we'll verify that everything's working. Finally, we'll destroy the instance.

[START_BOX]

## 1. Create the settings-windows cookbook

From the <code class="file-path">~/learn-chef</code> directory on your workstation, run the following command to create a cookbook named `settings-windows`.

```bash
# ~/learn-chef
$ chef generate cookbook settings-windows
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/home/user/learn-chef/settings-windows] action create
    - create new directory /home/user/learn-chef/settings-windows
[...]
  * cookbook_file[/home/user/learn-chef/settings-windows/.gitignore] action create
    - create new file /home/user/learn-chef/settings-windows/.gitignore
    - update content in file /home/user/learn-chef/settings-windows/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

### Create the settings template

We'll use a template to dynamically add information about the virtual machine to the settings file, <code class="file-path">C:\temp\server-info.txt</code>. Run the following command to generate a template in your `settings-windows` cookbook named <code class="file-path">server-info.txt</code>.

```bash
# ~/learn-chef
$ chef generate template settings-windows server-info.txt
Compiling Cookbooks...
Recipe: code_generator::template
  * directory[./settings-windows/templates/default] action create
    - create new directory ./settings-windows/templates/default
  * template[./settings-windows/templates/default/server-info.txt.erb] action create
    - create new file ./settings-windows/templates/default/server-info.txt.erb
    - update content in file ./settings-windows/templates/default/server-info.txt.erb from none to e3b0c4
    (diff output suppressed by config)
```

Now add this to <code class="file-path">server-info.txt.erb</code>.

<%= partial '_template-server-info' %>

This settings file lists the server's FQDN, hostname, operating system platform and version, and its total number of CPUs. When Chef runs, it uses node attributes to replace these placeholders with their values.

### Write the default recipe

The default recipe, <code class="file-path">default.rb</code>, fills in the template parameters and writes the resulting file to <code class="file-path">C:\temp\server-info.txt</code>.

Write out the default recipe like this.

```ruby
# ~/learn-chef/settings-windows/recipes/default.rb
directory 'C:/temp'

template 'C:/temp/server-info.txt' do
  source 'server-info.txt.erb'
end
```

[END_BOX]

[START_BOX]

## 2. Set up the Test Kitchen configuration file

Now we need to tell Test Kitchen a bit about the environment where our cookbook will run.

When you use the `chef generate cookbook` command to create a cookbook, Chef creates a file named <code class="file-path">.kitchen.yml</code> in the root directory of your cookbook. <code class="file-path">.kitchen.yml</code> defines what's needed to run Test Kitchen, including which virtualization provider to use, how to run Chef, and what platforms to run your code on.

The default <code class="file-path">.kitchen.yml</code> file looks like this.

```yaml
# ~/learn-chef/settings-windows/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

# Uncomment the following verifier to leverage Inspec instead of Busser (the
# default verifier)
# verifier:
#   name: inspec

platforms:
  - name: ubuntu-14.04
  - name: centos-7.1

suites:
  - name: default
    run_list:
      - recipe[settings-windows::default]
    attributes:
```

[COMMENT] On Linux and Mac OS, <code class="file-path">.kitchen.yml</code> is a hidden file. Run `ls -a` if you want to see it from your terminal window.

Test Kitchen can manage more than one instance at a time. The default configuration creates both an Ubuntu and a CentOS virtual machine. Since we want Windows Server, modify <code class="file-path">~/settings-windows/.kitchen.yml</code> according to the Test Kitchen driver that you're using.

[START_TABS config EC2, Hyper-V, Vagrant]

[START_TAB configEC2 active]

Replace the values for `aws_ssh_key_id`, `region`, `availability_zone`, `subnet_id`, `image_id`, `security_group_ids`, and `ssh_key` with your values.

```yaml
# ~/learn-chef/settings-windows/.kitchen.yml
---
driver:
  name: ec2
  aws_ssh_key_id: learnchef
  region: us-west-2
  availability_zone: a
  subnet_id: subnet-eacb348f
  instance_type: m1.small
  image_id: ami-c3b3b1f3
  security_group_ids: ['sg-2d3b3b48']
  retryable_tries: 120

provisioner:
  name: chef_zero_scheduled_task

transport:
  ssh_key: C:\Users\LearnChef\.ssh\learnchef.pem

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[settings-windows::default]
    attributes:
```

[COMMENT] Be sure to use the full path to your .pem file and not the `~` syntax.

This configuration uses the `m1.small` [instance type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html), which is the default. While an `m1.small` or larger instance type can provide better performance, you can use the `t2.micro` instance type if your AWS account provides [free-tier](http://aws.amazon.com/free/) access.

[END_TAB]

[START_TAB configHyperV]

This configuration specifies the location of the parent virtual hard drive (VHD) folder, the name of the virtual switch to use for network access, and allocates 2 GB of memory to the instance.

Replace the value for `password` with the `Administrator` password on your base virtual machine.

```yaml
# ~/learn-chef/settings-windows/.kitchen.yml
---
driver:
  name: hyperv
  parent_vhd_folder: C:\Hyper-V
  parent_vhd_name: WindowsServer2012R2.vhdx
  vm_switch: ExternalSwitch
  memory_startup_bytes: 2GB

provisioner:
  name: chef_zero_scheduled_task

transport:
  password: H24?6;H.QaV8JP2&

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[settings-windows::default]
    attributes:
```

[END_TAB]

[START_TAB configVagrant]

```yaml
# ~/learn-chef/settings-windows/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero_scheduled_task

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[settings-windows::default]
    attributes:
```

[END_TAB]

[END_TABS]

Here's how the file breaks down.

* **driver** specifies the software that manages the machine. It's the Test Kitchen driver that you set up in the previous lesson.
* **provisioner** specifies how to run Chef. When working with Linux instances, `chef_zero` is a common choice because it enables you to mimic a Chef server environment on your local machine. For working with Windows Server, we use the `chef_zero_scheduled_task` plugin that you installed in the previous lesson. `chef_zero_scheduled_task` works like `chef_zero`, but also creates a scheduled task that runs `chef-client` immediately and connects to that task so that Test Kitchen can receive the output of the `chef-client` run.
* **transport** specifies the protocol, port, and other network settings that allow Test Kitchen to communicate with the instance.
* **platforms** specifies the target operating systems. We're targeting just one &ndash; Windows Server 2012 R2.
* **suites** specifies what we want to apply to the virtual environment. You can have more than one suite. We define just one, named `default`. This is where we provide the run-list, which defines which recipes to run and in the order to run them. Our run-list contains one recipe &ndash; our `settings-windows` cookbook's default recipe.

[DOCS] The [Chef documentation](http://docs.chef.io/config_yml_kitchen.html) explains the structure of the <code class="file-path">.kitchen.yml</code> file in greater detail, and also explains more about the available settings.

[Learn more about configuring Test Kitchen for collaborative development](dynamic-configuration/) in the appendix.

[END_BOX]

[START_BOX]

## 3. Create the Test Kitchen instance

Now you'll provision a virtual machine to serve as your test environment. This is the `kitchen create` step in our workflow.

<img src="/assets/images/misc/local_dev_workflow1.png" style="box-shadow: none;" alt=""/>

We often call the set of virtual environments that's created by Test Kitchen simply a _kitchen_. Run `kitchen list` to see what's in the kitchen.

```bash
# ~/learn-chef/settings
$ kitchen list
Instance                Driver  Provisioner            Verifier  Transport  Last Action
default-windows-2012r2  Ec2     ChefZeroScheduledTask  Busser    Winrm      <Not Created>
```

If you're using a driver other than the EC2 driver, you would see that driver listed in the **Driver** column.

Our kitchen includes just one instance &ndash; a Windows Server 2012 R2 virtual machine that's configured to run the `default` suite. The `Last Action` column shows that the virtual machine is not yet created.

<a class="help-button radius" href="#" data-reveal-id="test-matrix-modal">Learn more about test matrices</a>

<div id="test-matrix-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
<p>Remember, you can target more than one platform, and also define more than one suite. Test Kitchen multiplies the number of platforms by the number of suites, creating a <em>matrix</em> of test scenarios. For example, imagine that you have two suites &ndash; one named <code>development</code> and one <code>test</code>. You also have two platforms that you want to test against &ndash; a standard Windows Server 2012 R2 configuration named <code>windows-2012r2</code> and a version that contains added security settings named <code>windows-2012r2-secure</code>. You want to ensure that your cookbook works as you expect on both platforms. Your <code class="file-path">.kitchen.yml</code> file might look like this.</p>
<div class="window " ng-non-bindable="">
              <nav class="control-window">
                <div class="close">×</div>
                <div class="minimize"></div>
                <div class="deactivate"></div>
              </nav>
              <h1 class="titleInside">Editor: ~/settings</h1>
              <div class="container"><div class="editor"><div class="highlight ruby"><pre class="code_wrapper"><table style="border-spacing: 0"><tbody><tr><td class="gutter gl" style="text-align: right"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><pre><span class="o">---</span>
<span class="ss">driver:
  </span><span class="nb">name</span><span class="p">:</span> <span class="n">vagrant</span>

<span class="ss">provisioner:
  </span><span class="nb">name</span><span class="p">:</span> <span class="n">chef_zero_scheduled_task</span>

<span class="ss">platforms:
  </span><span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">windows</span><span class="o">-</span><span class="mi">2012</span><span class="n">r2</span>
  <span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">windows</span><span class="o">-</span><span class="mi">2012</span><span class="n">r2</span><span class="o">-</span><span class="n">secure</span>

<span class="ss">suites:
  </span><span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="n">development</span>
    <span class="ss">run_list:
      </span><span class="o">-</span> <span class="n">recipe</span><span class="o">[</span><span class="n">settings</span><span class="o">::</span><span class="n">default</span><span class="o">]</span>
    <span class="ss">attributes:
  </span><span class="o">-</span> <span class="nb">name</span><span class="p">:</span> <span class="nb">test</span>
    <span class="ss">run_list:
      </span><span class="o">-</span> <span class="n">recipe</span><span class="o">[</span><span class="n">settings</span><span class="o">::</span><span class="n">default</span><span class="o">]</span>
    <span class="n">attributes</span><span class="p">:</span><span class="w">
</span></pre></td></tr></tbody></table></pre></div></div></div></div>
<p>When you run <code>kitchen list</code>, you&#39;ll see the full test matrix.</p>
<div class="window ">
            <nav class="control-window">
              <div class="close">×</div>
              <div class="minimize"></div>
              <div class="deactivate"></div>
            </nav>
            <h1 class="titleInside">Terminal: ~/settings</h1>
            <div class="container"><div class="terminal"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">$</span><span class="line-number">&nbsp;</span><span class="line-number">&nbsp;</span><span class="line-number">&nbsp;</span><span class="line-number">&nbsp;</span><span class="line-number">&nbsp;</span></pre></td><td class="code"><pre><code><span class="line command">kitchen list</span><span class="line output">Instance                           Driver   Provisioner            Verifier  Transport  Last Action</span><span class="line output">development-windows-2012r2         Vagrant  ChefZeroScheduledTask  Busser    Winrm      &lt;Not Created&gt;</span><span class="line output">development-windows-2012r2-secure  Vagrant  ChefZeroScheduledTask  Busser    Winrm      &lt;Not Created&gt;</span><span class="line output">test-windows-2012r2                Vagrant  ChefZeroScheduledTask  Busser    Winrm      &lt;Not Created&gt;</span><span class="line output">test-windows-2012r2-secure         Vagrant  ChefZeroScheduledTask  Busser    Winrm      &lt;Not Created&gt;</span></code></pre></td></tr></tbody></table></div></div>
          </div>
<p>Test matrices enable you to define multiple configurations, and test each configuration against one or more platforms.</p>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

Create the instance now by running `kitchen create`.

```bash
# ~/learn-chef/settings
$ kitchen create
-----> Starting Kitchen (v1.4.2)
-----> Creating <default-windows-2012r2>...
       If you are not using an account that qualifies under the AWS
free-tier, you may be charged to run these suites. The charge
should be minimal, but neither Test Kitchen nor its maintainers
are responsible for your incurred costs.

       Instance <i-c5f28e00> requested.
       EC2 instance <i-c5f28e00> created.
       Waited 0/600s for instance <i-c5f28e00> to become ready.
       Waited 5/600s for instance <i-c5f28e00> to become ready.
[...]
       Waited 340/600s for instance <i-c5f28e00> to become ready.
       Waited 0/600s for instance <i-c5f28e00> to fetch windows admin password.
       Retrieved Windows password for instance <i-c5f28e00>.
       EC2 instance <i-c5f28e00> ready.
       [WinRM] Established


           Directory: C:\chef\ohai\hints


       Mode                LastWriteTime     Length Name
       ----                -------------     ------ ----
       -a---         8/31/2015   4:33 PM          0 ec2.json


       Finished creating <default-windows-2012r2> (6m45.10s).
-----> Kitchen is finished. (6m46.15s)
```

This output is for the EC2 driver. The output that you'll see depends on which driver you're using.

[TIP] We'll show you how to later, but if at any point you need to destroy your instance, run `kitchen destroy`. You can run `kitchen converge` again at a later time to pick up where you left off. This is especially important when using the EC2 driver, as you are billed hourly for any machine resources that you use.

Now run `kitchen list` again.

```bash
# ~/learn-chef/settings
$ kitchen list
Instance                Driver  Provisioner            Verifier  Transport  Last Action
default-windows-2012r2  Ec2     ChefZeroScheduledTask  Busser    Winrm      Created
```

The `Last Action` column now shows that the virtual machine has been created.

[END_BOX]

[START_BOX]

## 4. Apply the settings cookbook to your Test Kitchen instance

Now run `kitchen converge` to apply the cookbook to the Windows Server virtual machine.

<img src="/assets/images/misc/local_dev_workflow2.png" style="box-shadow: none;" alt=""/>

```bash
# ~/learn-chef/settings
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-windows-2012r2>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Installing Chef Omnibus (install only if missing)
       Downloading package from https://opscode-omnibus-packages.s3.amazonaws.com/windows/2008r2/x86_64/chef-client-12.4.1-1.msi
       Download complete.
[...]
           - create new file C:/temp/server-info.txt[2015-09-01T12:18:16+00:00] INFO: template[C:/temp/server-info.txt] updated file contents C:/temp/server-info.txt

           - update content in file C:/temp/server-info.txt from none to 8384c4
           --- C:/temp/server-info.txt	2015-09-01 12:18:16.000000000 +0000
           +++ C:/Users/ADMINI~1/AppData/Local/Temp/chef-rendered-template20150901-2164-zjeu0t	2015-09-01 12:18:16.000000000 +0000
           @@ -1 +1,5 @@
           +fqdn:      WIN-2CSE2JA9V7V
           +hostname:  WIN-2CSE2JA9V7V
           +platform:  windows - 6.3.9600
           +cpu count: 1
       [2015-09-01T12:18:16+00:00] INFO: Chef Run complete in 1.049543 seconds

       Running handlers:
       [2015-09-01T12:18:16+00:00] INFO: Running report handlers
       Running handlers complete
       [2015-09-01T12:18:16+00:00] INFO: Report handlers complete
       Chef Client finished, 2/2 resources updated in 81.828162 seconds

       Finished converging <default-windows-2012r2> (6m8.00s).
-----> Kitchen is finished. (6m9.13s)
```

[TIP] When you see the word _converge_, think _test and repair_.

Test Kitchen runs `chef-client` on the instance. When the `chef-client` run completes successfully, Test Kitchen exits with exit code `0`. Run the following to check the exit code.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef/settings
$ echo $?
0
```

### From a Windows workstation

```ps
# ~/learn-chef/settings
$ echo $LastExitCode
0
```

If you receive a result other than `0`, fix the errors that were reported. Then run `kitchen converge` to apply the changes and again check the exit code.

Run `kitchen list` to see the latest status.

```bash
# ~/learn-chef/settings
$ kitchen list
Instance                Driver  Provisioner            Verifier  Transport  Last Action
default-windows-2012r2  Ec2     ChefZeroScheduledTask  Busser    Winrm      Converged
```

`kitchen converge` takes longer the first time you run it on a new instance because Test Kitchen needs to install the Chef tools. Run `kitchen converge` a second time to see how much faster it is.

```bash
# ~/learn-chef/settings
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-windows-2012r2>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
[...]
       Compiling Cookbooks...
       Converging 2 resources
       Recipe: settings-windows::default
         * directory[C:/temp] action create[2015-08-31T18:32:23+00:00] INFO: Processing directory[C:/temp] action create (settings-windows::default line 6)
        (up to date)
         * template[C:/temp/server-info.txt] action create[2015-08-31T18:32:23+00:00] INFO: Processing template[C:/temp/server-info.txt] action create (settings-windows::default line 8)
        (up to date)
       [2015-08-31T18:32:23+00:00] INFO: Chef Run complete in 0.671878 seconds

       Running handlers:
       [2015-08-31T18:32:23+00:00] INFO: Running report handlers
       Running handlers complete
       [2015-08-31T18:32:23+00:00] INFO: Report handlers complete
       Chef Client finished, 0/2 resources updated in 58.890655 seconds

       Finished converging <default-windows-2012r2> (1m34.60s).
-----> Kitchen is finished. (1m36.02s)
```

This run was faster &ndash; 1 minute and 36 seconds compared to 6 minutes in this example &ndash; not only because the instance already had the Chef tools installed, but also because it was already in the desired state, so Chef had to do no work.

[END_BOX]

[START_BOX]

## 5. Verify that your Test Kitchen instance contains the settings file

Now let's log in to your virtual machine and verify that the settings file was created on your Windows Server virtual machine.

<img src="/assets/images/misc/local_dev_workflow3_4.png" style="box-shadow: none;" alt=""/>

The way you connect to your instance depends on which driver you're using.

[START_TABS connect EC2, Hyper-V, Vagrant]

[START_TAB connectEC2 active]

When you use the EC2 driver, Test Kitchen creates two files in your cookbook's <code class="file-path">.kitchen</code> directory &ndash; a Remote Desktop (.rdp) file and a YAML (.yml) configuration file that lists details about the instance.

```bash
# ~/learn-chef/settings
$ ls .kitchen
default-windows-2012r2.rdp default-windows-2012r2.yml logs
```

Get the password for the Windows account that Test Kitchen used to run `chef-client`.

```bash
# ~/learn-chef/settings
$ more .kitchen/default-windows-2012r2.yml
---
username: administrator
server_id: i-c6047d03
hostname: ec2-52-88-81-53.us-west-2.compute.amazonaws.com
password: A4rs&sCTBpP
last_action: converge
```

Now either run the .rdp file directly or run `kitchen login` to create a Remote Desktop connection to your instance. When prompted, enter the password that you retrieved in the previous step.

```bash
# ~/learn-chef/settings
$ kitchen login
```

[END_TAB]

[START_TAB connectHyperV]

If you're using the Hyper-V driver, login to your instance, `default-windows-2012r2`, through Hyper-V Manager. Login as `Administrator` and use the same password that you set when you created the base virtual machine.

[END_TAB]

[START_TAB connectVagrant]

If you're using the Vagrant driver, a VirtualBox window appears when you create the instance. Login through that window as either `Administrator` or `vagrant` &ndash; the password for both accounts is `vagrant`.

[END_TAB]

[END_TABS]

From your connection, open Windows PowerShell and confirm that <code class="file-path">C:\temp\server-info.txt</code> exists and contains information about your server.

```ps
$ Get-Content C:\temp\server-info.txt
fqdn:      WIN-2CSE2JA9V7V
hostname:  WIN-2CSE2JA9V7V
platform:  windows - 6.3.9600
cpu count: 1
```

Success! You can now close the connection.

[END_BOX]

[START_BOX]

## 6. Delete the Test Kitchen instance

We're all done with our virtual machine, so now run the `kitchen destroy` command to delete it.

<img src="/assets/images/misc/local_dev_workflow5.png" style="box-shadow: none;" alt=""/>

```bash
# ~/learn-chef/settings
$ kitchen destroy
-----> Starting Kitchen (v1.4.2)
-----> Destroying <default-windows-2012r2>...
       EC2 instance <i-a2354a67> destroyed.
       Finished destroying <default-windows-2012r2> (0m1.27s).
-----> Kitchen is finished. (0m2.50s)
```

Run `kitchen list` and you'll see that the `Last Action` column shows that the virtual machine no longer exists.

```bash
# ~/learn-chef/settings
$ kitchen list
Instance                Driver  Provisioner            Verifier  Transport  Last Action
default-windows-2012r2  Ec2     ChefZeroScheduledTask  Busser    Winrm      <Not Created>
```

[END_BOX]