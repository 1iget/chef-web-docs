---
title: 'Remediate the compliance failure on a local virtual machine'
order: 2
keywords: TODO
layout: lesson
sections: []
time_to_complete: 60 minutes
next: {heading: Next, partial: next}
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
Recall that in the previous tutorial you ran the **cis-ubuntu14.04lts-level1** compliance profile and that it failed the **Ensure Firewall is active** rule.

![](compliance/scan_report_issues_firewall_ubuntu1404.png)

Configuring the firewall helps ensure that your server provides access to ports from addresses that you trust. Although `iptables` may be active, CIS recommends that you enable [Uncomplicated Firewall](https://help.ubuntu.com/community/UFW), or UFW, to ease firewall configuration.

In this part, you'll verify the failure of the **Ensure Firewall is active** rule on a local virtual machine and remediate it. By starting with local development with Test Kitchen, you can verify configuration changes on temporary test instances before you apply the updated configuration to your production servers.

You can configure Test Kitchen to download and run compliance profiles on your test instances. For example, you can pull compliance profiles from [Chef Supermarket](https://docs.chef.io/supermarket.html), a Git repository, or from your Chef Compliance server. Here, you'll configure Test Kitchen to download the **cis/cis-ubuntu14.04lts-level1** profile from your Chef Compliance server.

Here's what you'll do:

1. [Understand the compliance failure](#step1)
1. [Install kitchen-inspec](#step2)
1. [Login to Chef Compliance through the InSpec CLI](#step3)
1. [Create the ufw cookbook](#step4)
1. [Replicate the failure on your Test Kitchen instance](#step5)
1. [Remediate the failure](#step6)

[START_BOX]

### 1. Understand the compliance failure

Let's take a closer look at what the **Ensure Firewall is active** rule checks for.

From the **Compliance** menu in the Chef Compliance web interface, select the **CIS Ubuntu Linux 14.04 LTS Benchmark Level 1** profile. Then scroll to the **Ensure Firewall is active** rule. You'll see this:

![](compliance/ensure_firewall_is_active_rule.png)

The code you see is [InSpec](https://github.com/chef/inspec), an auditing and testing framework that's built on the Ruby programming language. If you're familiar with testing frameworks such as [RSpec](http://rspec.info) and [Serverspec](http://serverspec.org), InSpec code will look familiar to you.

InSpec provides [built-in resource types](https://docs.chef.io/inspec_reference.html) that describe the various parts of a system, such as files, users, and services. In this example, you see the `bash` resource.

The rule uses a regular expression to verify whether the result of running the `ufw status` command prints "Status: active" to standard output.

[COMMENT] [Learn more about regular expressions in Ruby](http://www.tutorialspoint.com/ruby/ruby_regular_expressions.htm). Then see the regular expression in action. Go to [rubular.com](http://rubular.com) and enter the regular expression `^Status: active$`. Then test it against a few strings and note the behavior. Two strings you might test against are `Status: active` and `Status: inactive`.

When you scanned your Ubuntu node, you saw that the rule failed.

![](compliance/scan_report_issues_firewall_ubuntu1404.png)

Let's connect to your node and verify that UFW is not enabled.

You can connect using the private key you created in the previous tutorial. Here's an example.

```bash
$ ssh -i ~/.ssh/node1 vagrant@192.168.145.134
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 4.2.0-35-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Tue May 10 01:26:23 2016 from 192.168.145.1
```

Run `ufw status`.

```bash
vagrant@default-ubuntu-1404:~$ sudo ufw status
Status: inactive
```

You see that its status is "inactive".

Now that you better understand why the rule failed, you can begin to write Chef code to remediate the failure.

[END_BOX]

[START_BOX]

## 2. Install kitchen-inspec

Later in this part, you'll scan a test instance against the CIS profile through Test Kitchen. To do so, you need the `kitchen-inspec` gem. `kitchen-inspec` is a plugin that enables you to run InSpec tests from Test Kitchen. 

Install `kitchen-inspec` like this.

```bash
# ~/learn-chef
$ chef gem install kitchen-inspec
Fetching: kitchen-inspec-0.13.0.gem (100%)
Successfully installed kitchen-inspec-0.13.0
1 gem installed
```

[END_BOX]

[START_BOX]

## 3. Login to Chef Compliance through the InSpec CLI

To download compliance profiles from your Chef Compliance server, `kitchen-inspec` requires login credentials.

To do so, you run the `inspec compliance login` command. The [inspec](https://docs.chef.io/ctl_inspec.html) command-line interface (CLI) utility comes with the Chef DK.

To login from the CLI, you first need an authorization token. To get that, select **About** from the menu located at the upper-right corner.in the web interface. 

![](compliance/webui_about.png)

Then copy the contents of the **Refresh token** field to the clipboard.

![](compliance/webui_token.png)

Next, run this command to connect InSpec to your Chef Compliance server. Replace <% ph 'FQDN' %> with your Chef Compliance server's FQDN, <% ph 'USER' %> with the username you use to login to the Chef Compliance web interface, and <% ph 'TOKEN' %> with your authorization token.

```bash
# ~/learn-chef
$ inspec compliance login https://FQDN --user USER --insecure --refresh_token 'TOKEN'
```

Here's an example:

```bash
# ~/learn-chef
$ inspec compliance login https://chef-compliance.local --user john-smith --insecure --refresh_token '2/Ksux-Hx7UVilz6PFOray5od0HK70rVr8MJhdyGUwVV4ypelVBkGsgHXla0RpLZybCtBzuSuJgK4NkoWq7a1qNA=='
Successfully authenticated
```

[COMMENT] The `--insecure` flag bypasses SSL verification because Chef Compliance comes with a self-signed certificate. In a production environment, you can [configure an SSL certificate](https://docs.chef.io/install_compliance.html#configure-ssl) that's rooted by a trusted certificate authority (CA) and omit the `--insecure` flag.

As a verification step, you can run `inspec compliance profiles` to prove that you've successfully authenticated. 

```bash
# ~/learn-chef
$ inspec compliance profiles
Available profiles:
-------------------
 * base/apache
 * base/linux
 * base/mysql
 * base/postgres
 * base/ssh
 * base/windows
 * cis/cis-centos6-level1
 * cis/cis-centos6-level2
 * cis/cis-centos7-level1
 * cis/cis-centos7-level2
 * cis/cis-rhel6-level1
 * cis/cis-rhel6-level2
 * cis/cis-rhel7-level1
 * cis/cis-rhel7-level2
 * cis/cis-ubuntu12.04lts-level1
 * cis/cis-ubuntu12.04lts-level2
 * cis/cis-ubuntu14.04lts-level1
 * cis/cis-ubuntu14.04lts-level2
```

[END_BOX]

[START_BOX]

## 4. Create the ufw cookbook

To remediate the failure, you'll write a Chef cookbook named `ufw`. Recall that a cookbook provides structure to your Chef code. A cookbook contains recipes, which in turn contain resources that descibe the desired state of the system.

In this part, you create the `ufw` cookbook. Although initially empty, in the next step you apply the cookbook to a Ubuntu 14.04 instance using Test Kitchen to verify that the instance comes up and successfully runs `chef-client`.

To get started, first move to the <% fp('~/learn-chef') %> directory.

```bash
# ~
$ cd ~/learn-chef
```

Ensure that you have a directory named <% fp('~/learn-chef/cookbooks') %>.

```bash
# ~/learn-chef
$ mkdir cookbooks
```

Run the following `chef generate cookbook` command to create the `ufw` cookbook.

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/ufw
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/Users/user/learn-chef/cookbooks/ufw] action create
    - create new directory /Users/user/learn-chef/cookbooks/ufw
[...]
  * cookbook_file[/Users/user/learn-chef/cookbooks/ufw/.gitignore] action create
    - create new file /Users/user/learn-chef/cookbooks/ufw/.gitignore
    - update content in file /Users/user/learn-chef/cookbooks/ufw/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 4. Apply the ufw cookbook on a Test Kitchen instance

Now you'll verify that the empty cookbook runs successfully on an Ubuntu 14.04 test instance. Replace the contents of your copy of <% fp('~/learn-chef/cookbooks/ufw/.kitchen.yml') %> with this.

```yaml
# ~/learn-chef/cookbooks/ufw/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

verifier:
  name: inspec
  inspec_tests:
    - compliance://cis/cis-ubuntu14.04lts-level1

platforms:
  - name: ubuntu-14.04

suites:
  - name: default
    run_list:
      - recipe[ufw::default]
    attributes:
```

This configuration uses the Vagrant driver and brings up an Ubuntu 14.04 instance. The `verifier` section tells Test Kitchen to look for InSpec tests. More on that later.

Next, from your terminal, move to the <% fp('~/learn-chef/cookbooks/ufw') %> directory.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/ufw
```

Run `kitchen list`. You'll see that the instance is not yet created.

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen list
Instance             Driver   Provisioner  Verifier  Transport  Last Action
default-ubuntu-1404  Vagrant  ChefZero     Inspec    Ssh        <Not Created>
```

Now run `kitchen converge`. This command downloads the base Ubuntu 14.04 box if needed, brings up an instance, installs `chef-client`, and applies the `ufw` cookbook.

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen converge
-----> Starting Kitchen (v1.7.3)
-----> Creating <default-ubuntu-1404>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'bento/ubuntu-14.04'...
[...]
       resolving cookbooks for run list: ["ufw::default"]
       Synchronizing Cookbooks:
         - ufw (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 0 resources

       Running handlers:
       Running handlers complete
       Chef Client finished, 0/0 resources updated in 01 seconds
       Finished converging <default-ubuntu-1404> (0m22.49s).
-----> Kitchen is finished. (1m2.64s)
```

As expected, 0 resources were applied because the cookbook is empty. But it's a great first step to verifying that the instance comes up and `chef-client` runs successfully.

[END_BOX]

[START_BOX]

## 5. Replicate the failure on your Test Kitchen instance

In the previous tutorial, you saw the firewall rule fail on your node. It's a good idea to verify that the rule also fails on your Test Kitchen instance before you write remediation code.

Recall that the InSpec code for the firewall rule looks like this. This rule comes from the **cis/cis-ubuntu14.04lts-level1** profile.

![](compliance/ensure_firewall_is_active_rule.png)

Also recall that your <% fp '.kitchen.yml' %> file looks like this.

```yaml
# ~/learn-chef/cookbooks/ufw/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

verifier:
  name: inspec
  inspec_tests:
    - compliance://cis/cis-ubuntu14.04lts-level1

platforms:
  - name: ubuntu-14.04

suites:
  - name: default
    run_list:
      - recipe[ufw::default]
    attributes:
```

The `inspec_tests` part tells Test Kitchen to download and run the **cis/cis-ubuntu14.04lts-level1** profile from Chef Compliance when it runs tests. You specified your Chef Compliance server when you ran `inspec compliance login` earlier. 

You're now ready to scan your test instance. Run `kitchen verify` to run the compliance profile.

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen verify
-----> Starting Kitchen (v1.7.3)
-----> Verifying <default-ubuntu-1404>...
       Detected alternative framework tests for `serverspec`
       Use `/Users/user/learn-chef/cookbooks/ufw/test/integration/default/inspec` for testing

Bash command egrep "^[^#]" /etc/fstab | awk '{print $2}'
  stdout
    should match /^\/tmp$/ (FAILED - 1)

Bash command egrep "^[^#]" /etc/fstab | awk '($2 == "/tmp") { print $4 }'
  stdout
    should match /nodev/ (FAILED - 2)
[...]
rspec  # Bash command  cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | while read user uid dir; do if [ $uid -ge 500 -a ! -d "$dir" -a $user != "nfsnobody" -a $user != "nobody" ]; then echo "The home directory ($dir) of user $user does not exist."; fi; done stdout should not match /.+/

>>>>>> Verify failed on instance <default-ubuntu-1404>.
>>>>>> Please see .kitchen/logs/default-ubuntu-1404.log for more details
>>>>>> ------Exception-------
>>>>>> Class: Kitchen::ActionFailed
>>>>>> Message: Inspec Runner returns 1
>>>>>> ----------------------
```

When you scanned your node from the web interface, you likely noticed that many tests fail the CIS recommendations. You'll see a similar number of failures when you run the same tests against your test instance.

For now, we're only interested in seeing the **Ensure Firewall is active** rule fail. We're working to make it easier to pinpoint specific failures in the output. For now, run `kitchen verify` a second time and redirect the output to a text file, like this.
 
```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen verify > verify.txt 2>&1
```

You can locate the status of a test by searching for code from that test. The **Ensure Firewall is active** rule contains this matcher:

> should match /^Status: active$/

From a text editor, search <% fp 'verify.txt' %> for this string. Or run this command if you have access to the `grep` utility.

```bash
# ~/learn-chef/cookbooks/ufw
$ cat verify.txt | grep -A 10 '\d*).*should match /^Status: active$/'
  42) Bash command ufw status stdout should match /^Status: active$/
      Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }

        expected "Status: inactive\n" to match /^Status: active$/
        Diff:
        @@ -1,2 +1,2 @@
        -/^Status: active$/
        +Status: inactive
      # cis/cis-ubuntu14.04lts-level1/controls/translated-controls.rb:780:in `block (3 levels) in load'
      # /Users/user/.chefdk/gem/ruby/2.1.0/gems/inspec-0.21.0/lib/inspec/runner_rspec.rb:65:in `run'
      # /Users/user/.chefdk/gem/ruby/2.1.0/gems/kitchen-inspec-0.13.0/lib/kitchen/verifier/inspec.rb:50:in `call'
```

You see that "Status: active" was expected, but `ufw status` returned "Status: inactive". This result matches what you discovered when you ran `ufw status` manually on your node.

Now that you've replicated the failure on a test instance, you can write Chef code to remediate it.

[END_BOX]

[START_BOX]

## 6. Remediate the failure

In practice, you and your team would decide the appropriate way to fix the compliance failure. For example, you might define a complete set of firewall rules that enables port access to only the addresses you trust. 

For learning purposes, let's write just enough code to make the test pass. When you enable the firewall, you also need to allow SSH access.

Write your default recipe, <% fp '~/learn-chef/cookbooks/ufw/recipes/default.rb' %>, like the following.

```ruby
# ~/learn-chef/cookbooks/ufw/recipes/default.rb
execute 'Enable SSH access' do
  command 'ufw allow ssh'
  not_if 'ufw status | grep "22\s*ALLOW\s*Anywhere"'
end

execute 'Enable UFW' do
  command 'ufw --force enable'
  not_if 'ufw status | grep "^Status:\sactive"'
end
```

This code uses the [execute](https://docs.chef.io/resource_execute.html) resource to both enable SSH access and to enable the firewall. Each resource uses a `not_if` [guard](https://docs.chef.io/resource_common.html#guards) to ensure that the command is run only when needed.

[COMMENT] In practice, you might use the [firewall](https://supermarket.chef.io/cookbooks/firewall) cookbook from Chef Supermarket, which provides a more robust set of resources to manage the firewall. The [Manage a basic web application tutorial shows how](/manage-a-web-app/ubuntu/configure-the-firewall/). 

Next, from your <% fp '~/learn-chef/cookbooks/ufw' %> directory, run `kitchen converge` to apply the configuration.

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen converge
-----> Starting Kitchen (v1.7.3)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.9.41
       resolving cookbooks for run list: ["ufw::default"]
       Synchronizing Cookbooks:
         - ufw (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 2 resources
       Recipe: ufw::default
         * execute[Enable SSH access] action run
           - execute ufw allow ssh
         * execute[Enable UFW] action run
           - execute ufw --force enable

       Running handlers:
       Running handlers complete
       Chef Client finished, 2/2 resources updated in 01 seconds
       Finished converging <default-ubuntu-1404> (0m3.03s).
-----> Kitchen is finished. (0m5.05s)
```

You see from the output that `ufw` is enabled and allows SSH access.

Now run `kitchen verify` to run the compliance profile a second time.

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen verify > verify.txt 2>&1
```

Repeat the step where you search <% fp 'verify.txt' %> for the string "should match /^Status: active$/".

```bash
# ~/learn-chef/cookbooks/ufw
$ cat verify.txt | grep -A 10 '\d*).*should match /^Status: active$/'
```

Success! The output no longer contains the failure. This gives you confidence that the firewall rule would pass after this cookbook is applied to your node.

If the test were to fail, you would examine the failure, modify your cookbook to try something else, and then run `kitchen converge` to apply the change followed by `kitchen verify` to run your compliance scan.

[COMMENT] Test Kitchen instances are meant to be disposable. If you place your test instance in an unrepairable state or want to start over, run `kitchen destroy` to destroy your instance followed by `kitchen converge` to bring up a new one. The copy of your cookbook on your workstation is unaffected.

As a final verification step, you can login to your test instance and run `sudo ufw status` to confirm that `ufw` is enabled. 

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen login
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 4.2.0-35-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Tue May 10 20:33:13 2016 from 10.0.2.2
vagrant@default-ubuntu-1404:~$ sudo ufw status
Status: active

To                         Action      From
--                         ------      ----
22                         ALLOW       Anywhere
22 (v6)                    ALLOW       Anywhere (v6) 
vagrant@default-ubuntu-1404:~$ logout
Connection to 127.0.0.1 closed.
```

When you're finished, run `kitchen destroy` to tear down your test instance.

```bash
# ~/learn-chef/cookbooks/ufw
$ kitchen destroy
-----> Starting Kitchen (v1.7.3)
-----> Destroying <default-ubuntu-1404>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-ubuntu-1404> destroyed.
       Finished destroying <default-ubuntu-1404> (0m4.46s).
-----> Kitchen is finished. (0m5.97s)
```

[END_BOX]
