---
title: 'Appendix: Refactor the web application cookbook'
appendix: true
order: 5
keywords: TODO
layout: lesson
sections: []
time_to_complete: 60 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
The [Manage a basic web application](/manage-a-web-app/rhel/) tutorial walks you through the creation of a cookbook named `awesome_customers_rhel` that manages a basic web application called Customers that reads customer records from a database and displays them as a table.

![the resulting web page](misc/manage_customers_node.png)

To summarize, the web application configuration:

* uses the [httpd](https://supermarket.chef.io/cookbooks/httpd) cookbook from Chef Supermarket to configure Apache web server.
* creates a user named `web_admin` that is given file ownership of the web content.
* uses the [firewall](https://supermarket.chef.io/cookbooks/firewall) cookbook to ensure that the firewall is open on ports 22 (SSH) and 80 (HTTP).
* uses the [mysql](https://supermarket.chef.io/cookbooks/mysql) and [database](https://supermarket.chef.io/cookbooks/database) cookbooks to configure a MySQL database server and a database instance that holds ficticious customer records.
* uses PHP scripting to connect to the database from the web server.

If you examine the cookbook's source code, you'll notice that much of the information is repeated. For example, here's an excerpt from the cookbook's `database` recipe:

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
# Create the database instance.
mysql_database node['awesome_customers_rhel']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_rhel']['database']['host'],
    :username => node['awesome_customers_rhel']['database']['root_username'],
    :password => node['awesome_customers_rhel']['database']['root_password']
  )
  action :create
end

# Add a database user.
mysql_database_user node['awesome_customers_rhel']['database']['admin_username'] do
  connection(
    :host => node['awesome_customers_rhel']['database']['host'],
    :username => node['awesome_customers_rhel']['database']['root_username'],
    :password => node['awesome_customers_rhel']['database']['root_password']
  )
  password node['awesome_customers_rhel']['database']['admin_password']
  database_name node['awesome_customers_rhel']['database']['dbname']
  host node['awesome_customers_rhel']['database']['host']
  action [:create, :grant]
end
```

Here, you see that the same node attributes are repeated. Other information, such as how to connect to the database, is also repeated.

It's common to refactor such code to make it easier to read and maintain. However, with refactoring comes risk. During the refactoring process, you might accidently change the cookbook's behavior. You would need to verify that each change preserves the functionality you expect. As your project expands, manual testing can become tedious and error-prone.

Here you'll apply what you learned by writing a few tests to validate the existing configuration before refactoring the database recipe. As you refactor your recipe, you can rerun your tests to verify the changes are good.

Here's what you'll do:

1. [Define what you'll refactor](#step1)
1. [Make the default ChefSpec test pass](#step2)
1. [Create pending tests for resources that uses node attributes](#step3)
1. [Write the pending tests](#step4)
1. [Refactor the database configuration](#step5)

Although a complete solution might involve writing InSpec and ChefSpec tests, along with running Rubocop and Foodcritic, let's focus just on writing ChefSpec tests for now. This scenario is a good candidate for ChefSpec testing because the database configuration uses node attributes to define its behavior. 

[COMMENT] If you haven't worked through the _Manage a basic web application_ tutorial, [follow the quickstart](/manage-a-web-app/rhel/bring-up-the-web-app-using-test-kitchen/) to get a copy of the cookbook from GitHub and run it on a local Test Kitchen instance.

[START_BOX]

## 1. Define what you'll refactor

The goal is to make the `database` recipe easier to read. To do that, you'll:

* Replace each occurence of a node attribute with a variable. 
* Define the database connection information one time.

By outlining clear goals, we'll know when we're done.

[END_BOX]

[START_BOX]

## 2. Make the default ChefSpec test pass

When you run `chef generate` to create a cookbook or recipe, Chef creates a default ChefSpec file for you. Here's what the file looks like for the `database` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
require 'spec_helper'

describe 'awesome_customers_rhel::database' do
  context 'When all attributes are default, on an unspecified platform' do
    let(:chef_run) do
      runner = ChefSpec::ServerRunner.new
      runner.converge(described_recipe)
    end

    it 'converges successfully' do
      expect { chef_run }.to_not raise_error
    end
  end
end
```

Let's see what happens when we run the default ChefSpec tests.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
[...]
F

Failures:

  1) awesome_customers_rhel::database When all attributes are default, on an unspecified platform converges successfully
     Failure/Error: expect { chef_run }.to_not raise_error

       expected no Exception, got #<ChefSpec::Error::CommandNotStubbed: Executing a real command is disabled. Unregistered command:

           command("mysql -h 127.0.0.1 -u db_admin -pkWifydPx2hIR8mmJv4uemw== -D my_company -e 'describe customers;'")

       You can stub this command with:

           stub_command("mysql -h 127.0.0.1 -u db_admin -pkWifydPx2hIR8mmJv4uemw== -D my_company -e 'describe customers;'").and_return(...)
       > with backtrace:
         # /Users/thomaspetchel/.chefdk/gem/ruby/2.1.0/gems/chefspec-4.6.1/lib/chefspec/extensions/chef/conditional.rb:9:in `evaluate_command'
         # /Users/thomaspetchel/.chefdk/gem/ruby/2.1.0/gems/chefspec-4.6.1/lib/chefspec/extensions/chef/resource.rb:19:in `run_action'
         # /Users/thomaspetchel/.chefdk/gem/ruby/2.1.0/gems/chefspec-4.6.1/lib/chefspec/solo_runner.rb:126:in `converge'
         # /Users/thomaspetchel/.chefdk/gem/ruby/2.1.0/gems/chefspec-4.6.1/lib/chefspec/server_runner.rb:68:in `converge'
         # ./spec/unit/recipes/database_spec.rb:13:in `block (3 levels) in <top (required)>'
         # ./spec/unit/recipes/database_spec.rb:17:in `block (4 levels) in <top (required)>'
         # /Users/thomaspetchel/.chefdk/gem/ruby/2.1.0/gems/chefspec-4.6.1/lib/chefspec/expect_exception.rb:15:in `matches?'
         # ./spec/unit/recipes/database_spec.rb:17:in `block (3 levels) in <top (required)>'
     # ./spec/unit/recipes/database_spec.rb:17:in `block (3 levels) in <top (required)>'

Finished in 6.63 seconds (files took 3.2 seconds to load)
1 example, 1 failure

Failed examples:

rspec ./spec/unit/recipes/database_spec.rb:16 # awesome_customers_rhel::database When all attributes are default, on an unspecified platform converges successfully
```

In the output, you'll likely see a number of warnings prior to the test output. These warnings come from the `httpd` cookbook, and can be safely ignored.

The default test fails &ndash; you see an error like this.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
expected no Exception, got #<ChefSpec::Error::CommandNotStubbed: Executing a real command is disabled. Unregistered command:

    command("mysql -h 127.0.0.1 -u db_admin -pkWifydPx2hIR8mmJv4uemw== -D my_company -e 'describe customers;'")

You can stub this command with:

    stub_command("mysql -h 127.0.0.1 -u db_admin -pkWifydPx2hIR8mmJv4uemw== -D my_company -e 'describe customers;'").and_return(...)
```

The command the test fails on appears at the bottom of the `database` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
# Seed the database with a table and test data.
execute "initialize #{node['awesome_customers_rhel']['database']['dbname']} database" do
  command "mysql -h #{node['awesome_customers_rhel']['database']['host']} -u #{node['awesome_customers_rhel']['database']['admin_username']} -p#{node['awesome_customers_rhel']['database']['admin_password']} -D #{node['awesome_customers_rhel']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['awesome_customers_rhel']['database']['host']} -u #{node['awesome_customers_rhel']['database']['admin_username']} -p#{node['awesome_customers_rhel']['database']['admin_password']} -D #{node['awesome_customers_rhel']['database']['dbname']} -e 'describe customers;'"
end
```

Any resource that includes a `not_if` or `only_if` guard must provide a [command stub](https://github.com/sethvargo/chefspec#stubbing) in the corresponding ChefSpec test. A command stub tells ChefSpec what result to expect.

A command stub is required because a guard causes a resource to run conditionally. Beacuse ChefSpec doesn't actually run the code, it needs a way to determine whether the resource is run.

If you were to run the ChefSpec test a second time, you would see a different database password in the output.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
expected no Exception, got #<ChefSpec::Error::CommandNotStubbed: Executing a real command is disabled. Unregistered command:

    command("mysql -h 127.0.0.1 -u db_admin -pogWtBYnEGfQU+oOD19MSsw== -D my_company -e 'describe customers;'")

You can stub this command with:

    stub_command("mysql -h 127.0.0.1 -u db_admin -pogWtBYnEGfQU+oOD19MSsw== -D my_company -e 'describe customers;'").and_return(...)
```

That's because the ChefSpec test uses `ChefSpec::ServerRunner`, which simulates a Chef server in memory. Node attributes are not preserved between ChefSpec runs; therefore, a [new database password](/manage-a-web-app/rhel/create-the-database-passwords#step1) is regenerated each time the test is run.

Recall that ChefSpec [loads data from fauxhai](/test-your-infrastructure-code/rhel/verify-resources-properly-defined#step2) to set the built-in node attributes. To make it easier to stub the `mysql` command, you can specify additional node attributes when the tests are set up. Let's do that now, as well as stub the `mysql` command.

Make your copy of <% fp 'database_spec.rb' %> look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
require 'spec_helper'

describe 'awesome_customers_rhel::database' do
  context 'When all attributes are set, on CentOS 7.2.1511' do
    before do
      stub_command("mysql -h fake_host -u fake_admin -pfake_admin_password -D fake_database -e 'describe customers;'").and_return(false)
    end

    let(:chef_run) do
      ChefSpec::ServerRunner.new(platform: 'centos', version: '7.2.1511') do |node|
        node.set['awesome_customers_rhel']['database']['root_password'] = 'fake_root_password'
        node.set['awesome_customers_rhel']['database']['admin_password'] = 'fake_admin_password'
        node.set['awesome_customers_rhel']['database']['dbname'] = 'fake_database'
        node.set['awesome_customers_rhel']['database']['host'] = 'fake_host'
        node.set['awesome_customers_rhel']['database']['root_username'] = 'fake_root'
        node.set['awesome_customers_rhel']['database']['admin_username'] = 'fake_admin'
      end.converge(described_recipe)
    end

    it 'converges successfully' do
      expect { chef_run }.to_not raise_error
    end
  end
end
```

This code also specifies the platform name and version.

Because the code isn't actually run, node attributes values can be whatever you want as long as the format matches what's expected (for example, a node attribute that defines a port number might expect a numeric value.) What does matter is that the values are used correctly in your recipe. Here, each node attribute is a string. Each node attribute value includes the string "fake" to indicate that these are fictitious values. 

Notice that the command stub uses the node attribute values. It's stubbed to return `false` to tell ChefSpec that the `execute` resource should be run. 

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
before do
  stub_command("mysql -h fake_host -u fake_admin -pfake_admin_password -D fake_database -e 'describe customers;'").and_return(false)
end
``` 

Now run ChefSpec.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
[...]
.

Finished in 6.76 seconds (files took 3.11 seconds to load)
1 example, 0 failures
```

The initial test now passes.

[END_BOX]

[START_BOX]

## 3. Create pending tests for resources that uses node attributes 

Because our main goal is to refactor the `database` recipe to not repeat node attributes, let's write a test that verifies each resource that uses them.

Recall that <% fp 'database.rb' %> looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_rhel']['database']['root_password']
  action [:create, :start]
end

# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end

# Create the database instance.
mysql_database node['awesome_customers_rhel']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_rhel']['database']['host'],
    :username => node['awesome_customers_rhel']['database']['root_username'],
    :password => node['awesome_customers_rhel']['database']['root_password']
  )
  action :create
end

# Add a database user.
mysql_database_user node['awesome_customers_rhel']['database']['admin_username'] do
  connection(
    :host => node['awesome_customers_rhel']['database']['host'],
    :username => node['awesome_customers_rhel']['database']['root_username'],
    :password => node['awesome_customers_rhel']['database']['root_password']
  )
  password node['awesome_customers_rhel']['database']['admin_password']
  database_name node['awesome_customers_rhel']['database']['dbname']
  host node['awesome_customers_rhel']['database']['host']
  action [:create, :grant]
end

# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')

# Write the SQL script to the filesystem.
cookbook_file create_tables_script_path do
  source 'create-tables.sql'
  owner 'root'
  group 'root'
  mode '0600'
end

# Seed the database with a table and test data.
execute "initialize #{node['awesome_customers_rhel']['database']['dbname']} database" do
  command "mysql -h #{node['awesome_customers_rhel']['database']['host']} -u #{node['awesome_customers_rhel']['database']['admin_username']} -p#{node['awesome_customers_rhel']['database']['admin_password']} -D #{node['awesome_customers_rhel']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['awesome_customers_rhel']['database']['host']} -u #{node['awesome_customers_rhel']['database']['admin_username']} -p#{node['awesome_customers_rhel']['database']['admin_password']} -D #{node['awesome_customers_rhel']['database']['dbname']} -e 'describe customers;'"
end
```

These resources each include one or more node attributes:

| Resource              | Line |
|-----------------------|------|
| `mysql_service`       | 7    |
| `mysql_database`      | 18   |
| `mysql_database_user` | 28   |
| `execute`             | 52   |

Another way to think about these resources is by what they accomplish and what tests you might want to write:

| Resource              | Line | Test                                               |
|-----------------------|------|----------------------------------------------------|
| `mysql_service`       | 7    | it 'sets the MySQL service root password'          |
| `mysql_database`      | 18   | it 'creates the database instance'                 |
| `mysql_database_user` | 28   | it 'creates the database user'                     |
| `execute`             | 52   | it 'seeds the database with a table and test data' |

This gives you a checklist to work from.

<% unstyled_list do %>
  <% icon_list_item('square-o') do %> 
    it 'sets the MySQL service root password'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'creates the database instance'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'creates the database user'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'seeds the database with a table and test data'
  <% end %>
<% end %>

You can define the tests you want to write up-front and then implement them one at a time. One way to do that is to use [pending examples](https://relishapp.com/rspec/rspec-core/v/3-4/docs/pending-and-skipped-examples/pending-examples#`pending`-for-an-example-that-is-currently-passing). Pending examples have several uses; here you'll use them to indicate tests you wan tto write later.

Modify <% fp 'database_spec.rb' %> like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
require 'spec_helper'

describe 'awesome_customers_rhel::database' do
  context 'When all attributes are set, on CentOS 7.2.1511' do
    before do
      stub_command("mysql -h fake_host -u fake_admin -pfake_admin_password -D fake_database -e 'describe customers;'").and_return(false)
    end

    let(:chef_run) do
      ChefSpec::ServerRunner.new(platform: 'centos', version: '7.2.1511') do |node|
        node.set['awesome_customers_rhel']['database']['root_password'] = 'fake_root_password'
        node.set['awesome_customers_rhel']['database']['admin_password'] = 'fake_admin_password'
        node.set['awesome_customers_rhel']['database']['dbname'] = 'fake_database'
        node.set['awesome_customers_rhel']['database']['host'] = 'fake_host'
        node.set['awesome_customers_rhel']['database']['root_username'] = 'fake_root'
        node.set['awesome_customers_rhel']['database']['admin_username'] = 'fake_admin'
      end.converge(described_recipe)
    end

    it 'converges successfully' do
      expect { chef_run }.to_not raise_error
    end

    it 'sets the MySQL service root password'  do
      pending
    end

    it 'creates the database instance' do
      pending
    end

    it 'creates the database user' do
      pending
    end

    it 'seeds the database with a table and test data' do
      pending
    end
  end
end
```

Now run the tests. 

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
.FFFF

Failures:

  1) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 sets the MySQL service root password FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:30

  2) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database instance FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:34

  3) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database user FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:38

  4) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 seeds the database with a table and test data FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:42

Finished in 6.77 seconds (files took 2.95 seconds to load)
5 examples, 4 failures

Failed examples:

rspec ./spec/unit/recipes/database_spec.rb:30 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 sets the MySQL service root password
rspec ./spec/unit/recipes/database_spec.rb:34 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database instance
rspec ./spec/unit/recipes/database_spec.rb:38 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database user
rspec ./spec/unit/recipes/database_spec.rb:42 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 seeds the database with a table and test data
```

Each pending test is marked as a failure. But with failing tests in place, you now have clear goals to work towards.

[END_BOX]

[START_BOX]

## 4. Write the pending tests

Here are the pending tests you need to implement.

<% unstyled_list do %>
  <% icon_list_item('square-o') do %> 
    it 'sets the MySQL service root password'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'creates the database instance'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'creates the database user'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'seeds the database with a table and test data'
  <% end %>
<% end %>

You'll write each test and verify that it passes.

### it 'sets the MySQL service root password'

Replace the first pending test:

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
it 'sets the MySQL service root password' do
  pending
end
```

with this test:

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
it 'sets the MySQL service root password' do
  expect(chef_run).to create_mysql_service('default')
    .with(initial_root_password: 'fake_root_password')
end
```

The `with` method validates the resource's properties. In this example, we're validating this resource:

```ruby
# database.rb
# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_rhel']['database']['root_password']
  action [:create, :start]
end
```

We don't need to verify the `action` property because that property does not involve a node attribute, so it does not meet our current test concerns. Also, the [create\_mysql_service matcher](https://github.com/chef-cookbooks/mysql/blob/master/libraries/matchers.rb#L25) already validates the `:create` action. If you wanted to validate the `:start` action, you would use the [start\_mysql_service matcher](https://github.com/chef-cookbooks/mysql/blob/master/libraries/matchers.rb#L33). 

Run the tests.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
[...]
.FFF

Failures:

  1) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database instance FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:35

  2) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database user FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:39

  3) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 seeds the database with a table and test data FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:43

Finished in 9.99 seconds (files took 2.89 seconds to load)
5 examples, 3 failures

Failed examples:

rspec ./spec/unit/recipes/database_spec.rb:35 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database instance
rspec ./spec/unit/recipes/database_spec.rb:39 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 creates the database user
rspec ./spec/unit/recipes/database_spec.rb:43 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 seeds the database with a table and test data
```

The first pending test now passes, leaving us with 3 remaining tests to write.

<% unstyled_list do %>
  <% icon_list_item('check-square-o') do %> 
    it 'sets the MySQL service root password'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'creates the database instance'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'creates the database user'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'seeds the database with a table and test data'
  <% end %>
<% end %>

### it 'creates the database instance' and it 'creates the database user'

The next two resources to test look like this.

```ruby
# database.rb
# Create the database instance.
mysql_database node['awesome_customers_rhel']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_rhel']['database']['host'],
    :username => node['awesome_customers_rhel']['database']['root_username'],
    :password => node['awesome_customers_rhel']['database']['root_password']
  )
  action :create
end

# Add a database user.
mysql_database_user node['awesome_customers_rhel']['database']['admin_username'] do
  connection(
    :host => node['awesome_customers_rhel']['database']['host'],
    :username => node['awesome_customers_rhel']['database']['root_username'],
    :password => node['awesome_customers_rhel']['database']['root_password']
  )
  password node['awesome_customers_rhel']['database']['admin_password']
  database_name node['awesome_customers_rhel']['database']['dbname']
  host node['awesome_customers_rhel']['database']['host']
  action [:create, :grant]
end
```

Both resources share the same `connection` property. To make the test code less redundant, you can define a `let` block at the top of your test that defines the connection info.

To define the connection info and implement the second and third test, make <% fp 'database_spec.rb' %> look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
require 'spec_helper'

describe 'awesome_customers_rhel::database' do
  context 'When all attributes are set, on CentOS 7.2.1511' do
    before do
      stub_command("mysql -h fake_host -u fake_admin -pfake_admin_password -D fake_database -e 'describe customers;'").and_return(false)
    end

    let(:connection_info) do
      { host: 'fake_host', username: 'fake_root', password: 'fake_root_password' }
    end

    let(:chef_run) do
      ChefSpec::ServerRunner.new(platform: 'centos', version: '7.2.1511') do |node|
        node.set['awesome_customers_rhel']['database']['root_password'] = 'fake_root_password'
        node.set['awesome_customers_rhel']['database']['admin_password'] = 'fake_admin_password'
        node.set['awesome_customers_rhel']['database']['dbname'] = 'fake_database'
        node.set['awesome_customers_rhel']['database']['host'] = 'fake_host'
        node.set['awesome_customers_rhel']['database']['root_username'] = 'fake_root'
        node.set['awesome_customers_rhel']['database']['admin_username'] = 'fake_admin'
      end.converge(described_recipe)
    end

    it 'converges successfully' do
      expect { chef_run }.to_not raise_error
    end

    it 'sets the MySQL service root password' do
      expect(chef_run).to create_mysql_service('default')
        .with(initial_root_password: 'fake_root_password')
    end

    it 'creates the database instance' do
      expect(chef_run).to create_mysql_database('fake_database')
        .with(connection: connection_info)
    end

    it 'creates the database user' do
      expect(chef_run).to create_mysql_database_user('fake_admin')
        .with(connection: connection_info, password: 'fake_admin_password', database_name: 'fake_database', host: 'fake_host')
    end

    it 'seeds the database with a table and test data' do
      pending
    end
  end
end
```

Like the first pending test, the second and third tests use the `with` method to validate resource properties.

Now run the tests.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
[...]
.F

Failures:

  1) awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 seeds the database with a table and test data FIXED
     Expected pending 'No reason given' to fail. No Error was raised.
     # ./spec/unit/recipes/database_spec.rb:49

Finished in 17.09 seconds (files took 2.75 seconds to load)
5 examples, 1 failure

Failed examples:

rspec ./spec/unit/recipes/database_spec.rb:49 # awesome_customers_rhel::database When all attributes are set, on CentOS 7.2.1511 seeds the database with a table and test data
```

The second and third pending tests now pass. One final pending test remains.

<% unstyled_list do %>
  <% icon_list_item('check-square-o') do %> 
    it 'sets the MySQL service root password'
  <% end %>
  <% icon_list_item('check-square-o') do %>
    it 'creates the database instance'
  <% end %>
  <% icon_list_item('check-square-o') do %>
    it 'creates the database user'
  <% end %>
  <% icon_list_item('square-o') do %>
    it 'seeds the database with a table and test data'
  <% end %>
<% end %>

### it 'seeds the database with a table and test data'

The final pending test verifies this `execute` resource:

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
# Seed the database with a table and test data.
execute "initialize #{node['awesome_customers_rhel']['database']['dbname']} database" do
  command "mysql -h #{node['awesome_customers_rhel']['database']['host']} -u #{node['awesome_customers_rhel']['database']['admin_username']} -p#{node['awesome_customers_rhel']['database']['admin_password']} -D #{node['awesome_customers_rhel']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['awesome_customers_rhel']['database']['host']} -u #{node['awesome_customers_rhel']['database']['admin_username']} -p#{node['awesome_customers_rhel']['database']['admin_password']} -D #{node['awesome_customers_rhel']['database']['dbname']} -e 'describe customers;'"
end
```

The value of `#{create_tables_script_path}` comes from here:

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')
```

`Chef::Config[:file_cache_path]` reads the location of the Chef cache from the [chef-client configuration file](https://docs.chef.io/config_rb_client.html). Although the location of the Chef cache can vary, it's typically located at <code class="file-path">/var/chef/cache</code> on Linux.

ChefSpec sets `Chef::Config[:file_cache_path]` by [creating a temporary directory](https://github.com/sethvargo/chefspec/blob/master/lib/chefspec/file_cache_path_proxy.rb). To access the value of `create_tables_script_path`, you'll add a `let` block to your test file. 

Modify <% fp 'database_spec.rb' %> to include a `let` block that defines `create_tables_script_path` and to implement the final pending test. The entire file looks like this.  

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
require 'spec_helper'

describe 'awesome_customers_rhel::database' do
  context 'When all attributes are set, on CentOS 7.2.1511' do
    before do
      stub_command("mysql -h fake_host -u fake_admin -pfake_admin_password -D fake_database -e 'describe customers;'").and_return(false)
    end

    let(:connection_info) do
      { host: 'fake_host', username: 'fake_root', password: 'fake_root_password' }
    end

    let(:create_tables_script_path) { File.join(Chef::Config[:file_cache_path], 'create-tables.sql') }

    let(:chef_run) do
      ChefSpec::ServerRunner.new(platform: 'centos', version: '7.2.1511') do |node|
        node.set['awesome_customers_rhel']['database']['root_password'] = 'fake_root_password'
        node.set['awesome_customers_rhel']['database']['admin_password'] = 'fake_admin_password'
        node.set['awesome_customers_rhel']['database']['dbname'] = 'fake_database'
        node.set['awesome_customers_rhel']['database']['host'] = 'fake_host'
        node.set['awesome_customers_rhel']['database']['root_username'] = 'fake_root'
        node.set['awesome_customers_rhel']['database']['admin_username'] = 'fake_admin'
      end.converge(described_recipe)
    end

    it 'converges successfully' do
      expect { chef_run }.to_not raise_error
    end

    it 'sets the MySQL service root password' do
      expect(chef_run).to create_mysql_service('default')
        .with(initial_root_password: 'fake_root_password')
    end

    it 'creates the database instance' do
      expect(chef_run).to create_mysql_database('fake_database')
        .with(connection: connection_info)
    end

    it 'creates the database user' do
      expect(chef_run).to create_mysql_database_user('fake_admin')
        .with(connection: connection_info, password: 'fake_admin_password', database_name: 'fake_database', host: 'fake_host')
    end

    it 'seeds the database with a table and test data' do
      expect(chef_run).to run_execute('initialize fake_database database')
        .with(command: "mysql -h fake_host -u fake_admin -pfake_admin_password -D fake_database < #{create_tables_script_path}")
    end
  end
end
```

Now run the tests.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
[...]
.

Finished in 21.18 seconds (files took 1.94 seconds to load)
5 examples, 0 failures
```

Success! All tests now pass.

<% unstyled_list do %>
  <% icon_list_item('check-square-o') do %> 
    it 'sets the MySQL service root password'
  <% end %>
  <% icon_list_item('check-square-o') do %>
    it 'creates the database instance'
  <% end %>
  <% icon_list_item('check-square-o') do %>
    it 'creates the database user'
  <% end %>
  <% icon_list_item('check-square-o') do %>
    it 'seeds the database with a table and test data'
  <% end %>
<% end %>

Now that you have working tests in place, you can now refactor your `database` recipe. Having the tests continue to pass after you refactor your recipe will give you increased confidence in your work.

[END_BOX]

[START_BOX]

## 5. Refactor the database configuration

Earlier, we outlined these goals:

* Replace each occurence of a node attribute with a variable.
* Define the database connection information one time.

One benefit to writing tests is that it can help show what can be refactored. For instance:

* You know which node attributes are involved because you set them at the start of the test run.
* You know where the database connection info is specified because you defined the `connection_info` variable and used it to verify the `mysql_database` and `mysql_database_user` resources. 

Rewrite your `database` recipe like this. This revison replaces each node attribute with a variable and defines the connection information as a variable that can be reused.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
# Copy commonly-used node attribute values into variables.
h = node['awesome_customers_rhel']['database']
root_password = h['root_password']
admin_password = h['admin_password']
dbname = h['dbname']
host = h['host']
root_username = h['root_username']
admin_username = h['admin_username']
connection_info = { host: host, username: root_username, password: root_password }

# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password root_password
  action [:create, :start]
end

# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end

# Create the database instance.
mysql_database dbname do
  connection connection_info
  action :create
end

# Add a database user.
mysql_database_user admin_username do
  connection connection_info
  password admin_password
  database_name dbname
  host host
  action [:create, :grant]
end

# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')

# Write schema seed file to filesystem.
cookbook_file create_tables_script_path do
  source 'create-tables.sql'
  owner 'root'
  group 'root'
  mode '0600'
end

# Seed the database with a table and test data.
execute "initialize #{dbname} database" do
  command "mysql -h #{host} -u #{admin_username} -p#{admin_password} -D #{dbname} < #{create_tables_script_path}"
  not_if  "mysql -h #{host} -u #{admin_username} -p#{admin_password} -D #{dbname} -e 'describe customers;'"
end
```

Now rerun your ChefSpec tests to ensure that your resources are still correctly defined against your refacoring work.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ chef exec rspec --color spec/unit/recipes/database_spec.rb
[...]
.

Finished in 16.94 seconds (files took 2.86 seconds to load)
5 examples, 0 failures
```

Great! All tests continue to pass. If any test failed, you would examine the error and correct your refactored `database` recipe.

If your project had integration tests, such as InSpec tests, you might run `kitchen test` to verify the configuration on a Test Kitchen instance before checking in your change or uploading your cookbook to your Chef server.

Although it's completely acceptable to write test code after you've written your cookbook, in practice you might take the test-driven approach of writing your tests first. Writing your tests first gives you clear goals to work towards. Clearly understanding your requiements  up front may even lead to better quality code, eliminating the need to refactor it later.

[END_BOX]