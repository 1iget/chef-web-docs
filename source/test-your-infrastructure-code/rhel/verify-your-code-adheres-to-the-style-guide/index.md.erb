---
title: 'Verify your code adheres to the style guide'
order: 4
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
---
TODO: Each example in a file.

[HEADLINE] Lint testing can help you identify potential defects in your code early and also makes  your code easier to read and maintain.

So far, you've learned how to use automated testing to speed up the feedback cycle. Getting feedback early and often can help you release more quickly and with higher-quality.

Although your code may behave as you expect, it's also important to ensure your code is easy to read and maintain, and avoid hidden defects that can be difficult to fix later. Lint testing, or _linting_, is one way to help ensure that your code aheres to standard style guidelines and avoids common defects.

Lint testing is a form of [static program analysis](https://en.wikipedia.org/wiki/Static_program_analysis), also called static code analytis. Static code analysis involves the automated inspection of a program's source code for potential defects without actually running the program.

Lint testing can identify a range of issues, from code that's correct but difficult to read (such as code that uses non-uniform indentation) all the way to code that will almost always fail (such as dividing a number by zero.)

In this lesson, you'll use two popular tools that are part of the Chef DK &ndash; RuboCop and Foodcritic &ndash; to identify potential issues in variations of the `webserver` cookbook you created in the previous lessons. You'll also learn how to disable certain rules and create new rules that adhere to your team's own style guidelines.

## Use RuboCop to make your code easier to read and maintain

Let's see how [RuboCop](http://batsov.com/rubocop/), a Ruby static code analyzer that's based on the community [Ruby style guide](https://github.com/bbatsov/ruby-style-guide#the-ruby-style-guide), can help identify inconsistent code formatting in a basic recipe.

Start by modifying your `webserver` cookbook's default recipe like this. Be sure to copy the code exactly as it appears.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package 'httpd'

service 'httpd' do
    action [:enable,
       :start]
end

file '/var/www/html/index.html' do
    content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
  end
```

Note how the code is formatted.

* It uses four spaces for indentation.
* The `action` attribute is broken into multiple lines.
* The `file` resource uses two spaces to indent the `end` keyword.

When you run the `rubocop` command with no arguments, RuboCop checks all Ruby source files in the current directory.

Run `rubocop` from your <code class="file-path">recipes</code> directory.

```bash
# ~/webserver/recipes
$ rubocop
Inspecting 1 file
W

Offenses:

default.rb:9:1: C: Use 2 (not 4) spaces for indentation.
    action [:enable,
^^^^
default.rb:10:8: C: Align the elements of an array literal if they span more than one line.
       :start]
       ^^^^^^
default.rb:19:3: W: end at 19, 2 is not aligned with file '/var/www/html/index.html' do at 13, 0.
  end
  ^^^

1 file inspected, 3 offenses detected
```

For each file, RuboCop prints to the console a character that indicates the status of that file.

TODO: Finish these.

* `.` indicates that RuboCop found no potential issues.
* `R` (Refactor) indicates that XXX.
* `C` (Convention) indicates that RuboCop code that potentially violates standard convention, for example, inconsistent use of indentation.
* `W` (Warning) indicates that RuboCop found code that's valid, but potentially isn't what the programmer intended, such as comparing a variable to itself or defining [unreachable code](https://en.wikipedia.org/wiki/Unreachable_code).
* `E` (Error) indicates that RuboCop found a potential error, such as using an invalid character in a variable name.
* `F` (Fatal) indicates that RuboCop found a potentially fatal, or unrecoverable, error.

When RuboCop finds multiple potential issues, it reports the most severe as the file's status. In this example, RuboCop found both a convention violation and a warning, so our recipe's overall status is `W` (Warning).

### Fix the violations

Let's fix the reported violations. To summarize:

* Line 9 uses 4 spaces for indentation.
* Line 10 does not properly align the array elements.
* Line 19 indents the `end` keyword.

Modify <code class="file-path">default.rb</code> like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package 'httpd'

service 'httpd' do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
    content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Run `rubocop` a second time to verify whether the violations are fixed.

```bash
# ~/webserver/recipes
$ rubocop
Inspecting 1 file
C

Offenses:

default.rb:13:1: C: Use 2 (not 4) spaces for indentation.
    content '<html>
^^^^

1 file inspected, 1 offense detected
```

This time a new violation is discovered. This violation was not reported originally because the use of indentation was consistent with the indented `end` keyword.

Correct the indentation, making your default recipe look like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package 'httpd'

service 'httpd' do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Run `rubocop` to verify the correction.

```bash
# ~/webserver/recipes
$ rubocop
Inspecting 1 file
.

1 file inspected, no offenses detected
```

Congratulations. RuboCop reported no additional violations.

## Configure RuboCop to follow your preferred style

A RuboCop rule is also called a _cop_. You can modify the behavior of RuboCop's predefined cops or disable one or more cops altogether.

One reason you may want to customize RuboCop's predefined behavior is when your team or organization defines style guidelines that differ from the community standard.

Another reason might be when you have many RuboCop violations in your existing code, and you want to resolve them gradually.

For example, say your existing code uses 4 spaces for indentation and you want to temporarily configure RuboCop accept this indentation so that you can focus on potentially more severe issues.

Start by modifying your default recipe to look like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package 'httpd'

service 'httpd' do
    action [:enable, :start]
end

file '/var/www/html/index.html' do
    content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Run `rubocop` to observe the violations.

```bash
# ~/webserver/recipes
$ rubocop
Inspecting 1 file
C

Offenses:

default.rb:9:1: C: Use 2 (not 4) spaces for indentation.
    action [:enable, :start]
^^^^
default.rb:13:1: C: Use 2 (not 4) spaces for indentation.
    content '<html>
^^^^

1 file inspected, 2 offenses detected
```

You customize RuboCop's behavior through a file named <code class="file-path">.rubocop.yml</code>. When RuboCop runs, it loads all predefined rules and then overrides any rules that you specify.

Add the following code to <code class="file-path">.rubocop.yml</code> in your cookbook directory, <code class="file-path">~/webserver</code>.

```ruby
# ~/webserver/.rubocop.yml
Style/IndentationWidth:
  # Number of spaces for each indentation level.
  Width: 4
```

RuboCop searches for a <code class="file-path">.rubocop.yml</code> by traversing up the directory tree. So in practice you could add your <code class="file-path">.rubocop.yml</code> file to a directory that's higher in the tree if you want your modified rules to apply to mulitple projects.

[TIP] You can use RuboCop's [default rules](https://github.com/bbatsov/rubocop/blob/master/config/default.yml) as a guide. Just copy the rules that you want to modify or disable to your <code class="file-path">.rubocop.yml</code> file and modify its parameters. To disable a rule, add `Enabled: false` to the rule.

Now run `rubocop` from your <code class="file-path">~/webserver/recipes</code> directory to verify that your custom behavior is used.

```bash
# ~/webserver/recipes
$ rubocop
Inspecting 1 file
.

1 file inspected, no offenses detected
```

[TIP] If your code produces a large number of violations, you can run RuboCop to  [automatically generate a configuration file](https://github.com/bbatsov/rubocop#automatically-generated-configuration) that excludes the violations from a `rubocop` run. As you work through the violations, you can remove each entry from the generated configuration file.<br/>You can also [disable cops directly in your source code](https://github.com/bbatsov/rubocop#disabling-cops-within-source-code) if you have a special case that you want RuboCop to ignore.

## Use Foodcritic to identify better usage patterns

[Foodcritic](https://acrmp.github.io/foodcritic/) is another popular linting tool that comes with the Chef DK.

RuboCop can be run on any Ruby program, and isn't specific to Chef. Foodcritic identifies usage patterns that are specific to Chef code. Many Chef users run both tools as part of their lint testing.

In this part you'll see how Foodcritic can identify usage patterns that improve the quality of your code. You'll also extend Foodcritic by writing a custom rule.

### Identify use of unnecessary string interpolation

In previous tutorials, you used _string interpolation_ to replace placeholders within a string with the values they represent. Here's an example from the `awesome_customers` cookbook's `webserver` recipe.

```ruby
# webserver.rb
# Write the home page.
file "#{node['awesome_customers']['document_root']}/index.php" do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner node['awesome_customers']['user']
  group node['awesome_customers']['group']
end
```

In this example, the `file` resource uses string interpolation to combine the document root, stored as a node attribute, with the name of the index file to create a full path to the home page.

It's common to use string interpolation when it's not necessary. Let's start by looking at the default recipe for the `webserver` cookbook you wrote to run on CentOS and Ubuntu. Recall that it looks like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package_name = service_name = case node['platform']
when 'centos' then 'httpd'
when 'ubuntu' then 'apache2'
end

package package_name

service service_name do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

To demonstrate the use of unnecessary string interpolation, modify your default recipe to look like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package_name = service_name = case node['platform']
when 'centos' then 'httpd'
when 'ubuntu' then 'apache2'
end

package "#{package_name}"

service "#{service_name}" do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Although this program is valid and behaves as you would expect, it's intention might not be clear to others. It can appear that the code intends to use string interpolation but the string is missing additional information.

From your <code class="file-path">~/webserver/recipes</code> directory, run `foodcritic default.rb` to run the Foodcritic rules against the default recipe.

```bash
# ~/webserver/recipes
$ foodcritic default.rb
FC002: Avoid string interpolation where not required: default.rb:11
FC002: Avoid string interpolation where not required: default.rb:13
```

[COMMENT] To test all recipes, you can run Foodcritic from a directory above your cookbook and specify the cookbook name. For example, you can run `foodcritic webserver` from your <code class="file-path">~</code> directory.

Foodcritic reports [FC002](http://acrmp.github.io/foodcritic/#FC002): "Avoid string interpolation where not required".

Now remove the string interpolation to fix the violation. Your recipe should look like the one you created in the previous lesson.

```ruby
# ~/webserver/recipes/default.rb
package_name = service_name = case node['platform']
when 'centos' then 'httpd'
when 'ubuntu' then 'apache2'
end

package package_name

service service_name do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Run `foodcritic default.rb` a second time to verify that the violation is fixed.

```bash
# ~/webserver/recipes
$ foodcritic default.rb

```

When `foodcritic` does not produce any output, it indicates that Foodcritic found no violations.

### Use Foodcritic to identify where to better manage services

Say you didn't know about the [service](https://docs.chef.io/resource_service.html) resource, and that you instead use the [execute](https://docs.chef.io/resource_execute.html) resource to manage the Apache service in your `webserver` cookbook.

Modify your default recipe like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
case node['platform']
when 'centos' then
  package 'httpd'
  execute 'enable the httpd service' do
    command 'chkconfig httpd on --level 3'
    not_if 'chkconfig --list httpd | grep 3:on'
  end
  execute 'start the httpd service' do
    command 'service httpd start'
    not_if "service --status-all | grep -e 'httpd (pid\s*[0-9]*) is running'"
  end
when 'ubuntu' then
  package 'apache2'
  execute 'enable the apache2 service' do
    command 'update-rc.d apache2 defaults'
    not_if 'ls /etc/rc?.d/*apache2'
  end
  execute 'start the apache2 service' do
    command 'service apache2 start'
    not_if "service apache2 status | grep 'apache2 is running'"
  end
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Although this recipe might work as you expect, it's unnecessarily complex. The `execute` resource requires additional code to ensure that the service is enabled and started only when needed. This code would require additional testing to ensure that it accounts for differences among each version of CentOS and Ubuntu that you support.

Run `foodcritic default.rb` to apply Foodcritic's rules to your recipe.

```bash
# ~/webserver/recipes
$ foodcritic default.rb
FC004: Use a service resource to start and stop services: default.rb:13
FC004: Use a service resource to start and stop services: default.rb:23
```

Foodcritic reports [FC004](http://acrmp.github.io/foodcritic/#FC004): "Use a service resource to start and stop services".

The `service` resource takes care of all of the details required to enable and start the service. Modify your recipe to look like the original version, like this.

```ruby
# ~/webserver/recipes/default.rb
package_name = service_name = case node['platform']
when 'centos' then 'httpd'
when 'ubuntu' then 'apache2'
end

package package_name

service service_name do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Run `foodcritic default.rb` a to verify that the violation is fixed.

```bash
# ~/webserver/recipes
$ foodcritic default.rb

```

[TIP] The [Foodcritic documention](http://acrmp.github.io/foodcritic/#faq) explains how to exclude specific warnings from a `foodcritic` run.

### Create a custom Foodcritic rule

Let's define a custom Foodcritic rule that validates the way that strings are defined.

A common Ruby coding convention is to surround strings with single quotes `'` and use double-quotes `"` only when:

* string interpolation is required, for example, `"#{document_root}\index.html"`.
* the string contains `'` characters, for example, `"cat default.rb | grep 'web'"`.

The [CustomInk Foodcritic rules](https://github.com/customink-webops/foodcritic-rules) already define this rule for us, so let's adapt it for our custom rule.

Create the <code class="file-path">~/webserver/foodcritic</code> directory and add this code to  <code class="file-path">~/webserver/foodcritic/rules.rb</code>

```ruby
# ~/webserver/foodcritic/rules.rb
# Adapted from https://github.com/customink-webops/foodcritic-rules.

rule 'CINK002', 'Prefer single-quoted strings' do
  tags %w{style strings cink}
  cookbook do |path|
    recipes  = Dir["#{path}/{#{standard_cookbook_subdirs.join(',')}}/**/*.rb"]
    recipes += Dir["#{path}/*.rb"]
    recipes.collect do |recipe|
      lines = File.readlines(recipe)

      lines.collect.with_index do |line, index|
        # Don't flag if there is a #{} or ' in the line
        if line.match('"(.*)"') &&
          !line.match('\A\s*#') &&
          !line.match('\'(.*)"(.*)"(.*)\'') &&
          !line.match('\`(.*)"(.*)"(.*)\`') &&
          !line.match('"(.*)(#{.+}|\'|\\\a|\\\b|\\\r|\\\n|\\\s|\\\t)(.*)"')
          {
            :filename => recipe,
            :matched => recipe,
            :line => index + 1,
            :column => 0
          }
        end
      end.compact
    end.flatten
  end
end
```

[COMMENT] As with RuboCop, you can add this file to a directory higher in the tree so that multiple projects can access it.

To test your rule, modify your default `webserver` recipe like this.

```ruby
# ~/webserver/recipes/default.rb
#
# Cookbook Name:: webserver
# Recipe:: default
#
# Copyright (c) 2015 The Authors, All Rights Reserved.
package "httpd"

service "httpd" do
  action [:enable, :start]
end

file "/var/www/html/index.html" do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Now run `foodcritic`, specifying the `-I` argument to specify the path to our custom rule.

```bash
# ~/webserver/recipes
$ foodcritic -I ~/webserver/foodcritic default.rb
CINK002: Prefer single-quoted strings: ../recipes/default.rb:6
CINK002: Prefer single-quoted strings: ../recipes/default.rb:8
CINK002: Prefer single-quoted strings: ../recipes/default.rb:12
```

Foodcritic reports CINK002: "Prefer single-quoted strings". To resolve the error, you would replace the double quote characters with single quotes, and run Foodcritic to verify that the violation is fixed.
