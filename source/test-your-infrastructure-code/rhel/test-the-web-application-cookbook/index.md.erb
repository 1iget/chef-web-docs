---
title: 'Test the awesome_customers web application cookbook'
order: 5
keywords: TODO
layout: lesson
sections: [1, 2, 3, exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 60 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
redirect: /test_tutorial_offline/
---
The previous two tutorials &ndash; [Manage a basic web application](/manage-a-web-app/rhel/) and [Develop your infrastructure code locally](/local-development/rhel/) &ndash; walk you through the creation of a cookbook named `awesome_customers` that manages a basic web application that reads customer records from a database and displays them as a table.

![the customers web application](/assets/images/misc/webapp_result_test_kitchen.png)

To summarize, the web application configuration:

* uses the [httpd](https://supermarket.chef.io/cookbooks/httpd) cookbook from Chef Supermarket to configure Apache web server.
* creates a user named `web_admin` that is given file ownership of the web content.
* uses the [iptables](https://supermarket.chef.io/cookbooks/iptables) cookbook to ensure that the firewall is open on ports 22 (SSH) and 80 (HTTP).
* uses the [mysql](https://supermarket.chef.io/cookbooks/mysql) and [database](https://supermarket.chef.io/cookbooks/database) cookbooks to configure a MySQL database server and a database instance that holds ficticious customer records.
* uses encrytped [data bags](https://docs.chef.io/data_bags.html) to hold database passwords.
* uses PHP scripting to connect to the database from the web server.

[COMMENT] If you haven't worked through the previous tutorials, [follow this step in the previous tutorial](/local-development/rhel/apply-the-web-application-cookbook-locally#step1) to get a copy of the `awesome_customers` cookbook from GitHub and create a local encrypted copy of the database passwords.

Let's apply what you've learned about automated testing to the `awesome_customers` cookbook.

In this lesson, you'll:

* write Serverspec tests that verify that the cookbook places the server in the desired state.
* write ChefSpec tests that verify that the cookbook's resources are properly defined.
* run RuboCop and Foodcritic to ensure that the cookbook adheres to the standard Ruby style guide and avoids common defects.

We'll start by writing Serverspec tests that verify that the Customers web application is configured as we expect.

[COMMENT] To match the order of the prior lessons, you'll write Serverspec tests first, then write ChefSpec tests, and then run RuboCop and Foodcritic. But remember, in practice it's common to create your ChefSpec tests and run linting tools first because these processes typically run more quickly, and can help identify potential issues earlier in the process. After you've built confidence that your cookbook is well-defined, you can write your Serverspec tests and verify that your cookbook behaves as you expect on real instances.
