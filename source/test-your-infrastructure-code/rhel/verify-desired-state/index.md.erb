---
title: 'Verify your cookbook places the system in the desired state'
order: 2
keywords: TODO
layout: lesson
sections: [1, 2, 3, 4, 5, 6, 7, 8]
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
redirect: /test_tutorial_offline/
---
[HEADLINE] Serverspec gives you a way to automatically verify your configuration on temporary instances, giving you added confidence that your changes will work as you expect in production.

In this lesson, you'll learn how to use [Serverspec](http://serverspec.org) to automatically verify that your server is configured as you expect. You'll run Serverspec from Test Kitchen on a virtual machine running on your workstation.

Serverspec provides a kind of _integration_ testing, where you verify that multiple components function correctly together. With Serverspec, you write [RSpec](http://rspec.info) code that describes the desired state of the server. Serverspec translates this code into SSH commands that it runs on the server.

Commonly you'll write your Serverspec tests after you write your configuration code. But another way is to take a _test-driven_ approach, where you write your tests first before you write any Chef code.

The idea behind test-driven development is to use tests, also called _specifications_ or _specs_, to clearly document your requirements. You run your tests on the server and watch them each fail. Then you write just enough Chef code to make at least one failing test pass. You then repeat the process until all of your tests pass.

An important benefit of test-driven development is that it helps limit scope. You know you're done when all tests pass. And because the tests are code, they're versionable through source control. When a requirement changes, you capture that change by updating the tests. This gives you the complete history of your requirements and better insight to when and how your requirements evolved.

In this lesson, you'll create a basic cookbook that resembles the Apache web server configuration that that you wrote in the [previous tutorials](/learn-the-basics/rhel/configure-a-package-and-service/).

The criteria for the web server configuration are:

* the ability to access the home page.
* the web server returns a custom home page.

You'll follow the test-first approach by first writing a test, watching it fail, and then writing just enough code to make it pass.
