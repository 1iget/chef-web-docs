---
title: 'Verify your cookbook places the system in the desired state'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
---
[HEADLINE] Testing your configuration code through automation gives you increased confidence that your changes will work as you expect in production.

TODO: Just do curl commmand at first (add callout that "having just one test is ..."), then show the rest (building more can help you more quickly pin-point errors should something break.)

TODO: VIDEO

Let's ...

Although it's common to write your tests after you write your configuration code, another way to approach [things, the problem] is to write your tests first. Often called _test-driven infrastructure_ or _test-driven development_.

When you write your tests first [you see them fail - use BL below?] [The process is to:]

* Write [Serverspec]() tests that ...
* Apply to CentOS 6.5 instance through TK - watch it fail
* Write just enough Chef code to make the test pass
* Apply to CentOS 6.5 instance through TK - watch it pass

The benefit to this approach is that

* it clearly documents your requirements
* it tells you when you're _done_.

It also helps limit scope?

We'll use a basic cookbook that configures Apache web server that resembles the one that you wrote previously.

You can think of it like integration or functional testing.
Integration testing verifies that two or more components operate together.
[Functional testing](https://en.wikipedia.org/wiki/Functional_testing) verifies that


## 1. Create cookbook

```bash
# ~
$ chef generate cookbook webserver_test
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/Users/user/webserver_test] action create
    - create new directory /Users/user/webserver_test
[...]
  * cookbook_file[/Users/user/webserver_test/.gitignore] action create
    - create new file /Users/user/webserver_test/.gitignore
    - update content in file /Users/user/webserver_test/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

```bash
# ~/webserver_test
$ tree test
test
└── integration
    ├── default
    │   └── serverspec
    │       └── default_spec.rb
    └── helpers
        └── serverspec
            └── spec_helper.rb

5 directories, 2 files
```

ONE TEST PER RECIPE. DEFAULT -> DEFAULT_SPEC.RB. IF YOU HAD WEBSERVER.RB, YOU'D HAVE WEBSERVER_SPEC.RB

## 2. Write a test

SHOW GENERAL FORM & DEFAULT SPEC

```ruby
# ~/webserver_test/test/integration/default/serverspec/default_spec.rb
require 'spec_helper'

describe 'apache' do
  it 'displays a custom home page' do
    expect(command('curl localhost').stdout).to match /hello/
  end
end
```

TALK ABOUT

- MIMICS NATURAL LANGUAGE
- REGEX

https://www.relishapp.com/rspec/rspec-expectations/v/2-2/docs/matchers/match-matcher

http://serverspec.org/resource_types.html

RUBULAR

## 3. Watch it fail

## Create the Test Kitchen configuration file

```ruby
# ~/webserver_test/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

platforms:
  - name: centos-6.6

suites:
  - name: default
    run_list:
      - recipe[webserver_test::default]
    attributes:
```

WHY 66?

```bash
# ~/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-66  Vagrant  ChefZero     Busser    Ssh        <Not Created>
```

```bash
# ~/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.4.2)
-----> Creating <default-centos-66>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'opscode-centos-6.6'...
[...]
       webserver_test::default
         displays a custom home page (FAILED - 1)

       Failures:

         1) webserver_test::default displays a custom home page
            Failure/Error: expect(command('curl localhost').stdout).to match /hello/
              expected "" to match /hello/
              Diff:
              @@ -1,2 +1,2 @@
              -/hello/
              +""

              /bin/sh -c curl\ localhost

            # /tmp/verifier/suites/serverspec/default_spec.rb:5:in `block (2 levels) in <top (required)>'

       Finished in 0.06486 seconds (files took 0.264 seconds to load)
       1 example, 1 failure

       Failed examples:

       rspec /tmp/verifier/suites/serverspec/default_spec.rb:4 # webserver_test::default displays a custom home page
[...]
```

## 4. Write just enough code to make the test succeed

```ruby
# ~/webserver_test/recipes/default.rb
package 'httpd'

service 'httpd' do
  action [:enable, :start]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

## 5. Apply the configuration

INSTANCE ALREADY RUNNING. APPLY NEW CONFIG

```bash
# ~/webserver_test
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-centos-66>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 3.2.4...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-centos-66>
       Starting Chef Client, version 12.4.1
[...]
       Recipe: webserver_test::default



           - enable service service[httpd]

           - start service service[httpd]


           - update content in file /var/www/html/index.html from none to 2914aa
           --- /var/www/html/index.html	2015-09-17 14:30:59.502280398 +0000
           +++ /var/www/html/.index.html20150917-2164-1mloyt0	2015-09-17 14:30:59.502280398 +0000
           @@ -1 +1,6 @@
           +<html>

           +    <h1>hello world</h1>
           +  </body>



       Running handlers:
       Running handlers complete
       Chef Client finished, 4/4 resources updated in 7.098627611 seconds
       Finished converging <default-centos-66> (0m8.78s).
-----> Kitchen is finished. (0m9.47s)
```

## 6. Watch it pass

```bash
# ~/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.4.2)
-----> Verifying <default-centos-66>...
       Preparing files for transfer
-----> Busser installation detected (busser)
       Installing Busser plugins: busser-serverspec
       Plugin serverspec already installed
       Removing /tmp/verifier/suites/serverspec
       Transferring files to <default-centos-66>
-----> Running serverspec test suite
       /opt/chef/embedded/bin/ruby -I/tmp/verifier/suites/serverspec -I/tmp/verifier/gems/gems/rspec-support-3.3.0/lib:/tmp/verifier/gems/gems/rspec-core-3.3.2/lib /opt/chef/embedded/bin/rspec --pattern /tmp/verifier/suites/serverspec/\*\*/\*_spec.rb --color --format documentation --default-path /tmp/verifier/suites/serverspec

       webserver_test::default
         displays a custom home page

       Finished in 0.05451 seconds (files took 0.27734 seconds to load)
       1 example, 0 failures

       Finished verifying <default-centos-66> (0m3.13s).
-----> Kitchen is finished. (0m3.62s)
```

SUCCESS!

```bash
# ~/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-66  Vagrant  ChefZero     Busser    Ssh        Verified
```

## 7. Write additional tests

You've satisfied your requirements blah blah.

However, as you add additional features, you may introduce a _regresssion_, or break, in existing functionality. Your test verifies only the end result of your web configuration. If this test were to fail, you would have to perform additional troubleshooting to understand the root cause.

Let's write a few more tests that verify other aspects of your configuration. Specifically, we'll verify that:

* the `httpd` package is installed.
* the `httpd` service is running.
* port 80 is listening to incoming requests.

```ruby
# ~/webserver_test/test/integration/default/serverspec/default_spec.rb
require 'spec_helper'

describe 'apache' do
  it 'is installed' do
    expect(package 'httpd').to be_installed
  end

  it 'is running' do
    expect(service 'httpd').to be_running
  end

  it 'is listening to port 80' do
    expect(port 80).to be_listening
  end

  it 'displays a custom home page' do
    expect(command('curl localhost').stdout).to match /hello/
  end
end
```

```bash
# ~/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.4.2)
-----> Setting up <default-centos-66>...
       Finished setting up <default-centos-66> (0m0.00s).
-----> Verifying <default-centos-66>...
       Preparing files for transfer
-----> Busser installation detected (busser)
       Installing Busser plugins: busser-serverspec
       Plugin serverspec already installed
       Removing /tmp/verifier/suites/serverspec
       Transferring files to <default-centos-66>
-----> Running serverspec test suite
       /opt/chef/embedded/bin/ruby -I/tmp/verifier/suites/serverspec -I/tmp/verifier/gems/gems/rspec-support-3.3.0/lib:/tmp/verifier/gems/gems/rspec-core-3.3.2/lib /opt/chef/embedded/bin/rspec --pattern /tmp/verifier/suites/serverspec/\*\*/\*_spec.rb --color --format documentation --default-path /tmp/verifier/suites/serverspec

       apache
         is installed
         is running
         is listening to port 80
         displays a custom home page

       Finished in 0.21102 seconds (files took 0.29319 seconds to load)
       4 examples, 0 failures

       Finished verifying <default-centos-66> (0m3.57s).
-----> Kitchen is finished. (0m4.10s)
```

All tests pass! Now your tests cover multiple common points of failure. If one of the tests fail, you'll be closer to the root cause.

You can now destroy your instance.

```bash
# ~/webserver_test
$ kitchen destroy
-----> Starting Kitchen (v1.4.2)
-----> Destroying <default-centos-66>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-centos-66> destroyed.
       Finished destroying <default-centos-66> (0m3.86s).
-----> Kitchen is finished. (0m4.35s)
```

```bash
# ~/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-66  Vagrant  ChefZero     Busser    Ssh        <Not Created>
```

## 8. Test your configuration in one step

So far, you've run commands such as `kitchen converge`, `kitchen verify`, and `kitchen destroy` to manage your instances.

You can also run the `kitchen test` command to create, converge, verify, and destroy your instance all in one step. Running this command is equivalent to running these commands.

```bash
$ kitchen destroy
$ kitchen create
$ kitchen converge
$ kitchen verify
$ kitchen destroy
```

The `kitchen test` command is useful when you want to quickly verify a change. It's also commonly used in automated pipelines because it ensures that the virtual instance is destroyed immediately after all tests are run. Ensuring that you've freed your virtual instances is especially important when you use a cloud [driver](https://docs.chef.io/kitchen.html#drivers) because you typically rent cloud resources by the hour.

```bash
# ~/webserver_test
$ kitchen test
-----> Starting Kitchen (v1.4.2)
-----> Cleaning up any prior instances of <default-centos-66>
-----> Destroying <default-centos-66>...
       Finished destroying <default-centos-66> (0m0.00s).
-----> Testing <default-centos-66>
-----> Creating <default-centos-66>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'opscode-centos-6.6'...
[...]
       Synchronizing Cookbooks:
         - webserver_test
       Compiling Cookbooks...
       Converging 3 resources
       Recipe: webserver_test::default

           - install version 2.2.15-47.el6.centos of package httpd



           - start service service[httpd]


           - update content in file /var/www/html/index.html from none to 2914aa
           --- /var/www/html/index.html	2015-09-17 17:19:50.382184641 +0000
           +++ /var/www/html/.index.html20150917-1865-gk92cm	2015-09-17 17:19:50.381184641 +0000
           @@ -1 +1,6 @@
           +<html>
           +  <body>
           +    <h1>hello world</h1>


           - restore selinux security context

       Running handlers:
       Running handlers complete
       Chef Client finished, 4/4 resources updated in 8.09604643 seconds
       Finished converging <default-centos-66> (0m22.24s).
[...]
       apache
         is installed
         is running
         is listening to port 80
         displays a custom home page

       Finished in 0.1436 seconds (files took 0.29668 seconds to load)
       4 examples, 0 failures

       Finished verifying <default-centos-66> (0m15.07s).
-----> Destroying <default-centos-66>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-centos-66> destroyed.
       Finished destroying <default-centos-66> (0m3.42s).
       Finished testing <default-centos-66> (3m22.16s).
-----> Kitchen is finished. (3m22.66s)
```

```bash
# ~/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-66  Vagrant  ChefZero     Busser    Ssh        <Not Created>
```
