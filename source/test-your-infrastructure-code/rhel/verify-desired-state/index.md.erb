---
title: 'Verify your cookbook places the system in the desired state'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
---
[HEADLINE] Running InSpec tests through Test Kitchen lets you automatically verify your configuration on temporary instances, giving you added confidence that your changes will work as you expect in production.

In this part, you'll learn how to use [InSpec](http://inspec.io/docs/reference/resources/) to automatically verify a basic web server configuration. You'll run InSpec from Test Kitchen on a virtual machine running on your workstation.

InSpec provides a kind of _integration_ testing, where you verify that multiple components function correctly together. With InSpec, you write code that describes the desired state of the server. InSpec translates this code into SSH commands that it runs on the server.

[COMMENT] If you've used [RSpec](http://rspec.info) or [Serverspec](http://serverspec.org/), InSpec code will look familiar to you. You can continue to use the Serverspec tests that you've already written and also write new Serverspec tests. One difference between InSpec and Serverspec is that InSpec does not install additional software on your target system. On Linux, it performs all tests over SSH. On Windows, it performs tests over WinRM.

It's common to write InSpec tests after you write your configuration code. But another way is to take a _test-driven_ approach, where you write your tests first before you write any Chef code.

The idea behind test-driven development is to use tests, also called _specifications_ or _specs_, to clearly document your requirements. You run your tests on the server and watch them each fail. Then you write just enough Chef code to make at least one failing test pass. You then repeat the process until all of your tests pass.

Here's a 60-minute webcast that discusses the test-driven process in greater depth and shows working examples. You can watch the video before or after you complete this tutorial.

<script type="text/javascript" src="https://www.brighttalk.com/clients/js/embed/embed.js"></script> <object class="BrightTALKEmbed" width="705" height="660">     <param name="player" value="channel_player"/>     <param name="domain" value="https://www.brighttalk.com"/>     <param name="channelid" value="11349"/>     <param name="communicationid" value="191263"/>     <param name="autoStart" value="false"/>     <param name="theme" value=""/> </object>

An important benefit of test-driven development is that it helps limit scope. You know you're done when all tests pass. And because the tests are code, they're versionable through source control. When a requirement changes, you capture that change by updating the tests. This gives you the complete history of your requirements and better insight into when and how your requirements changed.

In this lesson, you'll create a basic cookbook that resembles the Apache web server configuration that you wrote [previously](/tutorials/learn-the-basics/rhel/free/configure-a-package-and-service/). Let's begin by defining clear goals for the web server configuration.

Here's the criteria for the web server configuration:

<% unstyled_list do %>
  <% icon_list_item('square-o') do %>
    Install the Apache package, <code>httpd</code>, on Red Hat Enterprise Linux systems.
  <% end %>
  <% icon_list_item('square-o') do %>
    Start and enable the <code>httpd</code> service.
  <% end %>
  <% icon_list_item('square-o') do %>
    Serve a custom home page.
  <% end %>
  <% icon_list_item('square-o') do %>
    Open port 80 to incoming traffic.
  <% end %>
<% end %>

You'll follow the test-driven approach by first writing a test, watching it fail, and then writing just enough code to make it pass. Here are the steps you'll take:

1. [Create a web server cookbook](#step1)
1. [Create the directory structure for InSpec testing](#step2)
1. [Write the first test](#step3)
1. [Run the test on a CentOS virtual machine](#step4)
1. [Write just enough code to make the test pass](#step5)
1. [Apply and verify the configuration](#step6)
1. [Write the remaining tests](#step7)
1. [Watch the remaining tests fail](#step8)
1. [Write just enough code to make the remaining tests pass](#step9)
1. [Apply and verify the updated configuration](#step10)
1. [Verify your configuration on a clean instance](#step11)

[START_BOX]

## 1. Create a web server cookbook

From your terminal window, begin by moving to the <% fp 'cd ~/learn-chef' %> directory.

```bash
$ cd ~/learn-chef
```

Next, run the following `chef generate cookbook` command to create a cookbook named `webserver_test`.

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/webserver_test
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/Users/user/learn-chef/cookbooks/webserver_test] action create
    - create new directory /Users/user/learn-chef/cookbooks/webserver_test
[...]
  * cookbook_file[/Users/user/learn-chef/cookbooks/webserver_test/.gitignore] action create
    - create new file /Users/user/learn-chef/cookbooks/webserver_test/.gitignore
    - update content in file /Users/user/learn-chef/cookbooks/webserver_test/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

The "test" part of the cookbook's name is simply to distinguish this cookbook from those used in other Learn Chef tutorials. In practice, you might simply name the cookbook `webserver`.

[END_BOX]

[START_BOX]

## 2. Create the directory structure for InSpec testing

The `chef generate cookbook` command creates a file and directory structure for Serverspec tests.

```bash
# ~/learn-chef
$ tree cookbooks/webserver_test/test
test
└── integration
    ├── default
    │   └── serverspec
    │       └── default_spec.rb
    └── helpers
        └── serverspec
            └── spec_helper.rb

5 directories, 2 files
```

We need to modify this directory structure because we want to write InSpec tests and not Serverspec tests.

One way to do that is to rename the <% fp 'test/integration/default/serverspec' %> directory. Do so like this.

```bash
# ~/learn-chef
$ mv cookbooks/webserver_test/test/integration/default/serverspec cookbooks/webserver_test/test/integration/default/inspec
```

Because you don't need the Serverspec helper file, you can also remove the <% fp 'test/integration/helpers' %> directory.

Here's how on Linux or Mac OS.

```bash
# ~/learn-chef
$ rm -rf cookbooks/webserver_test/test/integration/helpers
```

Here's how from Windows PowerShell.

```ps
# ~\learn-chef
$ Remove-Item -Recurse .\cookbooks\webserver_test\test\integration\helpers
```

Your test directory now looks like this.

```bash
# ~\learn-chef
$ tree cookbooks/webserver_test/test
cookbooks/webserver_test/test
└── integration
    └── default
        └── inspec
            └── default_spec.rb

3 directories, 1 file
```

[END_BOX]

[START_BOX]

## 3. Write the first test

Before writing any configuration code, let's write a test that verifies the first requirement:

<% unstyled_list do %>
  <% icon_list_item('square-o') do %>
    <b>Install the Apache package, <code>httpd</code>, on Red Hat Enterprise Linux systems.</b>
  <% end %>
  <% icon_list_item('square-o') do %>
    Start and enable the <code>httpd</code> service.
  <% end %>
  <% icon_list_item('square-o') do %>
    Serve a custom home page.
  <% end %>
  <% icon_list_item('square-o') do %>
    Open port 80 to incoming traffic.
  <% end %>
<% end %>

The file <% fp 'test/integration/default/inspec/default_spec.rb' %> will hold our tests. You typically have one test file for each recipe in your cookbooks. Here, <% fp 'default_spec.rb' %> contains tests for the default recipe, <% fp 'default.rb' %>. For this tutorial, you'll add all configuration code to the default recipe.

As with many test frameworks, InSpec code resembles natural language. Here's the format of an InSpec test.

```ruby
# default_spec.rb
describe '<entity>' do
  it { <expection> }
end
```

An InSpec test has two main components: the _subject to examine_ and the subject's _expected state_. Here, `<entity>` is the subject you want to examine, for example, a package name, service, file, or network port. The `<expectation>` part specifies the desired result or expected state, for example, that a port should be open (or perhaps _should not_ be open.)

[COMMENT] In this tutorial, you use RSpec's "should" syntax. You can also use the [expect syntax](http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/).

Replace the contents of <% fp 'default_spec.rb' %> with this code. This code tests whether the `httpd` package is installed.

```ruby
# ~/learn-chef/cookbooks/webserver_test/test/integration/default/inspec/default_spec.rb
describe package 'httpd' do
  it { should be_installed }
end
```

This code uses InSpec's [package](http://inspec.io/docs/reference/resources/package) resource to test whether the `httpd` package is installed on the system.

[END_BOX]

[START_BOX]

## 4. Run the test on a CentOS virtual machine

Now you'll run the test through Test Kitchen on a CentOS virtual machine and watch it fail.

Modify <code class="file-path">.kitchen.yml</code> like this to specify CentOS 7.2 as the target platform.

```yaml
# ~/learn-chef/cookbooks/webserver_test/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero

verifier:
  name: inspec

platforms:
  - name: centos-7.2
    driver:
      customize:
        memory: 256

suites:
  - name: default
    run_list:
      - recipe[webserver_test::default]
    attributes:
```

This configuration also specifies that the virtual machine should have 256 MB of memory available to it and that the cookbook contains InSpec tests.

Next, `cd` to your cookbook directory.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/webserver_test/
```

Run `kitchen list` to verify that the instance has not yet been created.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-72  Vagrant  ChefZero     Inspec    Ssh        <Not Created>
```

In the previous tutorials, you ran `kitchen converge` to bring up your virtual machine and apply your Chef code. This time, run `kitchen verify` to bring up the virtual machine and run just your tests.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.8.0)
-----> Creating <default-centos-72>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'bento/centos-7.2'...
==> default: Matching MAC address for NAT networking...
       ==> default: Checking if box 'bento/centos-7.2' is up to date...
       ==> default: Setting the name of the VM: kitchen-webserver_test-default-centos-72_default_1462210238307_53632
       ==> default: Clearing any previously set network interfaces...
       ==> default: Preparing network interfaces based on configuration...
           default: Adapter 1: nat
       ==> default: Forwarding ports...
           default: 22 (guest) => 2222 (host) (adapter 1)
[...]
       Synchronizing Cookbooks:
         - webserver_test (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 0 resources

       Running handlers:
       Running handlers complete
       Chef Client finished, 0/0 resources updated in 03 seconds
       Finished converging <default-centos-72> (0m27.98s).
-----> Setting up <default-centos-72>...
       Finished setting up <default-centos-72> (0m0.00s).
-----> Verifying <default-centos-72>...
       Detected alternative framework tests for `inspec`
       Search `/Users/user/learn-chef/cookbooks/webserver_test/test/integration/default/inspec` for tests
F

Failures:

  1) System Package httpd should be installed
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }
       expected that `System Package httpd` is installed
     # ./test/integration/default/inspec/default_spec.rb:2:in `block (2 levels) in load'
     # /Users/user/.chefdk/gem/ruby/2.1.0/gems/kitchen-inspec-0.13.0/lib/kitchen/verifier/inspec.rb:47:in `call'

Finished in 0.28576 seconds (files took 1 minute 5.77 seconds to load)
1 example, 1 failure

Failed examples:

rspec  # System Package httpd should be installed

>>>>>> Verify failed on instance <default-centos-72>.
>>>>>> Please see .kitchen/logs/default-centos-72.log for more details
>>>>>> ------Exception-------
>>>>>> Class: Kitchen::ActionFailed
>>>>>> Message: Inspec Runner returns 1
>>>>>> ----------------------
```

You see from the output that the test failed.

```bash
# ~/learn-chef/cookbooks/webserver_test
Failed examples:

rspec  # System Package httpd should be installed
```

You should expect the test to fail because you have not yet written any code to install the package. Having a failing test shows what functionality is missing and gives you a clear goal to work towards. You also now have a way to quickly get feedback on whether the changes you make bring you closer to your goal.

[END_BOX]

[START_BOX]

## 5. Write just enough code to make the test pass

To make the test pass, you need to install the `httpd` package. To do that, you can use the [package](https://docs.chef.io/resource_package.html) resoruce. Write out the default recipe, <% fp 'default.rb' %>, like this.

```ruby
# ~/learn-chef/cookbooks/webserver_test/recipes/default.rb
# Install the Apache package.
package 'httpd'
```

[COMMENT] For learning purposes, you use the built-in `package` resource to install Apache. A more robust solution might use the [httpd](https://supermarket.chef.io/cookbooks/httpd) cookbook from Chef Supermarket. You used the `httpd` cookbook in the previous tutorial, [Manage a basic web application](/manage-a-web-app/rhel/configure-apache/).

[END_BOX]

[START_BOX]

## 6. Apply and verify the configuration

The `kitchen verify` command already brought up a CentOS instance. Now run `kitchen converge` to apply your web server cookbook to your instance.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen converge
-----> Starting Kitchen (v1.8.0)
-----> Converging <default-centos-72>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-centos-72>
       Starting Chef Client, version 12.10.24
       resolving cookbooks for run list: ["webserver_test::default"]
       Synchronizing Cookbooks:
         - webserver_test (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 1 resources
       Recipe: webserver_test::default
         * yum_package[httpd] action install
           - install version 2.4.6-40.el7.centos of package httpd

       Running handlers:
       Running handlers complete
       Chef Client finished, 1/1 resources updated in 32 seconds
       Finished converging <default-centos-72> (0m35.19s).
-----> Kitchen is finished. (0m36.73s)
```

The output shows that the `httpd` package was installed and that the `chef-client` run completed without error.

The next step is to verify that it placed the system in the desired state. Run `kitchen verify` to run your InSpec test.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.8.0)
-----> Setting up <default-centos-72>...
       Finished setting up <default-centos-72> (0m0.00s).
-----> Verifying <default-centos-72>...
       Detected alternative framework tests for `inspec`
       Search `/Users/user/learn-chef/cookbooks/webserver_test/test/integration/default/inspec` for tests
.

Finished in 0.60141 seconds (files took 0.98143 seconds to load)
1 example, 0 failures

       Finished verifying <default-centos-72> (0m1.38s).
-----> Kitchen is finished. (0m2.86s)
```

Success! The test passes. If the test did not pass, you would go back to your recipe, fix the failure, and run your test again.

[COMMENT] Writing just one test is better than having no tests at all. After you have at least one test in place, you have a foundation and a process for writing more.

Run `kitchen list`. You'll see in the `Last Action` column that the instance's state is `Verified`, which means that Test Kitchen's most previous action was to run the tests.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-72  Vagrant  ChefZero     Inspec    Ssh        Verified
```

[END_BOX]

[START_BOX]

## 7. Write the remaining tests

So far, you've validated the first requirement for your web server configuration.

<% unstyled_list do %>
  <% icon_list_item('check-square-o') do %>
    Install the Apache package, <code>httpd</code>, on Red Hat Enterprise Linux systems.
  <% end %>
  <% icon_list_item('square-o') do %>
    Start and enable the <code>httpd</code> service.
  <% end %>
  <% icon_list_item('square-o') do %>
    Serve a custom home page.
  <% end %>
  <% icon_list_item('square-o') do %>
    Open port 80 to incoming traffic.
  <% end %>
<% end %>

Now let's write the remaining tests.

Append three more InSpec tests to <% fp 'default_spec.rb' %>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/webserver_test/test/integration/default/inspec/default_spec.rb
describe package 'httpd' do
  it { should be_installed }
end

describe service 'httpd' do
  it { should be_enabled }
  it { should be_running }
end

describe command 'curl localhost' do
  its('stdout') { should match /hello/ }
end

describe port 80 do
  it { should be_listening }
end
```

This code uses InSpec's [service](http://inspec.io/docs/reference/resources/service), [command](http://inspec.io/docs/reference/resources/command), and [port](http://inspec.io/docs/reference/resources/port) resources. The `command` resource uses a regular expression to verify that the home page contains the string "hello".

[RUBY] Regular expressions in Ruby are usually surrounded with forward slashes `/`. [Rubular](http://rubular.com) is a handy way to test out your regular expressions.

[END_BOX]

[START_BOX]

## 8. Watch the remaining tests fail

From your cookbook directory, run `kitchen verify`.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.8.0)
-----> Verifying <default-centos-72>...
       Detected alternative framework tests for `inspec`
       Search `/Users/user/learn-chef/cookbooks/webserver_test/test/integration/default/inspec` for tests
.FFFF

Failures:

  1) Service httpd should be enabled
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }
       expected that `Service httpd` is enabled
     # ./test/integration/default/inspec/default_spec.rb:6:in `block (2 levels) in load'
     # /Users/user/.chefdk/gem/ruby/2.1.0/gems/kitchen-inspec-0.13.0/lib/kitchen/verifier/inspec.rb:47:in `call'

  2) Service httpd should be running
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }
       expected that `Service httpd` is running
     # ./test/integration/default/inspec/default_spec.rb:7:in `block (2 levels) in load'
     # /Users/user/.chefdk/gem/ruby/2.1.0/gems/kitchen-inspec-0.13.0/lib/kitchen/verifier/inspec.rb:47:in `call'

  3) Command curl localhost stdout should match /hello/
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }

       expected "" to match /hello/
       Diff:
       @@ -1,2 +1,2 @@
       -/hello/
       +""
     # ./test/integration/default/inspec/default_spec.rb:11:in `block (2 levels) in load'
     # /Users/user/.chefdk/gem/ruby/2.1.0/gems/kitchen-inspec-0.13.0/lib/kitchen/verifier/inspec.rb:47:in `call'

  4) Port  80 should be listening
     Failure/Error: DEFAULT_FAILURE_NOTIFIER = lambda { |failure, _opts| raise failure }
       expected `Port  80.listening?` to return true, got false
     # ./test/integration/default/inspec/default_spec.rb:15:in `block (2 levels) in load'
     # /Users/user/.chefdk/gem/ruby/2.1.0/gems/kitchen-inspec-0.13.0/lib/kitchen/verifier/inspec.rb:47:in `call'

Finished in 0.67324 seconds (files took 0.80633 seconds to load)
5 examples, 4 failures

Failed examples:

rspec  # Service httpd should be enabled
rspec  # Service httpd should be running
rspec  # Command curl localhost stdout should match /hello/
rspec  # Port  80 should be listening

>>>>>> Verify failed on instance <default-centos-72>.
>>>>>> Please see .kitchen/logs/default-centos-72.log for more details
>>>>>> ------Exception-------
>>>>>> Class: Kitchen::ActionFailed
>>>>>> Message: Inspec Runner returns 1
>>>>>> ----------------------
```

You'll see from the output that the new tests fail.

```bash
# ~/learn-chef/cookbooks/webserver_test
5 examples, 4 failures

Failed examples:

rspec  # Service httpd should be enabled
rspec  # Service httpd should be running
rspec  # Command curl localhost stdout should match /hello/
rspec  # Port  80 should be listening
```

[END_BOX]

[START_BOX]

## 9. Write just enough code to make the remaining tests pass

In practice, you might resolve each remaining test failure individually. This gradual approach enables you to build your cookbooks in small batches. Because Chef uses a test-and-repair approach, you can run Test Kitchen as many times as you need.

To keep things moving, let's resolve the remaining failures all at once. Modify your default recipe, <% fp 'default.rb' %>, like this.

```ruby
# ~/learn-chef/cookbooks/webserver_test/recipes/default.rb
# Install the Apache package.
package 'httpd'

# Start and enable the httpd service.
service 'httpd' do
  action [:enable, :start]
end

# Serve a custom home page.
file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

This code uses the `service` and `file` resources that you've used in previous tutorials.

This code does not explicitly configure Apache to run on port 80. We'll see in the next step whether we need to write additional code to address that requirement.

[END_BOX]

[START_BOX]

## 10. Apply and verify the updated configuration

Run `kitchen converge` to apply your web server cookbook to your instance.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen converge
-----> Starting Kitchen (v1.8.0)
-----> Converging <default-centos-72>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-centos-72>
       Starting Chef Client, version 12.10.24
       resolving cookbooks for run list: ["webserver_test::default"]
       Synchronizing Cookbooks:
         - webserver_test (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 3 resources
       Recipe: webserver_test::default
         * yum_package[httpd] action install (up to date)
         * service[httpd] action enable
           - enable service service[httpd]
         * service[httpd] action start
           - start service service[httpd]
         * file[/var/www/html/index.html] action create
           - create new file /var/www/html/index.html
           - update content in file /var/www/html/index.html from none to 2914aa
           --- /var/www/html/index.html	2016-05-02 20:20:17.585022583 +0000
           +++ /var/www/html/.chef-index.html20160502-12183-1rxciui	2016-05-02 20:20:17.585022583 +0000
           @@ -1 +1,6 @@
           +<html>
           +  <body>
           +    <h1>hello world</h1>
           +  </body>
           +</html>
           - restore selinux security context

       Running handlers:
       Running handlers complete
       Chef Client finished, 3/4 resources updated in 06 seconds
       Finished converging <default-centos-72> (0m8.84s).
-----> Kitchen is finished. (0m10.32s)
```

The output shows that the `httpd` service was enabled and started and that the home page is set.

Now run `kitchen verify` to run your InSpec tests.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen verify
-----> Starting Kitchen (v1.8.0)
-----> Setting up <default-centos-72>...
       Finished setting up <default-centos-72> (0m0.00s).
-----> Verifying <default-centos-72>...
       Detected alternative framework tests for `inspec`
       Search `/Users/user/learn-chef/cookbooks/webserver_test/test/integration/default/inspec` for tests
.....

Finished in 0.70957 seconds (files took 0.89722 seconds to load)
5 examples, 0 failures

       Finished verifying <default-centos-72> (0m1.41s).
-----> Kitchen is finished. (0m2.85s)
```

All 5 tests now pass. If any test did not pass, you would go back to your recipe, fix the failure, and run your test again.

Congratulations. You've successfully satisfied the basic requirements for your web server.

<% unstyled_list do %>
  <% icon_list_item('check-square-o') do %>
    Install the Apache package, <code>httpd</code>, on Red Hat Enterprise Linux systems.
  <% end %>
  <% icon_list_item('check-square-o') do %>
    Start and enable the <code>httpd</code> service.
  <% end %>
  <% icon_list_item('check-square-o') do %>
    Serve a custom home page.
  <% end %>
  <% icon_list_item('check-square-o') do %>
    Open port 80 to incoming traffic.
  <% end %>
<% end %>

You don't need to write additional code to open port 80 because the default configuration handles that.

As your requirements evolve, you can repeat the process by writing additional tests, watching them fail, and then writing just enough code to make them pass.

[END_BOX]

[START_BOX]

## 11. Verify your configuration on a clean instance

As you experiment and correct mistakes, it's a good practice to apply your configuration and run your tests one final time on a clean instance to ensure that the process is repeatable and isn't the result of any experimentation or intermediate steps you performed along the way.

So far, you ran commands such as `kitchen converge`, `kitchen verify`, and `kitchen destroy` to manage your instances.

You can also run the `kitchen test` command to create, converge, verify, and destroy your instance all in one step. Running this command is equivalent to running these commands.

```bash
$ kitchen destroy
$ kitchen create
$ kitchen converge
$ kitchen verify
$ kitchen destroy
```

Run `kitchen test` to apply and test your configuration one final time.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen test
-----> Starting Kitchen (v1.8.0)
-----> Cleaning up any prior instances of <default-centos-72>
-----> Destroying <default-centos-72>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-centos-72> destroyed.
       Finished destroying <default-centos-72> (0m4.46s).
-----> Testing <default-centos-72>
-----> Creating <default-centos-72>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'bento/centos-7.2'...
[...]
       Vagrant instance <default-centos-72> created.
       Finished creating <default-centos-72> (0m35.35s).
-----> Converging <default-centos-72>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
[...]
       resolving cookbooks for run list: ["webserver_test::default"]
       Synchronizing Cookbooks:
         - webserver_test (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 3 resources
       Recipe: webserver_test::default
         * yum_package[httpd] action install
           - install version 2.4.6-40.el7.centos of package httpd
         * service[httpd] action enable
           - enable service service[httpd]
         * service[httpd] action start
           - start service service[httpd]
         * file[/var/www/html/index.html] action create
           - create new file /var/www/html/index.html
           - update content in file /var/www/html/index.html from none to 2914aa
           --- /var/www/html/index.html	2016-05-02 20:34:14.264545591 +0000
           +++ /var/www/html/.chef-index.html20160502-11034-l0htap	2016-05-02 20:34:14.257542092 +0000
           @@ -1 +1,6 @@
           +<html>
           +  <body>
           +    <h1>hello world</h1>
           +  </body>
           +</html>
           - restore selinux security context

       Running handlers:
       Running handlers complete
       Chef Client finished, 4/4 resources updated in 34 seconds
       Finished converging <default-centos-72> (0m59.40s).
-----> Setting up <default-centos-72>...
       Finished setting up <default-centos-72> (0m0.00s).
-----> Verifying <default-centos-72>...
       Detected alternative framework tests for `inspec`
       Search `/Users/user/learn-chef/cookbooks/webserver_test/test/integration/default/inspec` for tests
.....

Finished in 0.71437 seconds (files took 1 minute 40.3 seconds to load)
5 examples, 0 failures

       Finished verifying <default-centos-72> (0m1.60s).
-----> Destroying <default-centos-72>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-centos-72> destroyed.
       Finished destroying <default-centos-72> (0m3.91s).
       Finished testing <default-centos-72> (1m44.74s).
-----> Kitchen is finished. (1m46.22s)
```

You see from the output that the tests pass and the configuration is repeatable. Run `kitchen list` to verify that the instance is destroyed.

```bash
# ~/learn-chef/cookbooks/webserver_test
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-72  Vagrant  ChefZero     Inspec    Ssh        <Not Created>
```

[COMMENT] The `kitchen test` command is also commonly used in automated pipelines because it ensures that the instance is destroyed immediately after `chef-client` completes and all tests are run. When you use a [cloud driver](https://docs.chef.io/kitchen.html#drivers) with Test Kitchen, `kitchen test` can help minimize cost.

[GITHUB] [Get the code for this lesson](https://github.com/learn-chef/webserver_test/tree/lesson1_rhel) on GitHub.

[END_BOX]
