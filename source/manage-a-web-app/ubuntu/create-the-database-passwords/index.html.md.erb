---
title: 'Create the database passwords'
order: 7
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
The next thing we want to do is configure MySQL. This step involves working with two passwords &ndash; the MySQL root password and a password for a MySQL administrator to create and access the database instance that holds customer records.

Before we set up MySQL, we need a way to store the passwords so that our node can access them. Because Chef code is often maintained under source control, you never want to store passwords in a recipe in plain text.

There are several approches you can take. For example, you could use an [encrypted data bag](https://docs.chef.io/chef/essentials_data_bags.html). A data bag is a collection of key-value pairs that are shared among your nodes. You can encrypt data bags to protect sensitive information, such as certificates, API keys, and passwords.

For this project, we'll generate random passwords for the MySQL root and administrator accounts when the cookbook runs and store the passwords as node attributes. This way, the node has access to the passwords without making those passwords available to everyone who reads our recipes.

[START_BOX]

## 1. Write the random_password helper method

To generate random passwords, you'll use Ruby's [SecureRandom.base64](http://ruby-doc.org/stdlib-2.2.0/libdoc/securerandom/rdoc/SecureRandom.html) method to build your own helper method. Then you'll call your helper method to set node attributes that hold the root and administrator passwords.

Start by defining the `random_password` method at the top of your attributes file, <% fp 'default.rb' %>. The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
def random_password
  require 'securerandom'
  SecureRandom.base64
end

default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
default['awesome_customers_ubuntu']['document_root'] = '/var/www/customers/public_html'
```

The `require 'securerandom'` part loads the `SecureRandom` module. We define it inside the `random_password` method to load the `SecureRandom` module only when it's used. The `SecureRandom.base64` method returns a string similar to "RuoHq6AvmcNH5hGKQkC0ew==".

[COMMENT] In practice, you might add the `random_password` to a helper library to make it more reusable. The [openssl cookbook](https://github.com/chef-cookbooks/openssl/blob/master/libraries/random_password.rb) shows an example.

[END_BOX]

[START_BOX]

## 2. Define the node attributes

Now append two node attributes to your attributes file. The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
def random_password
  require 'securerandom'
  SecureRandom.base64
end

default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
default['awesome_customers_ubuntu']['document_root'] = '/var/www/customers/public_html'

normal_unless['awesome_customers_ubuntu']['database']['root_password'] = random_password
normal_unless['awesome_customers_ubuntu']['database']['admin_password'] = random_password
```

To ensure that the password is generated one time only, you use `normal_unless`. [normal_unless](https://docs.chef.io/attributes.html#use-attribute-files) sets the node attribute only if the attribute has no value.

[COMMENT] A node's attributes are accessible to other nodes in your network through Chef's [search](https://docs.chef.io/chef_search.html) capabilities. If you don't want other nodes to have access to sensitive information such as passwords, consider an alternative approach such as using encrypted data bags. The encrypted data is available to other nodes in your network, but only the nodes that have access to the secret key can decrypt the data. [chef-vault](https://github.com/Nordstrom/chef-vault) is commonly used distribute secret keys to nodes. [Learn more](https://www.chef.io/blog/2016/01/21/chef-vault-what-is-it-and-what-can-it-do-for-you/)

[END_BOX]

[START_BOX]

## 3. Modify your Test Kitchen configuration file to support local development

It's common to specify a value for passwords and other sensitive information as you develop your cookbooks. Here are a few reasons why.

First, recall that your Test Kitchen configuration file, <% fp '.kitchen.yml' %>, uses the `chef_zero` provisioner.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/.kitchen.yml
[...]
provisioner:
  name: chef_zero
[...]
```

The `provisioner` section specifies how to run Chef. You specify `chef_zero` to mimic a Chef server environment on your local machine. Because the Chef server environment is reset between each Test Kitchen run, your node attributes are not preserved. This can cause problems when you run `kitchen converge` multiple times on the same test instance because your node attributes (for example, the database passwords) won't match the existing configuration.

Other reasons you might specify the passwords during development are to support testing and debugging. For example, if your database is not configured as you expect, it may be easier to connect to the database to troubleshoot the issue using an easy to remember password that you specify.

You can override node attributes in the `attributes` section of your <% fp '.kitchen.yml' %> file. Test Kitchen sets these attributes before your cookbooks runs. Modify your copy to look like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.34.34"}]

provisioner:
  name: chef_zero

platforms:
  - name: ubuntu-14.04

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_ubuntu::default]
    attributes:
      awesome_customers_ubuntu:
        database:
          root_password: 'mysql_root_password'
          admin_password: 'mysql_admin_password'
```

This syntax might look strange because you're used to writing node attributes using Ruby syntax. The Test Kitchen configuration file uses [YAML](http://yaml.org).

Remember, Test Kitchen is only involved during cookbook development and not when your cookbook is applied to a node that's managed by a Chef server. That's why your <% fp '.kitchen.yml' %> file is a safe place to store test passwords.

[COMMENT] Use basic names for your passwords while in development mode. Never use passwords that might appear on your production systems.

[END_BOX]
