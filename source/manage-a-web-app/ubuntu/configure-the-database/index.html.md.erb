---
title: 'Configure the database'
order: 9
keywords: TODO
sections: []
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
[HEADLINE] Refactoring your cookbook code helps separate your logic from your data, making them more general and reusable.

Now let's configure a database instance named `my_company`. You'll also assign a user to the database, create a table named `customers` to hold customer data, and fill the `customers` table with some sample data.

In the previous part, you used the `mysql` cookbook to set up the MySQL installation. For this part, we'll use the [database](https://supermarket.chef.io/cookbooks/database) cookbook from Chef Supermarket, which enables us to configure MySQL database instances.

The `database` cookbook uses the [mysql2](https://rubygems.org/gems/mysql2/versions/0.4.3) Ruby library (a Ruby library is often packaged as a [gem](http://guides.rubygems.org/what-is-a-gem/)) to connect to MySQL. To install this gem, we'll use the [mysql2\_chef_gem](https://supermarket.chef.io/cookbooks/mysql2_chef_gem) cookbook.

[START_BOX]

## 1. Reference the mysql2\_chef_gem and database cookbooks

Like you did before, append two `depends` statement for the `mysql2_chef_gem` and `database` cookbooks to <code class="file-path">metadata.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/metadata.rb
name 'awesome_customers_ubuntu'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_ubuntu'
long_description 'Installs/Configures awesome_customers_ubuntu'
version '0.1.0'

depends 'apt', '~> 4.0'
depends 'firewall', '~> 2.5'
depends 'httpd', '~> 0.4'
depends 'mysql', '~> 7.0'
depends 'mysql2_chef_gem', '~> 1.1'
depends 'database', '~> 6.0'
```

[COMMENT] Don't confuse the `database` cookbook from Chef Supermarket with your `database` recipe.

[END_BOX]

[START_BOX]

## 2. Install the mysql2 Ruby gem

Append the following to your `database` recipe, <% fp 'database.rb' %>. This code uses the `mysql2_chef_gem` resource to install the `mysql2` Ruby gem.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end
```

The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_ubuntu']['database']['root_password']
  action [:create, :start]
end

# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end
```

[END_BOX]

[START_BOX]

## 3. Create the database instance

Now we can set up the database instance. We'll name our database `my_company`.

Let's continue the pattern we've learned of directly stating the configuration we want, and then going back and factoring our data from our policy.

To set up your database, you'll use the `mysql_database` resource, which comes from the `database` cookbook. Append the following code to <% fp 'database.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Create the database instance.
mysql_database 'my_company' do
  connection(
    :host => '127.0.0.1',
    :username => 'root',
    :password => 'mysql_root_password'
  )
  action :create
end
```

This code configures a database named `my_company`. The `connection` attribute specifies how to connect to the database server. Because the database server exists on the local instance, we specify 127.0.0.1 (localhost) as the hostname. We also specify the logon credentials for the root account.

[WARN] Remember to never hard-code passwords in your recipes. We'll replace it with our node attributes in the next step.

### Refactor the database configuration

Let's factor your data so that your recipe is more reusable and doesn't use a hard-coded password. We'll factor out the database name and the connection info (hostname and username).

Append the following to your default attributes file, <code class="file-path">default.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['awesome_customers_ubuntu']['database']['dbname'] = 'my_company'
default['awesome_customers_ubuntu']['database']['host'] = '127.0.0.1'
default['awesome_customers_ubuntu']['database']['root_username'] = 'root'
```

The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
def random_password
  require 'securerandom'
  SecureRandom.base64
end

default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
default['awesome_customers_ubuntu']['document_root'] = '/var/www/customers/public_html'

normal_unless['awesome_customers_ubuntu']['database']['root_password'] = random_password
normal_unless['awesome_customers_ubuntu']['database']['admin_password'] = random_password
default['awesome_customers_ubuntu']['database']['dbname'] = 'my_company'
default['awesome_customers_ubuntu']['database']['host'] = '127.0.0.1'
default['awesome_customers_ubuntu']['database']['root_username'] = 'root'
```

Replace your hard-coded values with your custom attributes, like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Create the database instance.
mysql_database node['awesome_customers_ubuntu']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  action :create
end
```

<code class="file-path">database.rb</code> now looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_ubuntu']['database']['root_password']
  action [:create, :start]
end

# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end

# Create the database instance.
mysql_database node['awesome_customers_ubuntu']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  action :create
end
```

[END_BOX]

[START_BOX]

## 4. Create a MySQL database user

Like we did for your Apache site's default home page, let's assign a user to your database who has just enough permissions to modify the system.

We created the Apache user in two separate steps. First, we used the `user` resource to create the user. Then we used the `owner` attribute to specify this user as the owner of the home page. However, for our database, the `database` cookbook provides the `mysql_database_user` resource that does everything for us.

Here's a basic way to set up a user named `db_admin`. Append this code to <% fp 'database.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Add a database user.
mysql_database_user 'db_admin' do
  connection(
    :host => '127.0.0.1',
    :username => 'root',
    :password => 'mysql_root_password'
  )
  password 'mysql_admin_password'
  database_name 'my_company'
  host '127.0.0.1'
  action [:create, :grant]
end
```

This code sets up the `db_admin` user with `CREATE` and `GRANT` permissions to the `my_company` database. It also sets the user's initial password.

Let's perform a similar process to separate the logic from the data. We already know how to update the connection info. We also already have node attributes that define the hostname and database name, and we already have access to the database passwords.

All we need to do is create a node attribute for the name of the user.

### Refactor the MySQL database user configuration

Append the following to your default attributes file, <code class="file-path">default.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['awesome_customers_ubuntu']['database']['admin_username'] = 'db_admin'
```

The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
def random_password
  require 'securerandom'
  SecureRandom.base64
end

default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
default['awesome_customers_ubuntu']['document_root'] = '/var/www/customers/public_html'

normal_unless['awesome_customers_ubuntu']['database']['root_password'] = random_password
normal_unless['awesome_customers_ubuntu']['database']['admin_password'] = random_password
default['awesome_customers_ubuntu']['database']['dbname'] = 'my_company'
default['awesome_customers_ubuntu']['database']['host'] = '127.0.0.1'
default['awesome_customers_ubuntu']['database']['root_username'] = 'root'
default['awesome_customers_ubuntu']['database']['admin_username'] = 'db_admin'
```

Now refactor your `mysql_database_user` resource by replacing the data with the appropriate node attributes.


```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Add a database user.
mysql_database_user node['awesome_customers_ubuntu']['database']['admin_username'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  password node['awesome_customers_ubuntu']['database']['admin_password']
  database_name node['awesome_customers_ubuntu']['database']['dbname']
  host node['awesome_customers_ubuntu']['database']['host']
  action [:create, :grant]
end
```

The entire `database` recipe now looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_ubuntu']['database']['root_password']
  action [:create, :start]
end

# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end

# Create the database instance.
mysql_database node['awesome_customers_ubuntu']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  action :create
end

# Add a database user.
mysql_database_user node['awesome_customers_ubuntu']['database']['admin_username'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  password node['awesome_customers_ubuntu']['database']['admin_password']
  database_name node['awesome_customers_ubuntu']['database']['dbname']
  host node['awesome_customers_ubuntu']['database']['host']
  action [:create, :grant]
end
```

[END_BOX]

[START_BOX]

## 5. Create a database table and some sample data

Now the `my_company` database is set up, along with a user to manage it. Next, let's create a database table along with some sample data.

We'll create a MySQL script that defines the table and our sample data, and then invoke that script from our recipe.

From your <% fp '~/learn-chef' %> directory, start by running the following `chef generate file` command to create a file that will hold the script.

```bash
# ~/learn-chef
$ chef generate file cookbooks/awesome_customers_ubuntu create-tables.sql
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::cookbook_file
  * directory[cookbooks/awesome_customers_ubuntu/files/default] action create
    - create new directory cookbooks/awesome_customers_ubuntu/files/default
  * template[cookbooks/awesome_customers_ubuntu/files/default/create-tables.sql] action create
    - create new file cookbooks/awesome_customers_ubuntu/files/default/create-tables.sql
    - update content in file cookbooks/awesome_customers_ubuntu/files/default/create-tables.sql from none to e3b0c4
    (diff output suppressed by config)
```

Now modify <code class="file-path">create-tables.sql</code> like this.

```sql
-- ~/learn-chef/cookbooks/awesome_customers_ubuntu/files/default/create-tables.sql

CREATE TABLE customers(
  id CHAR (36) NOT NULL,
  PRIMARY KEY(id),
  first_name VARCHAR(64),
  last_name VARCHAR(64),
  email VARCHAR(64)
);

INSERT INTO customers ( id, first_name, last_name, email ) VALUES ( uuid(), 'Jane', 'Smith', 'jane.smith@example.com' );
INSERT INTO customers ( id, first_name, last_name, email ) VALUES ( uuid(), 'Dave', 'Richards', 'dave.richards@example.com' );
```

Next, we'll use the built-in [cookbook_file](https://docs.chef.io/resource_cookbook_file.html) resource to copy your SQL script to a temporary directory. We'll refer to the full path to <code class="file-path">create-database.sql</code> multiple times in our recipe, so let's create a variable that defines the location one time, but we can reference multiple times. Append the following to your `database` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')
```

This code uses `Chef::Config[:file_cache_path]` to read the location of the Chef cache from the [chef-client configuration file](https://docs.chef.io/config_rb_client.html). Although the location of the Chef cache can vary, it's typically located at <code class="file-path">/var/chef/cache</code> on Linux.

Next, append this to <code class="file-path">database.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Write the SQL script to the filesystem.
cookbook_file create_tables_script_path do
  source 'create-tables.sql'
  owner 'root'
  group 'root'
  mode '0600'
end
```

In the first tutorial, _Learn the Chef basics_, you [used the file resource](/tutorials/learn-the-basics/ubuntu/free/configure-a-resource#step2) to set up a file. When you used the `file` resource, you specified the contents of the file directly in your recipe. The `cookbook_file` resource transfers an external file in your cookbook to a destination on your node.

Next, we'll use the `execute` resource to run the script. Append the following to <% fp 'database.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Seed the database with a table and test data.
execute 'initialize my_company database' do
  command "mysql -h 127.0.0.1 -u db_admin -pdatabase_password -D my_company < /tmp/create-tables.sql"
  not_if  "mysql -h 127.0.0.1 -u db_admin -pdatabase_password -D my_company -e 'describe customers;'"
end
```

No resource type exists that can execute a SQL script. That's why we use the `execute` resource. The `execute` resource enables you to run any arbitrary command.

Remember that Chef takes a test and repair approach to how it keeps your servers in line with your policy. Therefore, you want to be able to run your cookbook as many times as you like and only update the system when necessary.

That's where the `execute` resource's `not_if` attribute comes in. The `not_if` attribute is an example of a [guard](https://docs.chef.io/resource_common.html#guards). A guard enables you to execute a resource based on a condition. In our case, we don't want to run the script if the `customers` table already exists.

[COMMENT] `not_if` _prevents_ a resource from executing if its result holds true. There's also `only_if`, which executes the resource _only if_ its result holds true.

<% accordion('sql-script', 'Should the SQL script be more granular?') do %>

<%= partial 'manage-a-web-app/shared/sql-script' %>

<% end %>
<br>

### Refactor the database table creation

Like we've done before, let's look at how we can factor out the data.

We can factor out most parts of your `execute` resource, such as the hostname, username, and password. We already have the node attributes to describe those, so we're ready to modify the recipe.

Make your `execute` resource look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Seed the database with a table and test data.
execute "initialize #{node['awesome_customers_ubuntu']['database']['dbname']} database" do
  command "mysql -h #{node['awesome_customers_ubuntu']['database']['host']} -u #{node['awesome_customers_ubuntu']['database']['admin_username']} -p#{node['awesome_customers_ubuntu']['database']['admin_password']} -D #{node['awesome_customers_ubuntu']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['awesome_customers_ubuntu']['database']['host']} -u #{node['awesome_customers_ubuntu']['database']['admin_username']} -p#{node['awesome_customers_ubuntu']['database']['admin_password']} -D #{node['awesome_customers_ubuntu']['database']['dbname']} -e 'describe customers;'"
end
```

The entire recipe looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_ubuntu']['database']['root_password']
  action [:create, :start]
end

# Install the mysql2 Ruby gem.
mysql2_chef_gem 'default' do
  action :install
end

# Create the database instance.
mysql_database node['awesome_customers_ubuntu']['database']['dbname'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  action :create
end

# Add a database user.
mysql_database_user node['awesome_customers_ubuntu']['database']['admin_username'] do
  connection(
    :host => node['awesome_customers_ubuntu']['database']['host'],
    :username => node['awesome_customers_ubuntu']['database']['root_username'],
    :password => node['awesome_customers_ubuntu']['database']['root_password']
  )
  password node['awesome_customers_ubuntu']['database']['admin_password']
  database_name node['awesome_customers_ubuntu']['database']['dbname']
  host node['awesome_customers_ubuntu']['database']['host']
  action [:create, :grant]
end

# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')

# Write the SQL script to the filesystem.
cookbook_file create_tables_script_path do
  source 'create-tables.sql'
  owner 'root'
  group 'root'
  mode '0600'
end

# Seed the database with a table and test data.
execute "initialize #{node['awesome_customers_ubuntu']['database']['dbname']} database" do
  command "mysql -h #{node['awesome_customers_ubuntu']['database']['host']} -u #{node['awesome_customers_ubuntu']['database']['admin_username']} -p#{node['awesome_customers_ubuntu']['database']['admin_password']} -D #{node['awesome_customers_ubuntu']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['awesome_customers_ubuntu']['database']['host']} -u #{node['awesome_customers_ubuntu']['database']['admin_username']} -p#{node['awesome_customers_ubuntu']['database']['admin_password']} -D #{node['awesome_customers_ubuntu']['database']['dbname']} -e 'describe customers;'"
end
```

[END_BOX]

[START_BOX]

## 6. Apply and verify the configuration

Let's apply the configuration and verify that `my_company` database, `db_admin` user, and `customers` table are properly configured.

First, run `kitchen converge` to apply the `awesome_customers_ubuntu` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.7.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.9.38
       resolving cookbooks for run list: ["awesome_customers_ubuntu::default"]
       Synchronizing Cookbooks:
         - awesome_customers_ubuntu (0.1.0)
         - apt (2.9.2)
         - firewall (2.4.0)
         - httpd (0.4.4)
         - mysql (7.0.0)
         - mysql2_chef_gem (1.1.0)
         - chef-sugar (3.3.0)
         - database (5.1.2)
         - yum-mysql-community (0.2.0)
         - compat_resource (12.9.1)
         - smf (2.2.8)
         - build-essential (3.2.0)
         - mariadb (0.3.1)
         - postgresql (4.0.6)
         - seven_zip (2.0.0)
         - rbac (1.0.3)
         - yum-epel (0.6.6)
         - yum (3.10.0)
         - openssl (4.4.0)
         - chef_handler (1.3.0)
         - windows (1.40.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
[...]
       Recipe: awesome_customers_ubuntu::database
         * mysql_database[my_company] action create
           - Creating schema 'my_company'
         * mysql_database_user[db_admin] action create
           - Creating user 'db_admin'@'127.0.0.1'
         * mysql_database_user[db_admin] action grant
           - Granting privs for 'db_admin'@'127.0.0.1'
         * cookbook_file[/tmp/create-tables.sql] action create
           - create new file /tmp/create-tables.sql
           - update content in file /tmp/create-tables.sql from none to 326217
           --- /tmp/create-tables.sql	2016-04-25 18:45:05.953642500 +0000
           +++ /tmp/.chef-create-tables.sql20160425-29022-zj6f77	2016-04-25 18:45:05.950641000 +0000
           @@ -1 +1,11 @@
           +CREATE TABLE customers(
           +  id CHAR (36) NOT NULL,
           +  PRIMARY KEY(id),
           +  first_name VARCHAR(64),
           +  last_name VARCHAR(64),
           +  email VARCHAR(64)
           +);
           +
           +INSERT INTO customers ( id, first_name, last_name, email ) VALUES ( uuid(), 'Jane', 'Smith', 'jane.smith@example.com' );
           +INSERT INTO customers ( id, first_name, last_name, email ) VALUES ( uuid(), 'Dave', 'Richards', 'dave.richards@example.com' );
           - change mode from '' to '0600'
           - change owner from '' to 'root'
           - change group from '' to 'root'
           - restore selinux security context
         * execute[initialize my_company database] action run
           - execute mysql -h 127.0.0.1 -u db_admin -pmysql_admin_password -D my_company < /tmp/create-tables.sql
       Recipe: firewall::default
         * firewall[default] action restart
            (skipped due to only_if)
         * file[/etc/sysconfig/firewalld-chef.rules] action create (up to date)
       [2016-04-25T18:45:06+00:00] WARN: Cloning resource attributes for service[firewalld] from prior resource (CHEF-3694)
       [2016-04-25T18:45:06+00:00] WARN: Previous service[firewalld]: /tmp/kitchen/cache/cookbooks/firewall/libraries/provider_firewall_firewalld.rb:38:in `block (2 levels) in <class:FirewallFirewalld>'
       [2016-04-25T18:45:06+00:00] WARN: Current  service[firewalld]: /tmp/kitchen/cache/cookbooks/firewall/libraries/provider_firewall_firewalld.rb:92:in `block in <class:FirewallFirewalld>'
          (up to date)

       Running handlers:
       Running handlers complete
       Chef Client finished, 18/203 resources updated in 01 minutes 59 seconds
       Finished converging <default-centos-72> (2m11.03s).
```

Now let's verify the database configuration. Start by logging in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen login
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 4.2.0-34-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Tue Apr 26 02:18:48 2016 from 10.0.2.2
```

First, verify that the `my_company` database exists.

```bash
vagrant@default-ubuntu-1404:~$ mysqlshow -h 127.0.0.1 -uroot -pmysql_root_password
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| my_company         |
| mysql              |
| performance_schema |
+--------------------+
```

`my_company` is listed as a database name.

Now verify that `db_admin` is enabled as a local database user.

```bash
vagrant@default-ubuntu-1404:~$ mysql -h 127.0.0.1 -uroot -pmysql_root_password -e "select user,host from mysql.user;"
+----------+-----------+
| user     | host      |
+----------+-----------+
| db_admin | 127.0.0.1 |
| root     | 127.0.0.1 |
| root     | localhost |
+----------+-----------+
```

Verify that `db_admin` has rights only to the `my_company` database.

```bash
vagrant@default-ubuntu-1404:~$ mysql -h 127.0.0.1 -uroot -pmysql_root_password -e "show grants for 'db_admin'@'127.0.0.1';"
+-----------------------------------------------------------------------------------------------------------------+
| Grants for db_admin@127.0.0.1                                                                                   |
+-----------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'db_admin'@'127.0.0.1' IDENTIFIED BY PASSWORD '*7D00AE6DAE54CE691B56CA4B715D29B21AB0D16F' |
| GRANT ALL PRIVILEGES ON `my_company`.* TO 'db_admin'@'127.0.0.1'                                                |
+-----------------------------------------------------------------------------------------------------------------+
```

Finally, verify the `customers` database table exists and contains the sample data.

```bash
vagrant@default-ubuntu-1404:~$ mysql -h 127.0.0.1 -uroot -pmysql_root_password -Dmy_company -e "select id,first_name from customers;"
+----------------------------------+------------+
| id                               | first_name |
+----------------------------------+------------+
| 62d40288-d06c-11e5-8167-080027c9 | Jane       |
| 62d4397d-d06c-11e5-8167-080027c9 | Dave       |
+----------------------------------+------------+
```

"Jane" and "Dave" match the first names that we provided in your SQL script.

Everything checks out! Now log out.

```bash
# ~
vagrant@default-ubuntu-1404:~$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]
