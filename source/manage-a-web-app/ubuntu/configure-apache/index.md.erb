---
title: 'Configure Apache'
order: 6
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 25 minutes
---
Now let's configure Apache. Here you'll install the Apache package, start its service, create and enable our custom site, and create a default home page for our site.

In [Learn the basics](/learn-the-basics/ubuntu) and [Manage a node](/manage-a-node/ubuntu/), you wrote a basic Apache cookbook from scratch. For this project, we want to leverage additional Apache features, which would take some effort to set up.

That's where the [httpd](https://supermarket.chef.io/cookbooks/httpd) cookbook on Chef Supermarket comes in. The `httpd` cookbook provides common functionality such as setting up virtual hosting so you don't have to reinvent the wheel.

[START_BOX]

## 1. Reference the httpd cookbook

As you did for the `apt` and `firewall` cookbooks, add the dependency for the `httpd` cookbook to your <code class="file-path">metadata.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/metadata.rb
name 'awesome_customers_ubuntu'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_ubuntu'
long_description 'Installs/Configures awesome_customers_ubuntu'
version '0.1.0'

depends 'apt', '~> 2.9.2'
depends 'firewall', '~> 2.4.0'
depends 'httpd', '~> 0.3.4'
```

Remember, you can get the latest version of a community cookbook from its page on Chef Supermarket or by running the `knife cookbook site show` command, like this.

```bash
# ~/learn-chef
$ knife cookbook site show httpd | grep latest_version
latest_version:     https://supermarket.chef.io/api/v1/cookbooks/httpd/versions/0.3.4
```

[END_BOX]

[START_BOX]

## 2. Write the web recipe

Remember, our goals for configuring Apache are to:

* install the Apache package and start and enable its service.
* create and enable our custom site.
* create a default home page for our site.

We'll call our custom site `customers`, and we'll store it in the <code class="file-path">/var/www/customers/public_html</code> directory.

The first step is to create the recipe file, <code class="file-path">web.rb</code>. Run the following command to generate it.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_ubuntu web
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_ubuntu/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_ubuntu/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_ubuntu/spec/unit/recipes/web_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/web_spec.rb
    - update content in file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/web_spec.rb from none to 88bb80
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_ubuntu/recipes/web.rb] action create
    - create new file cookbooks/awesome_customers_ubuntu/recipes/web.rb
    - update content in file cookbooks/awesome_customers_ubuntu/recipes/web.rb from none to 9709e5
    (diff output suppressed by config)
```

Although we're not yet set up to run PHP code, we can create an initial home page named <code class="file-path">index.html</code> that contains plain HTML as a placeholder. Earlier, we set up a user, `web_admin`, who has access to the site's content. We'll configure the home page so that the `web_admin` user has read and write access, and everyone else has read-only access.

We'll use the `httpd_service` and `httpd_config` resources, which are defined by the `httpd` cookbook, to set up the `customer` site.

The `httpd_service` resource ensures that the Apache package is installed and gets the service up and running. The `httpd_config` resource copies the configuration file for the `customers` site to the appropriate location. For the home page, we'll use the `file` resource that you're already familiar with.

Write out <code class="file-path">web.rb</code> like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/web.rb
# Install Apache and start the service.
httpd_service 'customers' do
  mpm 'prefork'
  action [:create, :start]
end

# Add the site configuration.
httpd_config 'customers' do
  instance 'customers'
  source 'customers.conf.erb'
  notifies :restart, 'httpd_service[customers]'
end

# Create the document root directory.
directory '/var/www/customers/public_html' do
  recursive true
end

# Write the home page.
file '/var/www/customers/public_html/index.html' do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner 'web_admin'
  group 'web_admin'
end
```

The `httpd_service` resource supports multiple simultaneous Apache instances that you can identify and manage. The name `customers` will produce a service named `httpd-customers`.

[COMMENT] PHP [must be run](http://www.php.net/manual/en/faq.installation.php#faq.installation.apache2) in a single-threaded [Multi-Processing Module](http://httpd.apache.org/docs/2.2/mpm.html), or MPM. Therefore, we set the `mpm` attribute to use the [prefork](http://httpd.apache.org/docs/2.2/mod/prefork.html) module.

[END_BOX]

[START_BOX]

## 3. Refactor the web recipe

For this project, let's say that the location of the home page &ndash; <code class="file-path">/var/www/customers/public_html</code> &ndash; and its owner &ndash; `web_admin` &ndash; might change. To make this recipe more manageable, let's factor out those parts into custom node attributes.

To do so, you'll go back to your attributes file, <code class="file-path">default.rb</code>, and create a few custom attributes to describe these parts.

We've already defined the user name and group for your site's content. Let's add another node attribute that defines the path to the document root.

Append a node attribute to your default attributes file <code class="file-path">default.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
default['awesome_customers_ubuntu']['document_root'] = '/var/www/customers/public_html'
```

Now we have values to use in our recipe. Now go back and modify <code class="file-path">web.rb</code> like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/web.rb
# Install Apache and start the service.
httpd_service 'customers' do
  mpm 'prefork'
  action [:create, :start]
end

# Add the site configuration.
httpd_config 'customers' do
  instance 'customers'
  source 'customers.conf.erb'
  notifies :restart, 'httpd_service[customers]'
end

# Create the document root directory.
directory node['awesome_customers_ubuntu']['document_root'] do
  recursive true
end

# Write the home page.
file "#{node['awesome_customers_ubuntu']['document_root']}/index.html" do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner node['awesome_customers_ubuntu']['user']
  group node['awesome_customers_ubuntu']['group']
end
```

The `web` recipe now uses the node attributes for the user and group names and the document root.

[RUBY] The `"#{}"` notation specifies that _string interpolation_ should be performed. String interpolation enables you to replace placeholders within a string with the values they represent. Placeholders can be variables or any block of Ruby code.

[END_BOX]

[START_BOX]

## 4. Create the configuration file

In your recipe you referenced your Apache site's configuration file. Now we need to create this file. We'll do that by creating a Chef template so we can provide placeholders that are filled in with custom node attributes when the recipe runs.

First, run this command to create your template file, <code class="file-path">customers.conf.erb</code>.

```bash
# ~/learn-chef
$ chef generate template cookbooks/awesome_customers_ubuntu customers.conf
Compiling Cookbooks...
Recipe: code_generator::template
  * directory[cookbooks/awesome_customers_ubuntu/templates/default] action create
    - create new directory cookbooks/awesome_customers_ubuntu/templates/default
  * template[cookbooks/awesome_customers_ubuntu/templates/default/customers.conf.erb] action create
    - create new file cookbooks/awesome_customers_ubuntu/templates/default/customers.conf.erb
    - update content in file cookbooks/awesome_customers_ubuntu/templates/default/customers.conf.erb from none to e3b0c4
    (diff output suppressed by config)
```

This command adds the template file <code class="file-path">customers.conf.erb</code> to the<br><code class="file-path">~/learn-chef/cookbooks/awesome\_customers_ubuntu/templates/default</code> directory. Remember, the <code class="file-path">.erb</code> extension means that the file can hold placeholders that are filled in when the recipe runs. That's what makes the file a template.

Add this to <code class="file-path">customers.conf.erb</code>.

<%= partial 'customers-conf' %>

The configuration file uses two node attributes &ndash; `node['hostname']` and `node['awesome_customers_ubuntu']['document_root']`.

`node['hostname']` is one of many [built-in node attributes](https://docs.chef.io/ohai.html#automatic-attributes) that Chef provides for you. This attribute defines the node's host name.

`node['awesome_customers_ubuntu']['document_root']` defines the site's document root, and is the node attribute that you used in the previous step to set up the home page.

[END_BOX]

[START_BOX]

## 5. Set the web recipe to run

To run the `web` recipe, append an `include_recipe` line to your cookbook's default recipe, just like you did for your `user` recipe. Make the entire default recipe look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/default.rb
include_recipe 'apt::default'
include_recipe 'awesome_customers_ubuntu::firewall'
include_recipe 'awesome_customers_ubuntu::web_user'
include_recipe 'awesome_customers_ubuntu::web'
```

[END_BOX]

[START_BOX]

## 6. Apply and verify the configuration

Like you did previously, run the cookbook and verify that it's configured as we expect. Run `kitchen converge` to apply the `awesome_customers_ubuntu` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.6.0
       resolving cookbooks for run list: ["awesome_customers_ubuntu::default"]
       Synchronizing Cookbooks:
         - awesome_customers_ubuntu (0.1.0)
         - firewall (2.4.0)
         - apt (2.9.2)
         - httpd (0.3.4)
         - chef-sugar (3.3.0)
         - compat_resource (12.7.1)
       Compiling Cookbooks...
[...]
          * apt_package[apache2] action install
             - install version 2.4.7-1ubuntu4.9 of package apache2
           * service[apache2] action stop
             - stop service service[apache2]
           * service[apache2] action disable
             - disable service service[apache2]

             - create new directory /var/cache/apache2-customers
             - change mode from '' to '0755'
             - change owner from '' to 'root'
             - change group from '' to 'root'
           * directory[/var/log/apache2-customers] action create
             - create new directory /var/log/apache2-customers
[...]
           * service[apache2-customers] action start
             - start service service[apache2-customers]
           * service[apache2-customers] action enable
             - enable service service[apache2-customers]
[...]
         * file[/var/www/customers/public_html/index.html] action create
           - create new file /var/www/customers/public_html/index.html
           - update content in file /var/www/customers/public_html/index.html from none to a02c68
           --- /var/www/customers/public_html/index.html	2016-02-10 21:10:44.772087000 +0000
           +++ /var/www/customers/public_html/.index.html20160210-5727-1lhm3n2	2016-02-10 21:10:44.772087000 +0000
           @@ -1 +1,2 @@
           +<html>This is a placeholder</html>
           - change mode from '' to '0644'
           - change owner from '' to 'web_admin'
           - change group from '' to 'web_admin'
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 94/186 resources updated in 16 seconds
       Finished converging <default-ubuntu-1404> (0m19.06s).
-----> Kitchen is finished. (0m19.64s)
```

You'll see from the output that:

* the Apache package, `apache2` on Ubuntu, was installed.
* the `httpd-customers` service was started and enabled.
* the Apache configuration template was applied, replacing the specified node attributes with their values.
* the home page was written to <code class="file-path">/var/www/customers/public_html/index.html</code>.
* the `web_admin` user was assigned as owner of the home page file and the file's mode was set to 0644.

Now let's verify the web server configuration. Recall that your Test Kitchen configuration file specifies an IP address of 192.168.34.34 for the instance.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.34.34"}]

provisioner:
  name: chef_zero

platforms:
  - name: ubuntu-14.04
    driver:
      customize:
        memory: 256

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_ubuntu::default]
    attributes:
```

From a web browser on your workstation, navigate to http://192.168.34.34. You'll see something like this.

![](misc/manage_customers_placeholder_34.png)

Now let's log in to the instance and verify that the configuration is exactly as we expect. Run `kitchen login` to log in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen login
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Wed Feb 10 21:10:29 2016 from 10.0.2.2
vagrant@default-ubuntu-1404:~$
```

First, verify that `web_admin` owns the default home page and that the home page has the proper file mode (0644).

```bash
vagrant@default-ubuntu-1404:~$ stat -c "%A (%a) %U %G" /var/www/customers/public_html/index.html
-rw-r--r-- (644) web_admin web_admin
```

Now verify that the `httpd-customers` service is running.

```bash
# ~
vagrant@default-ubuntu-1404:~$ sudo service apache2-customers status
 * apache2 is running
```

Finally, verify that the home page is in the location we expect.

```bash
# ~
vagrant@default-ubuntu-1404:~$ more /var/www/customers/public_html/index.html
<html>This is a placeholder</html>
```

Now log out.

```bash
# ~
vagrant@default-ubuntu-1404:~$ logout
Connection to 127.0.0.1 closed.
```

[COMMENT] So far, you've verified each step manually. But as you add new features, you'll want to ensure that you're not breaking existing functionality. It would become tedious to verify your entire configuration from scratch every time you make a change. In the next tutorial, [Test your infrastructure code](/test-your-infrastructure-code/ubuntu/), you'll learn how to automate the testing process. With automated tests, you write your tests one time and then run them anytime you need to verify that your entire configuration works as expected.

[END_BOX]
