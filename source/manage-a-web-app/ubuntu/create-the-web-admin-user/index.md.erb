---
title: 'Create the web admin user'
order: 5
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
---
It's a common practice to run your applications and services under a user who has enough access to modify the system, but who is not a root user. So let's write a recipe that creates the `web_admin` user who belongs to the `web_admin` group. Later, we'll make the `web_admin` user the owner of the content files for your web site.

[START_BOX]

## 1. Create the web_user recipe

First, from the <% fp('~/learn-chef') %> directory, create a recipe named `web_user`.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_ubuntu web_user
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_ubuntu/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_ubuntu/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_ubuntu/spec/unit/recipes/web_user_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/web_user_spec.rb
    - update content in file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/web_user_spec.rb from none to 699d09
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_ubuntu/recipes/web_user.rb] action create
    - create new file cookbooks/awesome_customers_ubuntu/recipes/web_user.rb
    - update content in file cookbooks/awesome_customers_ubuntu/recipes/web_user.rb from none to a76a50
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 2. Set the user's data attributes

Now let's define the `web_admin` user. To do this, we'll use the built-in [group](https://docs.chef.io/resource_group.html) and [user](https://docs.chef.io/resource_user.html) resources. One way to define the `web_admin` user is like this. Add this code to <% fp('web_user.rb') %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/web_user.rb
group 'web_admin'

user 'web_admin' do
  group 'web_admin'
  system true
  shell '/bin/bash'
end
```

Like the firewall configuration, one problem with this approach is that if you ever want to change the user name or group, you'll have to do it in this recipe and any other recipes that reference those names.

You created a custom attributes file in the previous lesson. Let's refactor things so that the `web_user` recipe defines only the logic and the attributes file defines the data.

[END_BOX]

[START_BOX]

## 3. Set node attributes for the user data

Add the following to your default attributes file, <code class="file-path">default.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
```

These node attributes define the user and group names for the web administrator. Although both names are the same, having separate node attributes gives us the flexibility to easily change that later if needed.

The entire <code class="file-path">default.rb</code> file now looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
```

[END_BOX]

[START_BOX]

## 3. Revise the web_user recipe

Now let's apply the custom node attributes to the `web_user` recipe. Make your copy of <code class="file-path">web_user.rb</code> look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/web_user.rb
group node['awesome_customers_ubuntu']['group']

user node['awesome_customers_ubuntu']['user'] do
  group node['awesome_customers_ubuntu']['group']
  system true
  shell '/bin/bash'
end
```

[END_BOX]

[START_BOX]

## 4. Set the web_user recipe to run

To run the `web_user` recipe, add an `include_recipe` line to your cookbook's default recipe. Make the entire default recipe look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/default.rb
include_recipe 'apt::default'
include_recipe 'awesome_customers_ubuntu::firewall'
include_recipe 'awesome_customers_ubuntu::web_user'
```

[END_BOX]

[START_BOX]

## 5. Apply and verify the configuration

Like you did previously, run the cookbook and verify that the system's configured as we expect. Run `kitchen converge` to apply the `awesome_customers_ubuntu` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
[...]
       Recipe: awesome_customers_ubuntu::web_user
         * group[web_admin] action create
           - create group web_admin
         * user[web_admin] action create
           - create user web_admin
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 5/29 resources updated in 01 seconds
       Finished converging <default-ubuntu-1404> (0m3.13s).
-----> Kitchen is finished. (0m3.73s)
```

You'll see from the output that the "web_admin" user and group were created.

Let's log in to the instance and verify the configuration. Run `kitchen login` to log in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen login
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Fri Feb  5 20:50:18 2016 from 10.0.2.2
vagrant@default-ubuntu-1404:~$
```

Now fetch details for "web_admin" from the user database.

```bash
# ~
vagrant@default-ubuntu-1404:~$ getent passwd web_admin
web_admin:x:998:1000::/home/web_admin:/bin/bash
```

The output breaks down like this:

* **web_admin**: user's login name
* **x**: encrypted password indicator
* **998**: user's user ID
* **1000**: user's numerical group ID
* **/home/web_admin**: user's home directory
* **/bin/bash**: user's command interpreter, or shell

You'll see that "web\_admin" exists and has the shell we specified, `/bin/bash`. As a final check, run this command to verify that the group ID refers to the group name "web\_admin".

```bash
vagrant@default-ubuntu-1404:~$ getent passwd web_admin | cut -d: -f4 | xargs getent group | cut -d: -f1
web_admin
```

Everything checks out. Now log out.

```bash
# ~
vagrant@default-ubuntu-1404:~$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]
