---
title: 'Configure the firewall'
order: 4
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
---
Now let's configure the firewall. You need inbound access on port 22 (SSH) so that you can run `chef-client` remotely from your workstation and so that you can log in and verify that your server is configured as we expect. You also need inbound access on port 80 (HTTP) so users can access your web site.

The easiest way to set firewall rules is to use the [firewall](https://supermarket.chef.io/cookbooks/firewall) cookbook from Chef Supermarket. The `firewall` cookbook works on multiple platforms; on Ubuntu, it configures [Uncomplicated Firewall](https://help.ubuntu.com/community/UFW), or UFW.

[START_BOX]

## 1. Reference the firewall cookbook

First, modify <code class="file-path">metadata.rb</code> to load the `firewall` cookbook.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/metadata.rb
name 'awesome_customers_ubuntu'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_ubuntu'
long_description 'Installs/Configures awesome_customers_ubuntu'
version '0.1.0'

depends 'apt', '~> 4.0'
depends 'firewall', '~> 2.4'
```

[END_BOX]

[START_BOX]

## 2. Create the firewall recipe

Now create a recipe that defines the firewall rules. From your <% fp('~/learn-chef') %> directory, run this `chef generate recipe` command to create a recipe named `firewall`.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_ubuntu firewall
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_ubuntu/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_ubuntu/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_ubuntu/spec/unit/recipes/firewall_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/firewall_spec.rb
    - update content in file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/firewall_spec.rb from none to 2d8fd2
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_ubuntu/recipes/firewall.rb] action create
    - create new file cookbooks/awesome_customers_ubuntu/recipes/firewall.rb
    - update content in file cookbooks/awesome_customers_ubuntu/recipes/firewall.rb from none to 5b9d18
    (diff output suppressed by config)
```

At this point, there are two things that are named "firewall" &ndash; the `firewall` cookbook from Chef Supermarket and your `awesome_customers_ubuntu::firewall` recipe.

[END_BOX]

[START_BOX]

## 2. Define the firewall rules

A cookbook can define resource types for other cookbooks to use. The `firewall` cookbook provides the `firewall_rule` resource, which enables you to define firewall rules. At the end of the `chef-client` run, the firewall is restarted to reflect any changed rules.

Add this code to <% fp('firewall.rb') %> (your `firewall` recipe) to open ports 22 and 80. You'll refactor this recipe to be more general in a later step.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/firewall.rb
ports = [22, 80]
firewall_rule "open ports #{ports}" do
  port ports
end
```

One problem with this approach is that if you ever want to change the list of open ports, you'll have to do it in this recipe and any other recipes that reference those ports.

To keep things more manageable, it's a common practice to separate the logic of your recipe from its data and define that data in another place. To do that, we'll define custom _node attributes_.

[END_BOX]

[START_BOX]

## 3. Create the custom attributes file

In [Manage a node](/manage-a-node/ubuntu/), you learned about some of the built-in node attributes that Chef provides, such as the node's IP address. You can also define your own custom attributes that are specific to your policy. Let's create an attributes file that will define all of the custom attributes for your web application cookbook.

Run the following from the <% fp('~/learn-chef') %> directory to create an attributes file named <code class="file-path">default.rb</code>.

```bash
# ~/learn-chef
$ chef generate attribute cookbooks/awesome_customers_ubuntu default
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::attribute
  * directory[cookbooks/awesome_customers_ubuntu/attributes] action create
    - create new directory cookbooks/awesome_customers_ubuntu/attributes
  * template[cookbooks/awesome_customers_ubuntu/attributes/default.rb] action create
    - create new file cookbooks/awesome_customers_ubuntu/attributes/default.rb
    - update content in file cookbooks/awesome_customers_ubuntu/attributes/default.rb from none to e3b0c4
    (diff output suppressed by config)
```

This command adds the <code class="file-path">default.rb</code> attribute file to the<br><code class="file-path">~/learn-chef/cookbooks/awesome\_customers_ubuntu/attributes</code> directory.

Now add the following to your attributes file, <code class="file-path">default.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['firewall']['allow_ssh'] = true
default['awesome_customers_ubuntu']['open_ports'] = 80
```

The first node attribute is provided by the `firewall` cookbook. It specifies to that the `firewall` cookbook's default recipe should open port 22 to allow SSH access.

The `default['awesome_customers_ubuntu']['open_ports']` node attribute (line 2) is a custom node attribute that we define. We specify port 80 to be the additional port to open. We could use the array syntax to specify multiple ports, for example, `[80, 443]`.

[END_BOX]

[START_BOX]

## 4. Revise the firewall recipe

Now let's reference our custom node attributes from our `firewall` recipe. Make your copy of <code class="file-path">firewall.rb</code> look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/firewall.rb
include_recipe 'firewall::default'

ports = node['awesome_customers_ubuntu']['open_ports']
firewall_rule "open ports #{ports}" do
  port ports
end
```

This code:

1. applies the `firewall` cookbook's default recipe, which ensures that port 22 is open.
1. opens the additional ports. Recall that `node['awesome_customers_ubuntu']['open_ports']` specifies port 80.

[END_BOX]

[START_BOX]

## 5. Set the firewall recipe to run

Append an `include_recipe` line to your cookbook's default recipe to set the `firewall` recipe to run. The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/default.rb
include_recipe 'apt::default'
include_recipe 'awesome_customers_ubuntu::firewall'
```

[END_BOX]

[START_BOX]

## 6. Apply and verify the configuration

Like you did for the `apt` configuration, let's run the cookbook and verify that it's configured as we expect. Run `kitchen converge` to apply the `awesome_customers_ubuntu` cookbook.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.7.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.9.38
       resolving cookbooks for run list: ["awesome_customers_ubuntu::default"]
       Synchronizing Cookbooks:
         - awesome_customers_ubuntu (0.1.0)
         - apt (2.9.2)
         - chef-sugar (3.3.0)
         - firewall (2.4.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
[...]
       Recipe: firewall::default
         * firewall[default] action install
           - install ufw, create template for /etc/default
         * apt_package[ufw] action install (up to date)

           - update content in file /etc/default/ufw from e65377 to 1a8632
           --- /etc/default/ufw	2014-02-28 21:50:59.000000000 +0000
           +++ /etc/default/.ufw20160205-7008-15u6182	2016-02-05 18:20:15.434691631 +0000
[...]
         * firewall_rule[allow world to ssh] action create

         * firewall_rule[allow world to winrm] action create (skipped due to only_if)
         * firewall_rule[established] action create (skipped due to only_if)
         * firewall_rule[ipv6_icmp] action create (skipped due to only_if)
       Recipe: awesome_customers_ubuntu::firewall
         * firewall_rule[open ports 80] action create

       Recipe: firewall::default
         * firewall[default] action restart
            (skipped due to only_if)
          (skipped due to only_if)
        (skipped due to only_if)
       * file[/etc/default/ufw-chef.rules] action create
         - update content in file /etc/default/ufw-chef.rules from fa85ee to 7510cb
         --- /etc/default/ufw-chef.rules	2016-02-05 20:35:25.688954672 +0000
         +++ /etc/default/.ufw-chef.rules20160205-5185-1yd8j3v	2016-02-05 20:35:25.712954672 +0000
         @@ -1,2 +1,4 @@
         -# created by chef to allow service to start
         +# position 50
         +ufw allow in proto tcp to any port 22 from 0.0.0.0/0
         +ufw allow in proto tcp to any port 80 from any


       Running handlers:
       Running handlers complete
       Chef Client finished, 14/28 resources updated in 20 seconds
       Finished converging <default-ubuntu-1404> (0m35.06s).
```

You'll see from the output that ports 22 and 80 are open to the firewall.

Let's log in to the instance and verify the firewall configuration. Run `kitchen login` to log in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen login
Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 4.2.0-34-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Tue Apr 26 01:29:57 2016 from 10.0.2.2
vagrant@default-ubuntu-1404:~$
```

Run `sudo ufw status` to verify that UFW is active and allows inbound access on ports 22 (SSH) and 80 (HTTP).

```bash
# ~
vagrant@default-ubuntu-1404:~$ sudo ufw status
Status: active

To                         Action      From
--                         ------      ----
22/tcp                     ALLOW       Anywhere
80/tcp                     ALLOW       Anywhere
80/tcp (v6)                ALLOW       Anywhere (v6)
```

You'll see that ports 22 and 80 are open for inbound traffic.

Now log out.

```bash
# ~
vagrant@default-ubuntu-1404:~$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]
