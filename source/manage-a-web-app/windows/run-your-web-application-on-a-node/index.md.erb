---
title: 'Run your web application on a node'
order: 8
keywords: TODO
layout: lesson
sections: [exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 60 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
Now that you have the Customers web application working on a local test instance through Test Kitchen, you can apply your `awesome_customers_windows` cookbook to a real server, or node.

This part is optional, but it's a good opportunity to practice uploading your cookbooks to Chef server and then applying them to a bootstrapped node. In the process, you'll also learn how to use Berkshelf to automatically identify and resolve dependencies that your cookbook has on other cookbooks.

You'll need to [set up a Chef server account](/manage-a-node/windows/set-up-your-chef-server/) if you don't already have one.

Here are the steps you'll follow:

1. [Bring up a node to manage](#step1)
1. [Upload your cookbooks to Chef server](#step2)
1. [Bootstrap your node](#step3)
1. [Verify the configuration](#step4)
1. [Optionally, clean up your environment](#cleanupyourenvironment)

[START_BOX]

## 1. Bring up a node to manage

Like you did in [Manage a node](/manage-a-node/windows/), bring up a Windows Server 2012 R2 server to manage. Your server can run on spare hardware, a cloud instance, or even a virtual machine.

[Read this page](/manage-a-node/windows/get-a-node-to-bootstrap/) if you need a refresher on how to prepare your node for the bootstrap process.

At this point, your node should have ports 80, 443, 3389, and 5986 open through the firewall. You should have also verified that you can establish a connection to your node using the `knife wsman test` command. You also need your node's host name or public IP address, as well as an account that has Administrator access and its password.

[END_BOX]

[START_BOX]

## 2. Upload your cookbooks to Chef server

Recall that <code class="file-path">metadata.rb</code> references the cookbooks your cookbook depends on.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/metadata.rb
name 'awesome_customers_windows'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_windows'
long_description 'Installs/Configures awesome_customers_windows'
version '0.1.0'

depends 'sql_server', '~> 2.5.0'
depends 'iis', '~> 4.1.7'
```

These cookbooks need to exist on the Chef server so that the node can access them when it runs `chef-client`.

You could download each cookbook from Chef Supermarket and then upload it the Chef server, but there's one minor complication &ndash; each cookbook you depend on might depend on one or more other cookbooks. And those cookbooks in turn might depend on others.

For example, if you [look at the iis](https://github.com/chef-cookbooks/iis/blob/master/metadata.rb) cookbook, you'll see in its <code class="file-path">metadata.rb</code> file that it depends on the `windows` cookbook.

```ruby
# metadata.rb
# [...]
supports 'windows'
depends 'windows', '>= 1.34.6'
source_url 'https://github.com/chef-cookbooks/iis' if respond_to?(:source_url)
issues_url 'https://github.com/chef-cookbooks/iis/issues' if respond_to?(:issues_url)
```

To help unravel this dependency web &ndash; and remove the need for you to manually resolve cookbook dependencies &ndash; we're going to use [Berkshelf](http://berkshelf.com) instead of running the `knife cookbook upload` command to manually upload each dependency. Berkshelf uploads your cookbooks to the Chef server and retrieves the cookbooks that your cookbook depends on.

Berkshelf comes with the Chef DK, so you don't have to install anything.

When you created your cookbook, the `chef generate cookbook` command created a file named <code class="file-path">Berksfile</code> in the cookbook's root directory.

For this project, you won't need to work directly with <code class="file-path">Berksfile</code>. But you'll notice that <code class="file-path">Berksfile</code> comes pre-configured to pull cookbooks from Chef Supermarket.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ more Berksfile
source "https://supermarket.chef.io"

metadata
```

The `metadata` line tells Berkshelf to pull additional dependencies from the <code class="file-path">metadata.rb</code> file.

### Use Berkshelf to install your dependencies

The next step is to have Berkshelf resolve your dependencies by downloading all dependent cookbooks from Chef Supermarket.

Run `berks install`.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ berks install
Resolving cookbook dependencies...
Fetching 'awesome_customers_windows' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Installing sql_server (2.5.0)
Installing chef_handler (1.2.0)
Installing iis (4.1.7)
Installing openssl (4.4.0)
Using awesome_customers_windows (0.1.0) from source at .
Installing chef-sugar (3.3.0)
Installing windows (1.39.1)
```

Berkshelf installs dependent cookbooks to the <code class="file-path">~/.berkshelf/cookbooks</code> directory so that they can be shared among all of your cookbooks.

```bash
$ ls ~/.berkshelf/cookbooks
chef-sugar-3.3.0   iis-4.1.7          sql_server-2.5.0
chef_handler-1.2.0 openssl-4.4.0      windows-1.39.1
```

### Use Berkshelf to upload the cookbooks to the Chef server

Now we can upload your cookbooks to the Chef server.

Run `berks upload`.

<% accordion('berks-no-ssl-verify', "If you're using your own Chef server") do %>

<%= partial 'layouts/partials/berks_no_ssl_verify' %>

<% end %>
<br>

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ berks upload
Uploaded awesome_customers_windows (0.1.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded chef_handler (1.2.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded iis (4.1.7) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded sql_server (2.5.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded windows (1.39.1) to: 'https://api.chef.io:443/organizations/your_org'
```

### Verify that the upload process succeeded

To prove that the cookbooks uploaded successfully, run `knife cookbook list` from your <% fp '~/learn-chef' %> directory.

```bash
# ~/learn-chef
$ knife cookbook list
awesome_customers_windows   0.1.0
chef_handler                1.2.0
iis                         4.1.7
sql_server                  2.5.0
windows                     1.39.1
```

Chef server now contains everything you need to run `chef-client` on your node.

[END_BOX]

[START_BOX]

## 3. Bootstrap your node

Now you can bootstrap your node.

Recall that when you bootstrap a node, you specify the run-list. Normally, you would specify the `awesome_customers_windows` cookbook's default recipe in the node's run-list, which would apply your web application configuration.

However, SQL Server does not support remote installation over the WinRM protocol. The installation succeeded on Test Kitchen because you used the `elevated: true` option, which runs `chef-client` immediately as a scheduled task and connects to that task so that Test Kitchen can receive the output of the `chef-client` run. This mechanism enables you to kick off and monitor the `chef-client` run remotely, but the installation and configuration happen entirely in the context of the local account.

We're investigating how to improve Chef to enable remote installation of software such as SQL Server. But for now, here's how you'll work around the issue:

1. Bootstrap your Windows Server node by specifying an empty run-list.
1. Manually update your node node's run-list to include the `awesome_customers_windows` cookbook.
1. Log in to your Windows Server node and run `chef-client`. 

First, from your workstation, make sure you're in the <code class="file-path">~/learn-chef</code> directory.

```bash
$ cd ~/learn-chef
```

### Bootstrap your Windows Server node

Run this command to bootstrap your node. Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">PASSWORD</code> with your password.

```bash
# ~/learn-chef
$ knife bootstrap windows winrm ADDRESS --winrm-user USER --winrm-password 'PASSWORD' --node-name customers_web_app
```

Here's an example.

```bash
# ~/learn-chef
$ knife bootstrap windows winrm 52.10.45.144 --winrm-user Administrator --winrm-password '(QGuv&zTTH' --node-name customers_web_app
Creating new client for customers_web_app
Creating new node for customers_web_app

Waiting for remote response before bootstrap.52.10.45.144 .
52.10.45.144 Response received.
Remote node responded after 0.03 minutes.
52.10.45.144 AMD64
Bootstrapping Chef on 52.10.45.144
[...]
52.10.45.144 [2016-05-17T01:34:39+00:00] INFO: *** Chef 12.10.24 ***
52.10.45.144 [2016-05-17T01:34:39+00:00] INFO: Platform: x64-mingw32
52.10.45.144 [2016-05-17T01:34:39+00:00] INFO: Chef-client pid: 1232
52.10.45.144 [2016-05-17T01:34:47+00:00] INFO: Setting the run_list to [] from CLI options
52.10.45.144 [2016-05-17T01:34:47+00:00] INFO: Run List is []
52.10.45.144 [2016-05-17T01:34:47+00:00] INFO: Run List expands to []
52.10.45.144 [2016-05-17T01:34:47+00:00] INFO: Starting Chef Run for customers_web_app
52.10.45.144 [2016-05-17T01:34:47+00:00] INFO: Running start handlers
52.10.45.144 [2016-05-17T01:34:47+00:00] INFO: Start handlers complete.
52.10.45.144 [2016-05-17T01:34:48+00:00] INFO: Loading cookbooks []
52.10.45.144 [2016-05-17T01:34:48+00:00] WARN: Node customers_web_app has an empty run list.
52.10.45.144 [2016-05-17T01:34:49+00:00] INFO: Chef Run complete in 2.171813 seconds
52.10.45.144 [2016-05-17T01:34:49+00:00] INFO: Running report handlers
52.10.45.144 [2016-05-17T01:34:49+00:00] INFO: Report handlers complete
52.10.45.144 [2016-05-17T01:34:49+00:00] INFO: Sending resource update report (run-id: d6d3d555-e568-4006-abdd-5474c44d033f)
```

### Manually update your node node's run-list

Now run this command to update your node's run-list.

```bash
# ~/learn-chef
$ knife node run_list set customers_web_app 'recipe[awesome_customers_windows]'
customers_web_app:
  run_list: recipe[awesome_customers_windows]
```

### Log in to your Windows Server node and run chef-client

Finally, log in to your node, either directly or over RDP. Then open a PowerShell window (as Administrator) and run `chef-client`.

```ps
$ chef-client
PS C:\Users\Administrator> chef-client
Starting Chef Client, version 12.10.24
[2016-05-17T01:37:46+00:00] INFO: *** Chef 12.10.24 ***
[2016-05-17T01:37:46+00:00] INFO: Platform: x64-mingw32
[2016-05-17T01:37:46+00:00] INFO: Chef-client pid: 2464
[2016-05-17T01:37:51+00:00] INFO: Run List is [recipe[awesome_customers_windows]]
[2016-05-17T01:37:51+00:00] INFO: Run List expands to [awesome_customers_windows]
[2016-05-17T01:37:51+00:00] INFO: Starting Chef Run for customers_web_app
[2016-05-17T01:37:51+00:00] INFO: Running start handlers
[2016-05-17T01:37:51+00:00] INFO: Start handlers complete.
resolving cookbooks for run list: ["awesome_customers_windows"]
[2016-05-17T01:37:52+00:00] INFO: Loading cookbooks [awesome_customers_windows@0.1.0, sql_server@2.5.0, windows@1.39.1,
chef_handler@1.2.0, iis@4.1.6]
Synchronizing Cookbooks:
[...]
[2016-05-17T01:46:44+00:00] INFO: powershell_script[Grant SQL access to IIS APPPOOL\Products] ran successfully
    - execute "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe" -NoLogo -NonInteractive -NoProfile -ExecutionP
olicy Bypass -InputFormat None -File "C:/Users/ADMINI~1/AppData/Local/Temp/2/chef-script20160517-2464-6dfss.ps1"
[2016-05-17T01:46:45+00:00] INFO: Chef Run complete in 534.017394 seconds
←[0m
Running handlers:
[2016-05-17T01:46:45+00:00] INFO: Running report handlers
Running handlers complete
[2016-05-17T01:46:45+00:00] INFO: Report handlers complete
←[0m
Deprecated features used!
  chef_gem[rubyzip] chef_gem compile_time installation is deprecated at 1 location:
    - c:/chef/cache/cookbooks/windows/providers/zipfile.rb:85:in `rescue in ensure_rubyzip_gem_installed'
  chef_gem[rubyzip] Please set `compile_time false` on the resource to use the new behavior. at 1 location:
    - c:/chef/cache/cookbooks/windows/providers/zipfile.rb:85:in `rescue in ensure_rubyzip_gem_installed'
  chef_gem[rubyzip] or set `compile_time true` on the resource if compile_time behavior is required. at 1 location:
    - c:/chef/cache/cookbooks/windows/providers/zipfile.rb:85:in `rescue in ensure_rubyzip_gem_installed'
←[0m
Chef Client finished, 22/28 resources updated in 08 minutes 59 seconds
[2016-05-17T01:46:45+00:00] INFO: Sending resource update report (run-id: 11e1d868-b6f3-45b0-992d-ef9761232cca)
```

[END_BOX]

[START_BOX]

## 4. Verify the configuration

From a browser on your workstation, navigate to your site's /Products/Customers.aspx page, for example, http://52.36.120.7/Products/Customers.aspx. You'll see this:

![](misc/manage_customers_node_windows.png)

In this part, you uploaded your cookbooks to Chef server and then boostrapped your node. Later, [check out this appendix](/manage-a-web-app/windows/updating-your-nodes-configuration/) to read about some ways to update your node's configuration.

[END_BOX]

[START_BOX]

## Clean up your environment

Perform these steps if you want to clean up your environment after you complete this tutorial or you want to repeat the process from the beginning.

### Remove the cookbooks from the Chef server

From your workstation, run the `knife cookbook list` command to list the cookbooks that exist on your Chef server.

Then run `knife cookbook delete <cookbook-name>` to delete any cookbooks you no longer want.

The [bulk delete](https://docs.chef.io/knife_cookbook.html#bulk-delete) option is an easy way to remove multiple cookbooks. For example, `knife cookbook bulk delete . -p` will entirely remove all cookbooks from your Chef server.

[WARN] Be sure not to remove any cookbooks that are used by other nodes in your network.

### Remove the cookbooks from your Berkshelf cache

Berkshelf installs dependent cookbooks to the <code class="file-path">~/.berkshelf/cookbooks</code> directory on your workstation so that they can be shared among all of your cookbooks.

From your workstation, you can remove individual cookbooks you no longer need from this directory, or remove them all like this.

```bash
$ rm -r ~/.berkshelf/cookbooks
```

### Delete the node from the Chef server

From your workstation, run these commands to delete the data about your node from the Chef server.

```bash
# ~/learn-chef
$ knife node delete customers_web_app --yes
Deleted node[customers_web_app]
$ knife client delete customers_web_app --yes
Deleted client[customers_web_app]
```

### Tear down your node

Deleting a node from your Chef server removes any data about that node from the server &ndash; it doesn't automatically tear down the instance.

Don't forget to tear down any cloud instances that you used to complete the tutorial.

[END_BOX]
