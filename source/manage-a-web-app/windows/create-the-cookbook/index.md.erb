---
title: 'Create the cookbook'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
---
In this part, you'll create the `awesome_customers_windows` cookbook. You'll also apply the empty cookbook to a Windows Server 2012 R2 instance using Test Kitchen.

Recall that a cookbook provides structure to your Chef code. A cookbook contains things such as recipes and templates.

We'll create one cookbook, named `awesome_customers_windows`, to describe our web application's configuration. To keep things basic, the cookbook will contain both the web application code and the Chef configuration code to manage it.

In practice, you might separate the web application code from its configuration code. For example, the web team might maintain the application code in its own source control repository and the operations or another development team might maintain the configuration code &ndash; the Chef cookbook &ndash; in a separate repository. The cookbook would need to pull from the application sources repository and deploy the web content to the appropriate location.

[START_BOX]

## 1. Create the awesome\_customers_windows cookbook

To get started, first move to the <% fp('~/learn-chef') %> directory.

```bash
# ~
$ cd ~/learn-chef
```

Ensure that you have a directory named <% fp('~/learn-chef/cookbooks') %>.

```bash
# ~/learn-chef
$ mkdir cookbooks
```

Run the following `chef generate cookbook` command to create the `awesome_customers_windows` cookbook.

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/awesome_customers_windows
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/Users/user/learn-chef/cookbooks/awesome_customers_windows] action create
    - create new directory /Users/user/learn-chef/cookbooks/awesome_customers_windows
[...]
  * cookbook_file[/Users/user/learn-chef/cookbooks/awesome_customers_windows/.gitignore] action create
    - create new file /Users/user/learn-chef/cookbooks/awesome_customers_windows/.gitignore
    - update content in file /Users/user/learn-chef/cookbooks/awesome_customers_windows/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

The "windows" part of the cookbook's name is simply to distinguish it from the versions of this project for [Red Hat Enterprise Linux](/manage-a-web-app/rhel/) and [Ubuntu](/manage-a-web-app/ubuntu/). We break many of the tutorials into these categories to help you focus on the platform you care about most. In practice, you could write a single cookbook that runs on multiple platforms. In that case, you might name the cookbook simply `awesome_customers`.

[END_BOX]

[START_BOX]

## 2. Apply the awesome\_customers_windows cookbook on a Test Kitchen instance

Now let's verify that the empty configuration runs successfully on a Windows Server 2012 R2 instance. Replace the contents of your copy of <% fp('~/learn-chef/cookbooks/awesome\_customers_windows/.kitchen.yml') %> with the version that matches the Test Kitchen driver you want to use.

[START_TABS config EC2, Hyper-V, Vagrant]

[START_TAB configEC2 active]

Replace the values for `aws_ssh_key_id`, `region`, `availability_zone`, `subnet_id`, `image_id`, `security_group_ids`, and `ssh_key` with your values.

Remember, your security group should provide inbound network access on ports 80, 443, 3389, and 5985.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: ec2
  aws_ssh_key_id: learnchef
  region: us-west-2
  availability_zone: a
  image_id: ami-ff4baf9f
  subnet_id: subnet-eacb348f
  instance_type: t2.medium
  security_group_ids: ['sg-2d3b3b48']
  retryable_tries: 120
  associate_public_ip: true

provisioner:
  name: chef_zero_scheduled_task

transport:
  ssh_key: C:\Users\LearnChef\.ssh\learnchef.pem

platforms:
  - name: windows-2012r2
    transport:
      username: Administrator

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
```

[COMMENT] Be sure to use the full path to your .pem file and not the `~` syntax.

This configuration uses the `t2.medium` [instance type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html). We recommend that you use a `t2.medium` or larger instance type to get the best performance and also provide enough memory for components such as IIS and SQL Server.

The `user_data` part specifies EC2 [user data](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html#user-data-shell-scripts), which is a script that's run when the machine is booted for the first time. In this case, we provide a PowerShell script that configures WinRM, the Windows Firewall, and other features to ensure that the machine is accessible from Test Kitchen.

[END_TAB]

[START_TAB configHyperV]

This configuration specifies the location of the parent virtual hard drive (VHD) folder, the name of the virtual switch to use for network access, and allocates 2 GB of memory to the instance.

Replace the value for `password` with the `Administrator` password on your base virtual machine.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: hyperv
  parent_vhd_folder: C:\Hyper-V
  parent_vhd_name: WindowsServer2012R2.vhdx
  vm_switch: ExternalSwitch
  memory_startup_bytes: 2GB

provisioner:
  name: chef_zero_scheduled_task

transport:
  password: H24?6;H.QaV8JP2&

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
```

[END_TAB]

[START_TAB configVagrant]

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.35.35"}]

provisioner:
  name: chef_zero_scheduled_task

platforms:
  - name: windows-2012r2
    driver:
      customize:
        memory: 2048

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
```

This configuration uses the Vagrant driver and brings up a Windows Server 2012 R2 instance having 2 GB of memory. It resembles the one you created for the `settings_windows` cookbook in the previous tutorial.

It also assigns the IP address 192.168.35.35 to the instance. You'll later use that address to access your web application from your workstation. We use an address that's in the 192.168.0.0 &mdash; 192.168.255.255 range because that range is defined as part of the [private IPv4 address space](https://en.wikipedia.org/wiki/Private_network), and is not accessible to the public Internet.

[END_TAB]

[END_TABS]

Next, from your terminal, move to the <% fp('~/learn-chef/cookbooks/awesome_customers_windows') %> directory.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/awesome_customers_windows
```

Now run `kitchen list`. You'll see that the instance was not yet created.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen list
Instance                Driver   Provisioner            Verifier  Transport  Last Action
default-windows-2012r2  Vagrant  ChefZeroScheduledTask  Busser    Winrm      <Not Created>
```

Now run `kitchen converge`. This command downloads the base Windows Server 2012 R2 box if needed, brings up an instance, installs `chef-client`, and applies the cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen converge
-----> Starting Kitchen (v1.7.2)
-----> Creating <default-windows-2012r2>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'windows-2012r2'...
[...]
       Synchronizing Cookbooks:
         - awesome_customers_windows (0.1.0)
       Installing Cookbook Gems:
       Compiling Cookbooks...
       Converging 0 resources

       Running handlers:
       Running handlers complete
       Chef Client finished, 0/0 resources updated in 36 seconds

       Finished converging <default-windows-2012r2> (2m13.49s).
-----> Kitchen is finished. (4m27.37s)
```

As expected, 0 resources were applied because the cookbook is empty. But it's a great first step to verifying that the instance comes up and `chef-client` runs successfully.

[TIP] If you need to take a break from this tutorial, you can run `kitchen destroy` to terminate your instance. Doing so is especially important when working with Amazon EC2, Microsoft Azure, or another Test Kitchen cloud driver, where you pay hourly for usage. Cleaning up your instance when you don't need it can also help you free up compute resources on your workstation if you're working with a virtual machine. When you return, just run `kitchen converge` to get back to the state where you left off.

Finally, verify that you can successfully connect to your instance. The way you connect depends on which Test Kitchen driver you're using. [Here's a reminder of how to connect](/local-development/windows/get-started-with-test-kitchen#step5).

After you've successfully connected to your instance, you can close your connection. However, you might find it useful to keep your session open &ndash; you'll come back multiple times in this tutorial to verify your work.

[END_BOX]
