---
title: 'Quickstart: Bring up the web app using Test Kitchen'
order: 9
keywords: TODO
layout: lesson
sections: []
appendix: true
time_to_complete: 40 minutes
---
If you've gone through the tutorial previously, or you have enough familiarity with Chef and just want to see the Customers web application in action, here's how to bring things up quickly using Test Kitchen.

[START_BOX]

## Prerequisites

This quickstart provides three ways to bring up the Customers web application on a local instance. The first involves using Test Kitchen's EC2 driver to bring up an instance on AWS. The other two involve using Hyper-V or Vagrant and VirtualBox to bring up an instance as a virtual machine on your workstation.

We strongly recommend that you go through the previous tutorial, [Develop your Windows Server infrastructure code locally](/local-development/windows/), before beginning this quickstart. There you'll choose which virtualization technology works best for you and get your workstation set up for local development. The options that involve working with a local VM show you how to set up a base image that serves as a template for your test instances.

[END_BOX]

[START_BOX]

## 1. Get the sources from GitHub

Clone the sources for the `awesome_customers_windows` cookbook from GitHub.

```bash
# ~
$ mkdir ~/learn-chef/cookbooks
$ cd ~/learn-chef/cookbooks
$ git clone https://github.com/learn-chef/awesome_customers_windows.git
Cloning into 'awesome_customers_windows'...
remote: Counting objects: 56, done.
remote: Total 56 (delta 0), reused 0 (delta 0), pack-reused 56
Unpacking objects: 100% (56/56), done.
Checking connectivity... done.
```

[END_BOX]

[START_BOX]

## 2. Set up your Test Kitchen configuration file

The `awesome_customers_windows` cookbook on GitHub provides a separate Test Kitchen configuration file for the EC2, Hyper-V, and Vagrant drivers. The easiest way to switch between them is to set the `KITCHEN_YAML` environment variable to point to the configuration file you want to use.

If you're using the Vagrant driver, you're all set. If you're using the EC2 or Hyper-V driver, export the `KITCHEN_YAML` environment variable according to your workstation's operating system.

| Driver     | Windows workstation                         | Mac OS or Linux workstation                |
|------------|---------------------------------------------|--------------------------------------------|
| EC2        | `$env:KITCHEN_YAML=".\.kitchen.ec2.yml"`    | `export KITCHEN_YAML="./.kitchen.ec2.yml"` |
| Hyper-V    | `$env:KITCHEN_YAML=".\.kitchen.hyperv.yml"` | N/A                                        |
| Vagrant    | `$env:KITCHEN_YAML=".\.kitchen.yml"`        | `export KITCHEN_YAML="./.kitchen.yml"`     |

The entry for Vagrant shows how to switch back to <% fp '.kitchen.yml' %> later.

Now you need to customize your Test Kitchen configuration file to match your environment. If you're using the Vagrant driver, you're all set. Otherwise, customize your configuration file as follows.

[START_TABS config EC2, Hyper-V]

[START_TAB configEC2 active]

Replace the values for `aws_ssh_key_id`, `region`, `availability_zone`, `subnet_id`, `image_id`, `security_group_ids`, and `ssh_key` with your values.

Your security group should provide inbound network access on ports 80, 443, 3389, and 5985.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: ec2
  aws_ssh_key_id: learnchef
  region: us-west-2
  availability_zone: a
  image_id: ami-ff4baf9f
  subnet_id: subnet-eacb348f
  instance_type: t2.medium
  security_group_ids: ['sg-2d3b3b48']
  retryable_tries: 120
  associate_public_ip: true

provisioner:
  name: chef_zero_scheduled_task

transport:
  ssh_key: C:\Users\LearnChef\.ssh\learnchef.pem

[...]
```

[COMMENT] Be sure to use the full path to your .pem file and not the `~` syntax.

This configuration uses the `t2.medium` [instance type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html). We recommend that you use a `t2.medium` or larger instance type to get the best performance and also provide enough memory for components such as IIS and SQL Server.

[END_TAB]

[START_TAB configHyperV]

Replace the value for `password` with the `Administrator` password on your base virtual machine.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: hyperv
  parent_vhd_folder: C:\Hyper-V
  parent_vhd_name: WindowsServer2012R2.vhdx
  vm_switch: ExternalSwitch
  memory_startup_bytes: 2GB

provisioner:
  name: chef_zero_scheduled_task

transport:
  password: H24?6;H.QaV8JP2&

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
```

[END_TAB]

[END_TABS]

For learning purposes, we have you replace the required values directly. In practice, [you might use environment variables](/local-development/windows/dynamic-configuration/) to make your configuration files more general and easier to share with others.

From your cookbook's directory, <% fp '~/learn-chef/cookbooks/awesome_customers_windows' %>, run `kitchen list`. You'll see your driver under the **Driver** column.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen list
Instance                Driver  Provisioner            Verifier  Transport  Last Action
default-windows-2012r2  Ec2     ChefZeroScheduledTask  Busser    Winrm      <Not Created>
```

[END_BOX]

[START_BOX]

## 3. Run Test Kitchen

Now run `kitchen converge` from your cookbook's directory to upload your cookbooks to your test instance and run `chef-client`.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/awesome_customers_windows
-----> Creating <default-windows-2012r2>...
       If you are not using an account that qualifies under the AWS
free-tier, you may be charged to run these suites. The charge
should be minimal, but neither Test Kitchen nor its maintainers
are responsible for your incurred costs.

       Instance <i-4aa6298d> requested.
       EC2 instance <i-4aa6298d> created.
       Waited 0/600s for instance <i-4aa6298d> to become ready.
       Waited 5/600s for instance <i-4aa6298d> to become ready.
[...]
       Waited 125/600s for instance <i-4aa6298d> to become ready.
       Waited 0/600s for instance <i-4aa6298d> to fetch windows admin password.
       Retrieved Windows password for instance <i-4aa6298d>.
       EC2 instance <i-4aa6298d> ready.
       [WinRM] Established
[...]
       Chef Client finished, 22/28 resources updated in 07 minutes 53 seconds

       Finished converging <default-windows-2012r2> (10m1.93s).
-----> Kitchen is finished. (13m12.58s)
```

[END_BOX]

[START_BOX]

## 4. Verify the result

Now you can verify the configuration from a web browser on your workstation.

First, you'll need the instance's IP address or hostname. They way you get that depends on your Test Kitchen driver.

<a name="get-ip-address" href="#get-ip-address"></a>

[START_TABS getipaddr EC2, Hyper-V, Vagrant]

[START_TAB getipaddrEC2 active]

You can lookup your EC2 instance's IP address or hostname from the EC2 Management Console. Or run this command from your <% fp '~/learn-chef/cookbooks/awesome_customers_windows' %> directory to get the hostname.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ cat .kitchen/default-windows-2012r2.yml
---
username: administrator
server_id: i-831f9844
hostname: ec2-52-36-43-239.us-west-2.compute.amazonaws.com
password: nei&dfHwBHN
last_action: converge
```

[END_TAB]

[START_TAB getipaddrHyperV]

From your workstation, run this PowerShell command to get your instance's IP address on your local network.

```ps
$ Get-VM -Name "default-windows-2012r2" | select -ExpandProperty NetworkAdapters | select IPAddresses
IPAddresses
-----------
{192.168.1.171, fe80::983c:ebdf:3e87:34db}
```

You can run `kitchen list` to get the name of your VM. You can also run the `Get-VM` cmdlet.

```ps
$ Get-VM
Name               	   State   CPUUsage(%) MemoryAssigned(M) Uptime   Status
----               	   -----   ----------- ----------------- ------   ------
default-windows-2012r2 Running 0       	   2048          	 00:02:39 Operating normally
WindowsServer2012R2	   Off 	   0       	   0             	 00:00:00 Operating normally
```

Here, "default-windows-2012r2" is the name of the Test Kitchen instance. "WindowsServer2012R2" is the name of the base VM that was used to create it.

[END_TAB]

[START_TAB getipaddrVagrant]

Recall that your Test Kitchen configuration file looks like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.35.35"}]

provisioner:
  name: chef_zero_scheduled_task

platforms:
  - name: windows-2012r2
    driver:
      customize:
        memory: 2048

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
```

It assigns the IP address 192.168.35.35 to the instance. You can use this address to access your web server.

[END_TAB]

[END_TABS]

From a browser on your workstation, navigate to your site's /Products/Customers.aspx page, for example, http://54.186.5.41/Products/Customers.aspx. You'll see this.

![the resulting web page](/assets/images/misc/webapp_result_windows.png)

[END_BOX]

[START_BOX]

## 5. Destroy your Test Kitchen instance

When you're done experimenting, run `kitchen destroy` to clean things up.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen destroy
-----> Starting Kitchen (v1.7.2)
-----> Destroying <default-windows-2012r2>...
       EC2 instance <i-4aa6298d> destroyed.
       Finished destroying <default-windows-2012r2> (0m1.25s).
-----> Kitchen is finished. (0m2.12s)
```

[END_BOX]
