---
title: 'Configure IIS and ASP.NET'
order: 4
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 25 minutes
---
Now that the LCM is configured like we want, let's ensure that Internet Information Services (IIS) is installed and that it's configured to run ASP.NET applications.

In [Learn the Chef basics on Windows Server](/tutorials/learn-the-basics/windows/free/) and [Manage a Windows Server node](/manage-a-node/windows/), you wrote a basic IIS cookbook from scratch. You used the `powershell_script` resource, like this.

```ruby
# web.rb
powershell_script 'Install IIS' do
  code 'Add-WindowsFeature Web-Server'
  guard_interpreter :powershell_script
  not_if "(Get-WindowsFeature -Name Web-Server).Installed"
end
```

As mentioned in the previous lesson, for this project, we'll use Chef's support for PowerShell DSC to configure IIS and ASP.NET.

Although Chef and PowerShell DSC share common concepts, [when you combine them](https://www.chef.io/blog/2014/09/03/why-chef-dsc-revisited/
), you get the best that each framework has to offer. From PowerShell DSC, you get direct access to the Windows framework in a programming model you already know. Chef adds to that tools that help you inventory, analyze, and test your configurations on multiple platforms in a number of cloud and virtualized environments.

[TIP] Learn more about PowerShell DSC in [The DSC Book](https://www.penflip.com/powershellorg/the-dsc-book).

You'll follow the same pattern as in the previous lesson &ndash; you'll create a recipe, add code to your recipe to describe your configuration, and then apply and verify your configuration on your instance.

[START_BOX]

## 1. Create the web recipe

Remember, our goals for this part are to:

* enable the IIS role.
* set up IIS to run ASP.NET applications.

The first step is to create the recipe file, <code class="file-path">web.rb</code>. Run the following command to generate it.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_windows web
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_windows/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_windows/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_windows/spec/unit/recipes/web_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_windows/spec/unit/recipes/web_spec.rb
    - update content in file cookbooks/awesome_customers_windows/spec/unit/recipes/web_spec.rb from none to 881e08
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_windows/recipes/web.rb] action create
    - create new file cookbooks/awesome_customers_windows/recipes/web.rb
    - update content in file cookbooks/awesome_customers_windows/recipes/web.rb from none to 796e00
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 2. Enable the IIS role

Here's how you might use PowerShell DSC to enable the IIS role.

```powershell
WindowsFeature InstallWebServer
{
  Name = "Web-Server"
  Ensure = "Present"
}
```

To incorporate this DSC code in your Chef recipe, you use the [dsc_script](https://docs.chef.io/resource_dsc_script.html) resource.

Add the following to your `web` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/web.rb
# Enable the IIS role.
dsc_script 'Web-Server' do
  code <<-EOH
  WindowsFeature InstallWebServer
  {
    Name = "Web-Server"
    Ensure = "Present"
  }
  EOH
end
```

The `code` attribute defines the code for the DSC configuration script. We use what's called a [here document](https://en.wikibooks.org/wiki/Ruby_Programming/Here_documents), or _heredoc_, to express multiple lines of text &ndash; in this case our PowerShell code &ndash; more naturally. The `<<-EOH` part declares the start of the heredoc, and the `EOH` part ends, or terminates, it.

[COMMENT] The advantage to using `dsc_script` over `powershell_script` is that you don't have to provide a guard (a `not_if` or `only_if` attribute) to ensure that the configuration is applied only when needed &ndash; PowerShell DSC takes care of that for you. `powershell_script` is still useful for systems that don't support DSC or when you have PowerShell code that you've already written and tested.

[END_BOX]

[START_BOX]

## 3. Install ASP.NET 4.5

Now let's install ASP.NET 4.5. This will allow us to run our web application in a later step. We'll use the same format to install ASP.NET as we did to enable the IIS role.

Add the following to your `web` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/web.rb
# Install ASP.NET 4.5.
dsc_script 'Web-Asp-Net45' do
  code <<-EOH
  WindowsFeature InstallDotNet45
  {
    Name = "Web-Asp-Net45"
    Ensure = "Present"
  }
  EOH
end
```

<% accordion('dsc-resource', 'A quick look at dsc_resource') do %>

<%= partial 'dsc_resource' %>

<% end %>
<br>

[END_BOX]

[START_BOX]

## 4. Install the IIS Management Console

Although you might not require it on a production system, let's install the IIS Management Console, the user interface for IIS management. You'll later use the IIS Management Console to verify your web server configuration. We'll use the same format as we did for the IIS role and ASP.NET.

Append this to <code class="file-path">web.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/web.rb
# Install the IIS Management Console.
dsc_script 'Web-Mgmt-Console' do
  code <<-EOH
  WindowsFeature InstallIISConsole
  {
    Name = "Web-Mgmt-Console"
    Ensure = "Present"
  }
  EOH
end
```

Your entire `web` recipe looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/web.rb
# Enable the IIS role.
dsc_script 'Web-Server' do
  code <<-EOH
  WindowsFeature InstallWebServer
  {
    Name = "Web-Server"
    Ensure = "Present"
  }
  EOH
end

# Install ASP.NET 4.5.
dsc_script 'Web-Asp-Net45' do
  code <<-EOH
  WindowsFeature InstallDotNet45
  {
    Name = "Web-Asp-Net45"
    Ensure = "Present"
  }
  EOH
end

# Install the IIS Management Console.
dsc_script 'Web-Mgmt-Console' do
  code <<-EOH
  WindowsFeature InstallIISConsole
  {
    Name = "Web-Mgmt-Console"
    Ensure = "Present"
  }
  EOH
end
```

[END_BOX]

[START_BOX]

## 5. Set the web recipe to run

As you did for the `lcm` recipe, add a line to your cookbook's default recipe, <code class="file-path">default.rb</code> to run the `web` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/default.rb
include_recipe 'awesome_customers_windows::lcm'
include_recipe 'awesome_customers_windows::web'
```

[END_BOX]

[START_BOX]

## 6. Apply and verify the configuration

Let's apply and then verify the configuration. Run `kitchen converge` to apply the `awesome_customers_windows` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen converge
-----> Starting Kitchen (v1.8.0)
-----> Converging <default-windows-2012r2>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
[...]
       Recipe: awesome_customers_windows::lcm
         * powershell_script[Configure the LCM] action run (skipped due to not_if)
       Recipe: awesome_customers_windows::web
         * dsc_script[Web-Server] action run
           - converge DSC configuration 'Web-Server'
           - converge DSC resource [[WindowsFeature]InstallWebServer] by Continue with installation?
           Performing installation for "[Web Server (IIS)] Web Server (IIS)".
           Files for "[Web Server (IIS)] Web Server (IIS)" are not available on the target server.
           Performing installation for "[Web Server (IIS)] Web Server".
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 3/4 resources updated in 03 minutes 23 seconds

       Finished converging <default-windows-2012r2> (5m6.19s).
-----> Kitchen is finished. (7m21.67s)
```

You'll see from the output that the LCM configuration is not applied a second time because the configuration mode is already `ApplyOnly`. You'll also see that IIS, ASP.NET 4.5, and the IIS Management Console are configured.

Now let's connect to your node and run a few commands to help verify that the instance is in the expected state. Specifically, we'll verify that IIS, ASP.NET, and the IIS Management Console are configured and that your instance serves the default home page.

First, from your instance, run this command to verify that IIS is installed.

```ps
# ~
$ Get-WindowsFeature -Name Web-Server

Display Name                                            Name                       Install State
------------                                            ----                       -------------
[X] Web Server (IIS)                                    Web-Server                     Installed
```

Now run this command to verify that ASP.NET is installed.

```ps
# ~
$ Get-WindowsFeature -Name Web-Asp-Net45

Display Name                                            Name                       Install State
------------                                            ----                       -------------
            [X] ASP.NET 4.5                             Web-Asp-Net45                  Installed
```

Next, verify that you can access the IIS Management Console. From the **Run** box or the **Start** screen, run **inetmgr**.

![the IIS Management Console](/assets/images/misc/iis_manager_start.png)

Now verify that the default web site is installed and started. From the IIS Management Console, select **Sites** from the **Connections** pane. You'll see the default web site on the **Sites** pane.

![the default site through the IIS Management Console](/assets/images/misc/iis_manager_default_site.png)

You can also verify this from the command line. Run the [Get-Website](https://technet.microsoft.com/en-us/library/ee807832.aspx) cmdlet to list the available sites.

```ps
# ~
$ Get-Website

Name             ID   State      Physical Path                  Bindings
----             --   -----      -------------                  --------
Default Web Site 1    Started    %SystemDrive%\inetpub\wwwroot  http *:80:
```

Now let's verify that you can access the site externally, from your workstation.

First, you'll need the instance's IP address or hostname. They way you get that depends on your Test Kitchen driver.

<a name="get-ip-address" href="#get-ip-address"></a>

[START_TABS getipaddr EC2, Hyper-V, Vagrant]

[START_TAB getipaddrEC2 active]

You can lookup your EC2 instance's IP address or hostname from the EC2 Management Console. Or run this command from your<br><% fp '~/learn-chef/cookbooks/awesome_customers_windows' %> directory to get the hostname.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ cat .kitchen/default-windows-2012r2.yml
---
username: administrator
server_id: i-831f9844
hostname: ec2-52-36-43-239.us-west-2.compute.amazonaws.com
password: nei&dfHwBHN
last_action: converge
```

[END_TAB]

[START_TAB getipaddrHyperV]

From your workstation, run this PowerShell command to get your instance's IP address on your local network.

```ps
$ Get-VM -Name "default-windows-2012r2" | select -ExpandProperty NetworkAdapters | select IPAddresses
IPAddresses
-----------
{192.168.1.171, fe80::983c:ebdf:3e87:34db}
```

You can run `kitchen list` to get the name of your VM. You can also run the `Get-VM` cmdlet.

```ps
$ Get-VM
Name               	   State   CPUUsage(%) MemoryAssigned(M) Uptime   Status
----               	   -----   ----------- ----------------- ------   ------
default-windows-2012r2 Running 0       	   2048          	 00:02:39 Operating normally
WindowsServer2012R2	   Off 	   0       	   0             	 00:00:00 Operating normally
```

Here, "default-windows-2012r2" is the name of the Test Kitchen instance. "WindowsServer2012R2" is the name of the base VM that was used to create it.

[END_TAB]

[START_TAB getipaddrVagrant]

Recall that your Test Kitchen configuration file looks like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.35.35"}]

provisioner:
  name: chef_zero

transport:
  name: winrm
  elevated: true

platforms:
  - name: windows-2012r2
    driver:
      customize:
        memory: 2048

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
```

It assigns the IP address 192.168.35.35 to the instance. You can use this address to access your web server.

[END_TAB]

[END_TABS]

From your workstation, navigate to your site from a web browser. You'll see this.

![the default home page through a browser](/assets/images/misc/iis_default_home_page.png)

Alternatively, you can confirm the connection from the command line. On a Windows workstation, you would run:

```ps
# ~
$ Invoke-WebRequest 52.26.226.15

StatusCode        : 200
StatusDescription : OK
Content           : <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
                    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
                    <html xmlns="http://www.w3.org/1999/xhtml">
                    <head>
                    <meta http-equiv="Content-Type" cont...
RawContent        : HTTP/1.1 200 OK
                    Accept-Ranges: bytes
                    Content-Length: 701
                    Content-Type: text/html
                    Date: Tue, 18 Aug 2015 15:19:44 GMT
                    ETag: "e56e8f49c3d9d01:0"
                    Last-Modified: Tue, 18 Aug 2015 14:36:36 GMT
                    Serve...
Forms             : {}
Headers           : {[Accept-Ranges, bytes], [Content-Length, 701], [Content-Type, text/html], [Date, Tue, 18 Aug 2015
                    15:19:44 GMT]...}
Images            : {@{innerHTML=; innerText=; outerHTML=<IMG alt=IIS src="iis-85.png" width=960 height=600>;
                    outerText=; tagName=IMG; alt=IIS; src=iis-85.png; width=960; height=600}}
InputFields       : {}
Links             : {@{innerHTML=<IMG alt=IIS src="iis-85.png" width=960 height=600>; innerText=; outerHTML=<A
                    href="http://go.microsoft.com/fwlink/?linkid=66138&amp;clcid=0x409"><IMG alt=IIS src="iis-85.png"
                    width=960 height=600></A>; outerText=; tagName=A;
                    href=http://go.microsoft.com/fwlink/?linkid=66138&amp;clcid=0x409}}
ParsedHtml        : mshtml.HTMLDocumentClass
RawContentLength  : 701
```

On Linux or Mac OS, you would run:

```bash
# ~
$ curl -I 52.26.226.15
HTTP/1.1 200 OK
Content-Length: 701
Content-Type: text/html
Last-Modified: Thu, 11 Feb 2016 21:43:20 GMT
Accept-Ranges: bytes
ETag: "eed073391565d11:0"
Server: Microsoft-IIS/8.5
X-Powered-By: ASP.NET
Date: Thu, 11 Feb 2016 22:29:19 GMT
```

[END_BOX]
