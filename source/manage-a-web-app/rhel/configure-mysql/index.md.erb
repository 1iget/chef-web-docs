---
title: 'Configure MySQL'
order: 8
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
---
Now let's configure MySQL. You'll install the MySQL server and client packages and start the service.

For this part, we'll use these cookbooks from Chef Supermarket:

| Cookbook           | Description |
|-------------------:|-------------|
| [mysql2\_chef\_gem](https://supermarket.chef.io/cookbooks/mysql2_chef_gem) | installs the `mysql2` Ruby gem, which enables your Chef code to communicate with MySQL. |
| [mysql](https://supermarket.chef.io/cookbooks/mysql) | enables us to configure the MySQL server and client packages. |

[START_BOX]

## 1. Reference the cookbooks we'll use

We'll load the MySQL cookbooks just like we did the `selinux`, `firewall`, and `httpd` cookbooks. Append two `depends` statements to <code class="file-path">metadata.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/metadata.rb
name 'awesome_customers_rhel'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_rhel'
long_description 'Installs/Configures awesome_customers_rhel'
version '0.1.0'

depends 'selinux', '~> 0.9.0'
depends 'firewall', '~> 2.4.0'
depends 'httpd', '~> 0.3.4'
depends 'mysql2_chef_gem', '~> 1.0.2'
depends 'mysql', '~> 6.1.2'
```

[END_BOX]

[START_BOX]

## 2. Create the database recipe

From your <% fp('~/learn-chef') %> directory, create a recipe named `database` to hold your database configuration code.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_rhel database
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_rhel/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_rhel/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb
    - update content in file cookbooks/awesome_customers_rhel/spec/unit/recipes/database_spec.rb from none to 5fc56b
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_rhel/recipes/database.rb] action create
    - create new file cookbooks/awesome_customers_rhel/recipes/database.rb
    - update content in file cookbooks/awesome_customers_rhel/recipes/database.rb from none to 6793ff
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 3. Configure MySQL

Now let's install the MySQL client and service packages. We'll also need to install the `mysql2` Ruby gem before we configure MySQL.

Add the following to <code class="file-path">database.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/database.rb
mysql2_chef_gem 'default' do
  action :install
end

# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password node['awesome_customers_rhel']['database']['root_password']
  action [:create, :start]
end
```

The `mysql2_chef_gem` resource comes from the `mysql2_chef_gem` cookbook.

The other two resources &ndash; `mysql_client` and `mysql_service` &ndash; come from the `mysql` cookbook. To keep things moving, we'll skip past the details of how these resources work. In practice, you might first [review the source code](https://github.com/chef-cookbooks/mysql) to gain a better understanding of the implementation before you apply the code to your production servers.

The `mysql_service` resource takes the initial MySQL root password. To specify the password, you use the `node['awesome_customers_rhel']['database']['root_password']` node attribute that you set up in the previous part. When you run the cookbook through Test Kitchen, the password is "mysql\_root_password". When you run the cookbook on a node, the password is randomly generated.

[END_BOX]

[START_BOX]

## 4. Set the database recipe to run

Append an `include_recipe` statement to your default recipe, <code class="file-path">default.rb</code>. The entire file will look like this.

```ruby
include_recipe 'selinux::permissive'
include_recipe 'awesome_customers_rhel::firewall'
include_recipe 'awesome_customers_rhel::web_user'
include_recipe 'awesome_customers_rhel::web'
include_recipe 'awesome_customers_rhel::database'
```

[END_BOX]

[START_BOX]

## 5. Apply and verify the configuration

Let's apply the configuration and verify that MySQL is properly configured. Run `kitchen converge` to apply the `awesome_customers_rhel` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-centos-72>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing data_bags
       Preparing secret
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-centos-72>
       Starting Chef Client, version 12.6.0
       resolving cookbooks for run list: ["awesome_customers_rhel::default"]
       Synchronizing Cookbooks:
         - awesome_customers_rhel (0.1.0)
         - selinux (0.9.0)
         - mysql2_chef_gem (1.0.2)
         - mysql (6.1.2)
         - httpd (0.3.4)
         - firewall (2.4.0)
         - chef-sugar (3.3.0)
         - mariadb (0.3.1)
         - yum-mysql-community (0.1.21)
         - smf (2.2.7)
         - yum (3.9.0)
         - yum-epel (0.6.5)
         - rbac (1.0.3)
         - compat_resource (12.7.0)
         - build-essential (2.2.4)
         - apt (2.9.2)
       Compiling Cookbooks...
[...]
       Recipe: awesome_customers_rhel::database
         * mysql_client[default] action create
        (up to date)
        (up to date)
            (up to date)
         * mysql_service[default] action create

             - install version 5.5.47-2.el7 of package mysql-community-server
        (up to date)
           * service[default :create mysql] action disable (up to date)
           * group[default :create mysql] action create (up to date)
           * user[default :create mysql] action create (up to date)
           * file[default :create /etc/mysql/my.cnf] action delete (up to date)
           * file[default :create /etc/my.cnf] action delete
             - delete file /etc/my.cnf


           * directory[default :create /etc/mysql-default] action create

             - change mode from '' to '0750'
             - change owner from '' to 'mysql'
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 38/200 resources updated in 02 minutes 35 seconds
       Finished converging <default-centos-72> (2m41.91s).
-----> Kitchen is finished. (2m42.72s)
```

Now let's verify the database configuration. Start by logging in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen login
Last login: Wed Feb  3 21:24:18 2016 from 10.0.2.2
[vagrant@default-centos-72 ~]$
```

First, verify that the MySQL service is running.

```bash
[vagrant@default-centos-72 ~]$ sudo netstat -tap | grep mysql
tcp        0      0 0.0.0.0:mysql           0.0.0.0:*               LISTEN      28435/mysqld
```

You'll see that the `mysqld` service is in the `LISTEN` state.

Now verify that you can access the databases that come preconfigured with the installation. If you chose a different root password when you created the data bag item, replace "mysql\_root_password" with yours.

```bash
[vagrant@default-centos-72 ~]$ mysqlshow -h 127.0.0.1 -uroot -pmysql_root_password
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
```

Looks good! Now log out.

```bash
# ~
[vagrant@default-centos-72 ~]$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]
