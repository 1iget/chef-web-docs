---
title: 'Create the cookbook'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
---
In this part, you'll create the `awesome_customers_rhel` cookbook. You'll also apply the empty cookbook to a CentOS 7 instance using Test Kitchen.

Recall that a cookbook provides structure to your Chef code. A cookbook contains things such as recipes and templates.

We'll create one cookbook, named `awesome_customers_rhel`, to describe our web application's configuration. To keep things basic, the cookbook will contain both the web application code and the Chef configuration code to manage it.

In practice, you might separate the web application code from its configuration code. For example, the web team might maintain the application code in its own source control repository and the operations or another development team might maintain the configuration code &ndash; the Chef cookbook &ndash; in a separate repository. The cookbook would need to pull from the application sources repository and deploy the web content to the appropriate location.

[START_BOX]

## 1. Create the awesome\_customers_rhel cookbook

To get started, first move to the <% fp('~/learn-chef') %> directory.

```bash
# ~
$ cd ~/learn-chef
```

Ensure that you have a directory named <% fp('~/learn-chef/cookbooks') %>.

```bash
# ~/learn-chef
$ mkdir cookbooks
```

Run the following `chef generate cookbook` command to create the `awesome_customers_rhel` cookbook.

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/awesome_customers_rhel
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/Users/user/learn-chef/cookbooks/awesome_customers_rhel] action create
    - create new directory /Users/user/learn-chef/cookbooks/awesome_customers_rhel
[...]
  * cookbook_file[/Users/user/learn-chef/cookbooks/awesome_customers_rhel/.gitignore] action create
    - create new file /Users/user/learn-chef/cookbooks/awesome_customers_rhel/.gitignore
    - update content in file /Users/user/learn-chef/cookbooks/awesome_customers_rhel/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

The "rhel" part of the cookbook's name is simply to distinguish it from the versions of this project for [Windows Server](/manage-a-web-app/windows/) and [Ubuntu](/manage-a-web-app/ubuntu/). We break many of the tutorials into these categories to help you focus on the platform you care about most. In practice, you could write a single cookbook that runs on multiple platforms. In that case, you might name the cookbook simply `awesome_customers`.

[END_BOX]

[START_BOX]

## 2. Apply the awesome\_customers_rhel cookbook on a Test Kitchen instance

Now let's verify that the empty configuration runs successfully on a CentOS 7 instance. Replace the contents of your copy of <% fp('~/learn-chef/cookbooks/awesome\_customers_rhel/.kitchen.yml') %> with this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_rhel/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.33.33"}]

provisioner:
  name: chef_zero

platforms:
  - name: centos-7.2

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_rhel::default]
    attributes:
```

This configuration resembles the one you created for the `motd_rhel` cookbook in the previous tutorial.

It also assigns the IP address 192.168.33.33 to the instance. You'll later use that address to access your web application from your workstation. We use an address that's in the 192.168.0.0 &mdash; 192.168.255.255 range because that range is defined as part of the [private IPv4 address space](https://en.wikipedia.org/wiki/Private_network), and is not accessible to the public Internet.

Next, from your terminal, move to the <% fp('~/learn-chef/cookbooks/awesome\_customers_rhel') %> directory.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/awesome_customers_rhel
```

Now run `kitchen list`. You'll see that the instance was not yet created.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen list
Instance           Driver   Provisioner  Verifier  Transport  Last Action
default-centos-72  Vagrant  ChefZero     Busser    Ssh        <Not Created>
```

Next, run `berks install`. You'll learn more about Berkshelf, a dependency management tool, later in this tutorial. Running `berks install` now sets up a file named <% fp 'Berksfile.lock' %> that helps Test Kitchen manage dependent cookbooks that you'll use later.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ berks install
Resolving cookbook dependencies...
Fetching 'awesome_customers_rhel' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Using awesome_customers_rhel (0.1.0) from source at .
```

Now run `kitchen converge`. This command downloads the base CentOS 7.2 box if needed, brings up an instance, installs `chef-client`, and applies the cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen converge
-----> Starting Kitchen (v1.7.2)
-----> Creating <default-centos-72>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'opscode-centos-7.2'...
[...]
       resolving cookbooks for run list: ["awesome_customers_rhel::default"]
       Synchronizing Cookbooks:
         - awesome_customers_rhel (0.1.0)
       Compiling Cookbooks...
       Converging 0 resources

       Running handlers:
       Running handlers complete
       Chef Client finished, 0/0 resources updated in 01 seconds
       Finished converging <default-centos-72> (0m19.72s).
-----> Kitchen is finished. (2m39.62s)
```

As expected, 0 resources were applied because the cookbook is empty. But it's a great first step to verifying that the instance comes up and `chef-client` runs successfully.

[TIP] If you need to take a break from this tutorial, you can run `kitchen destroy` to terminate your instance. Doing so is especially important when working with Amazon EC2, Microsoft Azure, or another Test Kitchen cloud driver, where you pay hourly for usage. Cleaning up your instance when you don't need it can also help you free up compute resources on your workstation if you're working with a virtual machine. When you return, just run `kitchen converge` to get back to the state where you left off.

Finally, verify that you can successfully connect to your instance over SSH. Run `kitchen login` to connect to your instance and then log out.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen login
Last login: Mon Feb  1 20:18:41 2016 from 10.0.2.2
[vagrant@default-centos-72 ~]$ logout
Connection to 127.0.0.1 closed.
```

[WINDOWS] If you're working from a Windows workstation and receive an error, it may be because you don't have an SSH client set up. The easiest way to set up an SSH client is to [install Git](/tutorials/manage-a-node/rhel/hosted/set-up-your-workstation#step6).

[END_BOX]
