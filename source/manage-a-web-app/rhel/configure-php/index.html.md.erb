---
title: 'Configure PHP'
order: 10
keywords: TODO
sections: []
next: {heading: Next, partial: next}
time_to_complete: 25 minutes
---
[HEADLINE] You can pass values from your recipe code to your templates. Placeholders that you provide in your template are replaced with those values when `chef-client` runs.

In this part, you'll configure PHP and create a basic PHP app that reads the records from your `customers` database and displays them on the web page. You'll be working in the <code class="file-path">web.rb</code> recipe that you created when you set up Apache.

You've done most of the ground work &ndash; for example you've already set up a place to hold your custom site and you've opened up port 80 to incoming traffic.

To configure PHP, you're going to install the native `php-mysql` package, which enables PHP code to connect to MySQL databases. You'll first install the `mod_php` Apache module, which enables Apache to interpret PHP files.

[START_BOX]

## 1. Install PHP

Recall that your `web` recipe looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# Install Apache and start the service.
httpd_service 'customers' do
  mpm 'prefork'
  action [:create, :start]
end

# Add the site configuration.
httpd_config 'customers' do
  instance 'customers'
  source 'customers.conf.erb'
  notifies :restart, 'httpd_service[customers]'
end

# Create the document root directory.
directory node['awesome_customers_rhel']['document_root'] do
  recursive true
end

# Write the home page.
file "#{node['awesome_customers_rhel']['document_root']}/index.html" do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner node['awesome_customers_rhel']['user']
  group node['awesome_customers_rhel']['group']
end
```

The `httpd` cookbook defines the `httpd_module` resource, which installs Apache modules. In <code class="file-path">web.rb</code>, append this `httpd_module` resource to install the `mod_php` Apache module.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# Install the mod_php Apache module.
httpd_module 'php' do
  instance 'customers'
end
```

Now append a `package` resource to install `php-mysql`.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# Install php-mysql.
package 'php-mysql' do
  action :install
  notifies :restart, 'httpd_service[customers]'
end
```

The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# Install Apache and start the service.
httpd_service 'customers' do
  mpm 'prefork'
  action [:create, :start]
end

# Add the site configuration.
httpd_config 'customers' do
  instance 'customers'
  source 'customers.conf.erb'
  notifies :restart, 'httpd_service[customers]'
end

# Create the document root directory.
directory node['awesome_customers_rhel']['document_root'] do
  recursive true
end

# Write the home page.
file "#{node['awesome_customers_rhel']['document_root']}/index.html" do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner node['awesome_customers_rhel']['user']
  group node['awesome_customers_rhel']['group']
end

# Install the mod_php Apache module.
httpd_module 'php' do
  instance 'customers'
end

# Install php-mysql.
package 'php-mysql' do
  action :install
  notifies :restart, 'httpd_service[customers]'
end
```

Apache needs to be restarted to enable PHP to use the `php-mysql` package. To do that, we use the [notifies](https://docs.chef.io/resource_common.html#notifications) attribute. The `notifies` attribute performs the `:restart` action on the `httpd-customers` service. But it does so only when it needs to; that is, only when the `package` resource actually performs the `:install` action.

[END_BOX]

[START_BOX]

## 2. Write the PHP application

Now we need to update the home page. Currently, your cookbook uses the `file` resource to directly set the contents of <code class="file-path">index.html</code>, like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# [...]

# Write the home page.
file "#{node['awesome_customers_rhel']['document_root']}/index.html" do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner node['awesome_customers_rhel']['user']
  group node['awesome_customers_rhel']['group']
end

# [...]
```

Now that we've set up the `web` recipe to configure PHP, we can convert our recipe to configure <code class="file-path">index.php</code> instead of <code class="file-path">index.html</code>.

However, our PHP code will require access to the `customers` database. In other words, it will need the `db_admin` user's password. To do that, let's convert our `file` resource to a `template` resource. Recall that the `template` resource enables you to provide placeholders that are later filled in when the recipe runs.

From your <% fp '~/learn-chef' %> directory, start by running this `chef generate template` command to create a home page template.

```bash
# ~/learn-chef
$ chef generate template cookbooks/awesome_customers_rhel index.php
Compiling Cookbooks...
Recipe: code_generator::template
  * directory[cookbooks/awesome_customers_rhel/templates] action create (up to date)
  * template[cookbooks/awesome_customers_rhel/templates/index.php.erb] action create
    - create new file cookbooks/awesome_customers_rhel/templates/index.php.erb
    - update content in file cookbooks/awesome_customers_rhel/templates/index.php.erb from none to e3b0c4
    (diff output suppressed by config)
```

Now, in <code class="file-path">web.rb</code>, find the `file` resource that sets up the home page.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# Write the home page.
file "#{node['awesome_customers_rhel']['document_root']}/index.html" do
  content '<html>This is a placeholder</html>'
  mode '0644'
  owner node['awesome_customers_rhel']['user']
  group node['awesome_customers_rhel']['group']
end
```

Replace that code with the following `template` resource.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/web.rb
# Write the home page.
template "#{node['awesome_customers_rhel']['document_root']}/index.php" do
  source 'index.php.erb'
  mode '0644'
  owner node['awesome_customers_rhel']['user']
  group node['awesome_customers_rhel']['group']
end
```

Now we can write the PHP program. Add this to <code class="file-path">index.php.erb</code>.

```html
<!-- ~/learn-chef/cookbooks/awesome_customers_rhel/templates/index.php.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Customers</title>
    <style>
      table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
        font-family: sans-serif;
        padding: 5px;
      }
      table tr:nth-child(even) td {
        background-color: #95c7ea;
      }
    </style>
</head>
<body>
<?php
$servername = "127.0.0.1";
$username = "db_admin";
$password = "database_password";
$dbname = "my_company";

// Create connection
$conn = new mysqli($servername, $username, $password, $dbname);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Perform SQL query
$sql = "SELECT * FROM customers";
$result = $conn->query($sql);

if ($result->num_rows > 0) {
    echo "<table>\n";
    // Output data of each row
    while($row = $result->fetch_assoc()) {
      echo "\t<tr>\n";
      foreach ($row as $col_value) {
          print "\t\t<td>$col_value</td>\n";
      }
      echo "\t</tr>\n";
    }
    echo "</table>";
} else {
    echo "0 results";
}

// Close connection
$conn->close();
?>
</body>
</html>
```

<% accordion('what-about-index-html', 'What about index.html?') do %>

<% markdown do %>

Recall that you've replaced <% fp '/var/www/customers/index.html' %> with <% fp '/var/www/customers/index.php' %>. Do you need to write additional code to remove <% fp 'index.html' %> from your test instance?

In this case, no.

<% fp 'index.html' %> served only as a temporary placeholder while you developed your cookbook, so there's no reason to write code to remove it. At the end of this part, you'll run your final configuration on a clean instance to ensure that any intermediate steps weren't necessary to produce the desired outcome.

<% end %>

<% end %>


[END_BOX]

[START_BOX]

## 3. Refactor the PHP application

Notice that our PHP code contains hard-coded values for the server name, database username, password, and database name.

```php
<?php
// ~/learn-chef/cookbooks/awesome_customers_rhel/templates/index.php.erb
$servername = "127.0.0.1";
$username = "db_admin";
$password = "database_password";
$dbname = "my_company";

// [...]
```

Let's do one final bit of refactoring to modify the PHP script to use our custom node attributes.

In <code class="file-path">index.php.erb</code>, find the part of the PHP program that looks like this.

```php
<?php
// ~/learn-chef/cookbooks/awesome_customers_rhel/templates/index.php.erb
$servername = "127.0.0.1";
$username = "db_admin";
$password = "database_password";
$dbname = "my_company";
```

Replace the values of the variables with the appropriate node attributes, like this:

<%= partial 'index-php-template' %>

[END_BOX]

[START_BOX]

## 4. Apply and verify the configuration

Let's apply the configuration and verify it.

Run `kitchen converge` to apply the `awesome_customers_rhel` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen converge
-----> Starting Kitchen (v1.7.2)
-----> Converging <default-centos-72>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
[...]
           - update content in file /var/www/customers/public_html/index.php from none to 2d6d89
           --- /var/www/customers/public_html/index.php	2016-02-04 01:30:01.760279731 +0000
           +++ /var/www/customers/public_html/.index.php20160204-32712-d2ikex	2016-02-04 01:30:01.760279731 +0000
           @@ -1 +1,56 @@
           +<!DOCTYPE html>
           +<html lang="en">
           +<head>
           +    <title>Customers</title>
           +    <style>
           +      table, th, td {
           +        border: 1px solid black;
           +        border-collapse: collapse;
           +        font-family: sans-serif;
           +        padding: 5px;
           +      }
           +      table tr:nth-child(even) td {
           +        background-color: #95c7ea;
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 11/208 resources updated in 32 seconds
       Finished converging <default-centos-72> (0m36.62s).
-----> Kitchen is finished. (0m37.25s)
```

In practice, you might log into your node and verify that PHP was installed properly. But let's skip ahead and browse to your web application from a browser on your workstation.

Navigate to your site at http://192.168.33.33.

![](misc/manage_customers_final.png)

Congratulations! You've successfully configured an entire application stack using Chef!

There's one more step to perform. For good measure, it's recommended that you apply your final configuration on a clean instance. This will help ensure that your final configuration is good, and not the result of any experimentation or intermediate steps you performed along the way.

First, destroy the current instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen destroy
-----> Starting Kitchen (v1.7.2)
-----> Destroying <default-centos-72>...
       ==> default: Forcing shutdown of VM...
       ==> default: Destroying VM and associated drives...
       Vagrant instance <default-centos-72> destroyed.
       Finished destroying <default-centos-72> (0m4.68s).
-----> Kitchen is finished. (0m5.27s)
```

Now run `kitchen converge` to bring up a clean instance and apply your cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen converge
-----> Starting Kitchen (v1.7.2)
-----> Creating <default-centos-72>...
       Bringing machine 'default' up with 'virtualbox' provider...
       ==> default: Importing base box 'opscode-centos-7.2'...
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 129/213 resources updated in 03 minutes 10 seconds
       Finished converging <default-centos-72> (3m33.23s).
-----> Kitchen is finished. (5m58.81s)
```

In this example, it took just under 6 minutes to apply the entire configuration on a clean instance. Refresh your web browser to confirm that the web application comes up on your new instance.

[END_BOX]
