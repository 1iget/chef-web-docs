---
title: 'Set SELinux to permissive mode'
order: 3
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 10 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
[HEADLINE] Chef Supermarket provides cookbooks that perform many common tasks but a single cookbook can have multiple versions. Specifying, or _pinning_, cookbook versions helps you lock down functionality to a certain point in time. When a newer version of a cookbook is released, you can first verify and test that version before you deploy it to production.

Enforcing your organization's security requirements is important. On Red Hat Enterprise Linux and CentOS, [Security-Enhanced Linux](http://en.wikipedia.org/wiki/Security-Enhanced_Linux), or SELinux, is enabled by default. It's likely that SELinux will be configured to run under _permissive_ mode, meaning it will log security violations, but it will not enforce restricted policies. For learning purposes, we'll ensure that system security is relaxed so we don't have to deal with the complexity it introduces.

Remember that Chef Supermarket is a place for the community to share cookbooks. Configuring SELinux is a common task, and the [selinux](https://supermarket.chef.io/cookbooks/selinux) cookbook on Chef Supermarket provides an easy way to accomplish that so you don't have to reinvent the wheel.

In this part, you'll use the [selinux](https://supermarket.chef.io/cookbooks/selinux) cookbook from Chef Supermarket to set SELinux to permissive mode.

[COMMENT] Keep in mind that for now your goal is to learn how Chef works. It's OK if you don't understand every detail of how the community cookbooks work because you're working in a safe environment. As you gain experience, you'll want to evaluate the code and documentation to ensure that the cookbooks you get from Chef Supermarket do exactly what you expect before you apply them to your production environment.

[START_BOX]

## 1. Reference the selinux cookbook

You don't need to manually download cookbooks from Chef Supermarket to use them. You'll learn how to automatically download cookbooks in a bit, but the first step is to reference the cookbooks you want to load.

The way you load one cookbook from inside another is to reference it in your cookbook's metadata file, <% fp('~/learn-chef/cookbooks/awesome\_customers_rhel/metadata.rb') %>. To use the `selinux` cookbook, append the line `depends 'selinux', '~> 0.9.0'` to <code class="file-path">metadata.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/metadata.rb
name 'awesome_customers_rhel'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_rhel'
long_description 'Installs/Configures awesome_customers_rhel'
version '0.1.0'

depends 'selinux', '~> 0.9.0'
```

We also specify the version of the `selinux` cookbook we want to use. Specifying, or _pinning_, the cookbook version helps you lock down functionality to a certain point in time. When a newer version of a cookbook is released, you can first verify and test that version before you deploy it to production. That way, you can adopt the latest changes and functionality when you're ready.

How did we know to specify version `0.9.0`? One way is by reading the latest version from the `selinux` cookbook's [page](https://supermarket.chef.io/cookbooks/selinux) on Supermarket.

![The selinux cookbook version](misc/supermarket_selinux_version.png)

Another way to get version information is through the `knife cookbook site show` command. The following command retrieves information for the `selinux` cookbook and searches the result for the latest version.

```bash
# ~/learn-chef
$ knife cookbook site show selinux | grep latest_version
latest_version:     https://supermarket.chef.io/api/v1/cookbooks/selinux/versions/0.9.0
```

There are [multiple ways to specify version constraints](http://docs.chef.io/cookbook_versions.html). The `~>` syntax, called the _pessimistic version constraint_, tells Chef that we want the latest version of the `selinux` cookbook that is greater than or equal to `0.9.0` but less than `0.10.0`. The third digit in a Chef cookbook's version typically relates to bug fixes or patches that are compatible with prior versions.

[COMMENT] For this tutorial, just to ensure that what you see matches the output that is shown, we recommend that you use the versions that we specify, even if a newer version is available. We'll periodically update this tutorial to match newer versions of the community cookbooks.

[END_BOX]

[START_BOX]

## 2. Run the selinux::permissive recipe

For our web application project, we'll use what's called the _application cookbook pattern_. An application cookbook typically contains multiple recipes, where each recipe configures one part of the system. The default recipe, <code class="file-path">default.rb</code>, lists these recipes in the order needed to build your application or service.

The `selinux::permissive` recipe does everything we need to ensure that SELinux is running in permissive mode. To run this recipe, add the line `include_recipe 'selinux::permissive'` to the beginning of your cookbook's default recipe, <code class="file-path">default.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/recipes/default.rb
include_recipe 'selinux::permissive'
```

[COMMENT] Remember, order matters when you write and run recipes. That's why we'll ensure that the `selinux::permissive` recipe is run before everything else.

[END_BOX]

[START_BOX]

## 3. Apply and verify the configuration

Let's apply and then verify the configuration. Run `kitchen converge` to apply the `awesome_customers_rhel` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-centos-72>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-centos-72>
       Starting Chef Client, version 12.6.0
       resolving cookbooks for run list: ["awesome_customers_rhel::default"]
       Synchronizing Cookbooks:
         - selinux (0.9.0)
         - awesome_customers_rhel (0.1.0)
       Compiling Cookbooks...
       Converging 3 resources
       Recipe: selinux::_common
        (up to date)
        (up to date)
       Recipe: selinux::permissive
        (up to date)

       Running handlers:
       Running handlers complete
       Chef Client finished, 0/3 resources updated in 05 seconds
       Finished converging <default-centos-72> (0m11.07s).
-----> Kitchen is finished. (0m11.67s)
```

In this example, SELinux was already set to permissive, so Chef takes no action.

But to be sure, let's log in to the instance and verify things. Run `kitchen login` to log in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_rhel
$ kitchen login
Last login: Mon Feb  1 21:15:53 2016 from 10.0.2.2
[vagrant@default-centos-72 ~]$
```

From your instance, run `sestatus` to get the SELinux status.

```bash
# ~
[vagrant@default-centos-72 ~]$ sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   permissive
Mode from config file:          permissive
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      28
```

You'll see that **Current mode:** is set to **permissive**.

Now log back out.

```bash
# ~
[vagrant@default-centos-72 ~]$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]
