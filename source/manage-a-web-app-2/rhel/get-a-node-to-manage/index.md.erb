---
title: 'Get a node to manage'
order: 11
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
---
To complete this tutorial, you'll need three things &dash; the Chef Development Kit (Chef DK) installed on your workstation, a Red Hat Enterprise Linux or CentOS node to manage, and a hosted Chef account.

This is a <% fp('/blah/html/blah.html') %>.

You'll also create a Chef code repository and a blank cookbook on your workstation to set up your web application project.

[COMMENT] If you want to clean up your workstation or your Chef server after you complete this tutorial or you want to repeat the tutorial from the beginning, [follow these steps](/manage-a-web-app/rhel/apply-and-verify-your-final-web-application-configuration#howtocleanupyourenvironment) at the end of this tutorial.

## 2. Get a node to manage

Recall that a _node_ is any physical machine, cloud instance, or virtual machine that Chef manages.

All you need to do right now is bring up a clean, 64-bit instance of Red Hat Enterprise Linux 6.5 or CentOS 6.5 that will serve as your node. Your node should not be your workstation. Be sure that:

* its IP address is accessible from your network.
* it has inbound network access on ports 22 (SSH) and 80 (HTTP) and outbound network access on port 443 (HTTPS).
* it meets the [system requirements](https://docs.chef.io/chef_system_requirements.html#chef-client) for running `chef-client`.
* you have root or `sudo` access.

[WARN] Remember to use a 64-bit instance of Red Hat Enterprise Linux or CentOS. This tutorial does not support 32-bit instances.

[WARN] Software such as Apache is configured differently in various releases of Red Hat Enterprise Linux and CentOS. For learning purposes, we recommend that you use Red Hat Enterprise Linux 6.5 or CentOS 6.5 as your node so that you can more easily verify your progress. However, if you're unable to use Red Hat Enterprise Linux 6.5 or CentOS 6.5, other versions can work with some modification.

[WARN] Some of the cookbooks and features that you'll use in this tutorial require `chef-client` version 12.4.0 or greater on your node. If you have an existing node that has a prior version of `chef-client`, [upgrade to the latest version](https://downloads.chef.io/chef-client/).

## 3. Get a hosted Chef account

You'll store your cookbooks on a Chef server so that your node can access them. Hosted Chef is the easiest way to work through this tutorial. We recommend you work through [Learn to manage a node](/manage-a-node/rhel/) if you do not have a hosted Chef account that you can access from your workstation.

[COMMENT] If your organization is [running its own Chef server](https://downloads.chef.io/chef-server/) and you know how to work with it, you can use that Chef server instead of setting up a hosted Chef account.  

[START_BOX]

## 2. Create a file on your node for the data bag key

Your node will need the data bag key when it accesses your data bag later in this tutorial. Let's prepare your node now.

In this step you'll copy the data bag key to the <code class="file-path">/etc/chef</code> directory on your node. You can copy the key file to any location that you have access to if you require it to exist in a different location.

Perform the steps that match your workstation setup.

### From a Linux or Mac OS workstation

The `scp` command securely copies files from one computer to another.

If you're using a user-name and password to connect to your node, run the following command to copy the secret key to your node. As needed, replace the IP address with your node's IP address and `root` with your user name.

```bash
# ~/learn-chef
$ scp /tmp/encrypted_data_bag_secret root@52.10.205.36:/etc/chef
encrypted_data_bag_secret                     100%  684     0.7KB/s   00:00
```

If you're using key-based encryption, the command looks similar to this.

```bash
# ~/learn-chef
$ scp -i ~/.ssh/my.pem /tmp/encrypted_data_bag_secret root@52.10.205.36:/etc/chef
encrypted_data_bag_secret                     100%  684     0.7KB/s   00:00
```

### From a Windows workstation

You need to install a program to securely copy files from Windows to Linux. [PuTTY](http://www.chiark.greenend.org.uk/~sgtatham/putty/) and [WinSCP](http://winscp.net) are popular options.

Once you have a secure copy program set up, copy <code class="file-path">C:\\temp\\encrypted\_data\_bag\_secret</code> from your Windows workstation to the <code class="file-path">/etc/chef</code> directory on your node.

[TIP] The [PuTTY User Manual](http://the.earth.li/~sgtatham/putty/0.60/htmldoc/Chapter5.html) shows how to use PuTTY's PSCP utility to securely copy a file from Windows to Linux.<br>If you're using Amazon EC2 to host your node, the [AWS documentation](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/putty.html) can help get you started.

[END_BOX]

[START_BOX]

## 3. Create a data bag to hold your passwords

The first step to create a data bag is to create an object on the Chef server. Run the following command to create a data bag named `passwords`.

```bash
# ~/learn-chef
$ knife data bag create passwords
Created data_bag[passwords]
```

This command creates an object for the `passwords` data bag on the Chef server only &ndash; it does not create anything on your workstation.

The next step is to create a location on your workstation to hold the contents of the data bag. All data bags are stored in your Chef repo's <code class="file-path">data\_bags</code> directory. Each data bag is  stored in a subdirectory of <code class="file-path">data\_bags</code>. `knife` understands this directory structure so you don't need to enter the full path when working with data bags from the command line.

Now create a directory on your workstation for your `passwords` data bag.

```bash
# ~/learn-chef
$ mkdir data_bags/passwords
```

You now have a data bag object on your Chef server and a location in your Chef repo to store the items.

[END_BOX]

[START_BOX]

## 4. Put the MySQL root password in the data bag

To securely store the MySQL root password in the data bag, we need to create an encrypted data bag item.

Data bag items are stored as files. Create a file named <code class="file-path">sql\_server\_root\_password.json</code> in the <code class="file-path">data\_bags/passwords</code> directory and add these contents.

```ruby
# ~/learn-chef/data_bags/passwords/sql_server_root_password.json
{
  "id": "sql_server_root_password",
  "password": "learnchef_mysql"
}
```

[COMMENT] If you prefer, you can use a different password. Just replace `learnchef_mysql` with your password.

Every data bag item has an `id` field that identifies it. `"password": "learnchef_mysql"` is the data in the form of a key-value pair. A data bag item can have multiple key-value pairs.

Now run this command to encrypt the data bag item and upload it to the Chef server. The `--secret-file` argument specifies the location of your secret key file that's used to perform the encryption.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef
$ knife data bag from file passwords sql_server_root_password.json --secret-file /tmp/encrypted_data_bag_secret
Updated data_bag_item[passwords::sql_server_root_password]
```

### From a Windows workstation

```ps
# ~\learn-chef
$ knife data bag from file passwords sql_server_root_password.json --secret-file C:\temp\encrypted_data_bag_secret
Updated data_bag_item[passwords::sql_server_root_password]
```

[END_BOX]

[START_BOX]

## 5. Verify the contents of your data bag

The `knife data bag` command performed the encryption and uploaded the data to your Chef server. Let's confirm that the data is encrypted and that we can decrypt it using our secret key file.

Run this command to show the contents of the `sql_server_root_password` item in the `passwords` data bag.

```bash
# ~/learn-chef
$ knife data bag show passwords sql_server_root_password
id:       sql_server_root_password
password:
  cipher:         aes-256-cbc
  encrypted_data: d6Lbq+83+cjfheU4sHF5c33EmtGMTmxO1yuPryHuOqI=

  iv:             IeEuOPyQR/iXxn7DTPoUKQ==

  version:        1
```

The data comes back encrypted because you did not specify a secret key to decrypt the file. This is good because it confirms that the data is safely encrypted on the Chef server.

Run the same command again, but this time specify the `--secret-file` argument like you did when you encrypted the data bag item.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef
$ knife data bag show passwords sql_server_root_password --secret-file /tmp/encrypted_data_bag_secret
id:       sql_server_root_password
password: learnchef_mysql
```

### From a Windows workstation

```ps
# ~\learn-chef
$ knife data bag show passwords sql_server_root_password --secret-file C:\temp\encrypted_data_bag_secret
id:       sql_server_root_password
password: learnchef_mysql
```

The output confirms that your secret key file can successfully decrypt your data bag item. In the next lesson, you'll learn how to decrypt the data bag item from your Chef recipe.

[END_BOX]

[START_BOX]

## 6. Put the customer database password in the data bag

Now let's follow the same process to create an encrypted data bag item to hold the password for our web app's customer database.

Create a file named <code class="file-path">db\_admin\_password.json</code> in the <code class="file-path">data\_bags/passwords</code> directory and add these contents.

```ruby
# ~/learn-chef/data_bags/passwords/db_admin_password.json
{
  "id": "db_admin_password",
  "password": "database_password"
}
```

[COMMENT] Again, you can use your own password if you prefer.

Now run the following commands to encrypt the data bag item, upload it to the Chef server, and verify that you can successfully retrieve and decrypt the data back again.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef
$ knife data bag from file passwords db_admin_password.json --secret-file /tmp/encrypted_data_bag_secret
Updated data_bag_item[passwords::db_admin_password]
$ knife data bag show passwords db_admin_password --secret-file /tmp/encrypted_data_bag_secret
id:       db_admin_password
password: database_password
```

### From a Windows workstation

```ps
# ~\learn-chef
$ knife data bag from file passwords db_admin_password.json --secret-file C:\temp\encrypted_data_bag_secret
Updated data_bag_item[passwords::db_admin_password]
$ knife data bag show passwords db_admin_password --secret-file C:\temp\encrypted_data_bag_secret
id:       db_admin_password
password: database_password
```

[END_BOX]

[START_BOX]

## 7. Store the location of the data bag key file

Let's also set a node attribute that points to the location of the secret key file on your node. The `database` recipe will need this path name to perform the decryption.

Add a default node attribute to your attributes file, <code class="file-path">default.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_rhel/attributes/default.rb
default['awesome_customers']['user'] = 'web_admin'
default['awesome_customers']['group'] = 'web_admin'

default['awesome_customers']['document_root'] = '/var/www/customers/public_html'

default['awesome_customers']['enabled_firewall_rules'] = %w(firewall_http firewall_sshd)

default['awesome_customers']['passwords']['secret_path'] = '/etc/chef/encrypted_data_bag_secret'
```

<code class="file-path">/etc/chef/encrypted\_data\_bag\_secret</code> is the location of the secret file on your node.

[END_BOX]

[START_BOX]

## 8. Prepare your data bag items for source control

The `knife data bag` command performed the encryption and uploaded the data to your Chef server. This step did not affect the file on your workstation.

For example, notice that the `sql_server_root_password` data bag item on your local system still contains unencrypted data.

```bash
# ~/learn-chef
$ cat ~/learn-chef/data_bags/passwords/sql_server_root_password.json
{
  "id": "sql_server_root_password",
  "password": "learnchef_mysql"
}
```

You never want to store this data in source control or any other non-secure location. Although we won't work with source control in this tutorial, let's encrypt your data bag items locally to see how to prepare sensitive data for use with source control.

Run the same `knife data bag from file` command that you ran earlier, but this time provide the `--local-mode` argument to apply the encryption to your local system, and not the Chef server.

First, encrypt your MySQL password locally.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef
$ knife data bag from file passwords sql_server_root_password.json --secret-file /tmp/encrypted_data_bag_secret --local-mode
Updated data_bag_item[passwords::sql_server_root_password]
```

### From a Windows workstation

```ps
# ~\learn-chef
$ knife data bag from file passwords sql_server_root_password.json --secret-file C:\temp\encrypted_data_bag_secret --local-mode
Updated data_bag_item[passwords::sql_server_root_password]
```

Now encrypt your database password.

### From a Linux or Mac OS workstation

```bash
# ~/learn-chef
$ knife data bag from file passwords db_admin_password.json --secret-file /tmp/encrypted_data_bag_secret --local-mode
Updated data_bag_item[passwords::db_admin_password]
```

### From a Windows workstation

```ps
# ~\learn-chef
$ knife data bag from file passwords db_admin_password.json --secret-file C:\temp\encrypted_data_bag_secret --local-mode
Updated data_bag_item[passwords::db_admin_password]
```

Your data bag items are now encrypted locally, and are safe to commit to source control.

```bash
# ~/learn-chef
$ cat ~/learn-chef/data_bags/passwords/sql_server_root_password.json
{
  "id": "sql_server_root_password",
  "password": {
    "encrypted_data": "nKTHAg+Y3xE56PGUrxVMgdbi6VcLSCLqKIB1tcPlqyMmFU/Fcb5B2+Rjv8w0\nkiKt\n",
    "iv": "y/GG/9AaRHAMd5BnyE1u2w==\n",
    "version": 1,
    "cipher": "aes-256-cbc"
  }
}
```

[WARN] Remember, _never_ commit passwords or other sensitive data to source control in plain text because it will forever exist in that file's version history.

[WARN] Also never store your secret key in source control. We created the secret key file in a temporary directory to help prevent this from happening by accident. If you use Git, you can also add an entry to your <code class="file-path">gitignore</code> file to explicitly ignore your secret key file.

[TIP] It's still up to you to implement an appropriate distribution mechanism for your secret keys. [chef-vault](https://github.com/Nordstrom/chef-vault) is commonly used to solve the key distribution problem. `chef-vault` uses the existing RSA key pair that your node uses to communicate with the Chef server to create an asymmetric key used for decryption. This provides a more automatic key distribution mechanism and enables you to control which nodes have access to sensitive data.

[END_BOX]