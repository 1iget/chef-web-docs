---
title: 'Set up your workstation for local development'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
---
The first part of this tutorial builds on the previous tutorial, [Learn to develop your infrastructure code locally](/local-development-2/rhel/), and has the same set up requirements. We recommend you work through the previous tutorial before starting this one. Then come back to this page.

[COMMENT] Remember, although you're configuring a CentOS server, your workstation can be any OS you choose &ndash; be it Mac OS, Windows, or some other flavor of Linux. Your workstation can also be a virtual machine that's running on VMWare Fusion or another hypervisor that enables nested virtualization. 

At this point, your workstation should:

* have the latest version of the Chef DK.
* have a programmer's text editor that you're comfortable working with.
* have the <% fp('~/learn-chef') %> directory for you to work in.
* have an SSH client &ndash; we recommend installing Git if you're using a Windows workstation.

Having an SSH client is important because you'll log in to your Linux instance to verify your work.

You should also be familiar with the basics of Test Kitchen, such as how to create, converge, and destroy instances.

Test Kitchen works with a number of cloud and virtualization providers. In this tutorial you'll use [VirtualBox] (https://www.virtualbox.org) and [Vagrant](https://www.vagrantup.com) to run your work on a local virtual machine. You can later use the cookbook you build in this tutorial to try out Test Kitchen drivers for other environments.

[TIP] If you're already familiar with Chef and just want to see the completed web application configuration in action, [see this appendix](/manage-a-web-app-2/rhel/bring-up-the-web-app-using-test-kitchen/) for a quickstart. The quickstart can also help you set up the configuration a second time from scratch after you complete this tutorial.
