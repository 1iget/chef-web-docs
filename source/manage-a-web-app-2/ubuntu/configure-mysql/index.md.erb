---
title: 'Configure MySQL'
order: 8
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
Now let's configure MySQL. You'll install the MySQL server and client packages and start the service.

For this part, we'll use these cookbooks from Chef Supermarket:

| Cookbook           | Description |
|-------------------:|-------------|
| [mysql2\_chef\_gem](https://supermarket.chef.io/cookbooks/mysql2_chef_gem) | installs the `mysql2` Ruby gem, which enables your Chef code to communicate with MySQL. |
| [mysql](https://supermarket.chef.io/cookbooks/mysql) | enables us to configure the MySQL server and client packages. |

[START_BOX]

## 1. Reference the cookbooks we'll use

We'll load the MySQL cookbooks just like we did the `selinux`, `firewall`, and `httpd` cookbooks. Append two `depends` statements to <code class="file-path">metadata.rb</code>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/metadata.rb
name 'awesome_customers_ubuntu'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_ubuntu'
long_description 'Installs/Configures awesome_customers_ubuntu'
version '0.1.0'

depends 'selinux', '~> 0.9.0'
depends 'firewall', '~> 2.4.0'
depends 'httpd', '~> 0.3.4'
depends 'mysql2_chef_gem', '~> 1.0.2'
depends 'mysql', '~> 6.1.2'
```

[END_BOX]

[START_BOX]

## 2. Create the database recipe

From your <% fp('~/learn-chef') %> directory, create a recipe named `database` to hold your database configuration code.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_ubuntu database
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_ubuntu/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_ubuntu/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_ubuntu/spec/unit/recipes/database_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/database_spec.rb
    - update content in file cookbooks/awesome_customers_ubuntu/spec/unit/recipes/database_spec.rb from none to 5fc56b
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_ubuntu/recipes/database.rb] action create
    - create new file cookbooks/awesome_customers_ubuntu/recipes/database.rb
    - update content in file cookbooks/awesome_customers_ubuntu/recipes/database.rb from none to 6793ff
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 3. Install MySQL

Now let's install the MySQL client and service packages. We'll also need to install the `mysql2` Ruby gem before we configure MySQL.

Add the following to <code class="file-path">database.rb</code>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/recipes/database.rb
mysql2_chef_gem 'default' do
  action :install
end

# Configure the MySQL client.
mysql_client 'default' do
  action :create
end

# Load the secrets file and the encrypted data bag item that holds the root password.
password_secret = Chef::EncryptedDataBagItem.load_secret(node['awesome_customers_ubuntu']['secret_file'])
password_data_bag_item = Chef::EncryptedDataBagItem.load('database_passwords', 'mysql_customers', password_secret)

# Configure the MySQL service.
mysql_service 'default' do
  initial_root_password password_data_bag_item['root_password']
  action [:create, :start]
end
```

The `mysql2_chef_gem` resource comes from the `mysql2_chef_gem` cookbook.

The other two resources &ndash; `mysql_client` and `mysql_service` &ndash; come from the `mysql` cookbook. To keep things moving, we'll skip past the details of how these resources work. In practice, you might first [review the source code](https://github.com/chef-cookbooks/mysql) to gain a better understanding of the implementation before you apply the code to your production servers.

The `database` recipe also decrypts and uses the MySQL root password. Here's how that breaks down:

* Line 11 loads the secret key file into memory.
  * The `node['awesome_customers_ubuntu']['secret_file']` node attribute does not exist yet &ndash; you'll add that in the next step.
* Line 12 loads the encrypted data bag item into memory and decrypts the data.
  * `database_passwords` refers to the data bag.
  * `mysql_customers` refers to the data bag item to decrypt.
  * `password_secret` refers to the secret key that was loaded into memory on line 11.
* Line 16 retrieves the decrypted value of the `root_password` field from the data bag item (for example, "mysql\_root_password") and passes that value to the `mysql_service` resource to set the initial root password.

[END_BOX]

[START_BOX]

## 4. Add a node attribute for your secret key's location 

At this point, your secret key file, <% fp('~/learn-chef/.chef/encrypted_data_bag_secret') %>, exists only on your workstation. You'll need to transfer your secret key to your server before you run `chef-client`. 

As you develop your cookbook using Test Kitchen, you need to configure your<br><% fp('~/learn-chef/.chef/encrypted_data_bag_secret') %> file to transfer your secret key to your test instance. You'll do that in the next step.

When you're ready to run your cookbook on a node, you'll need to copy your secret key to your node before you initiate the bootstrap process. One way to do that is to run `scp` or another secure file transfer tool.

In the previous step, you referenced the `node['awesome_customers_ubuntu']['secret_file']` node attribute. This node attribute refers to the location of the secret file on your test instance or node. This node attribute does not exist yet, so let's add it now.

Append a node attribute to your default attributes file, <% fp('default.rb') %>, making the entire file look like this. 

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/attributes/default.rb
default['firewall']['allow_ssh'] = true
default['firewall']['firewalld']['permanent'] = false
default['firewall']['ipv6_enabled'] = false
default['awesome_customers_ubuntu']['open_ports'] = 80

default['awesome_customers_ubuntu']['user'] = 'web_admin'
default['awesome_customers_ubuntu']['group'] = 'web_admin'
default['awesome_customers_ubuntu']['document_root'] = '/var/www/customers/public_html'

default['awesome_customers_ubuntu']['secret_file'] = '/etc/chef/encrypted_data_bag_secret'
```

The path <% fp('/etc/chef/encrypted_data_bag_secret') %> is commonly used to store the secret key file on a node, so we make that the default value. Later in this tutorial, you'll copy your secret key to this location on your node as you prepare your node for the bootstrap process.

In the next step, you'll see how to override this value for use with Test Kitchen.

[END_BOX]

[START_BOX]

## 5. Configure Test Kitchen to copy your data bag item and secret key

Because we're still developing our cookbook locally, let's set up Test Kitchen to copy the data bag item and secret file to the test instance.

So far, your <% fp '.kitchen.yml' %> file looks like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.34.34"}]

provisioner:
  name: chef_zero

platforms:
  - name: ubuntu-14.04
    driver:
      customize:
        memory: 256

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_ubuntu::default]
    attributes:
```

You need to add these three configuration settings to enable Test Kitchen to copy your data bag items and secret key to your test instance:

* The root directory on your workstation where your data bags are located.
* The location of your secret file on your workstation.

The paths you specify can be absolute or relative to the location of your <% fp '.kitchen.yml' %> file.

You'll also need to override the value of the `node['awesome_customers_ubuntu']['secret_file']` node attribute. That's because Test Kitchen copies your secret file to the <% fp '/tmp/kitchen' %> directory on the instance, but the attribute currently points to <% fp '/etc/chef' %>.

Modify your copy of <% fp '.kitchen.yml' %> to look like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.34.34"}]

provisioner:
  name: chef_zero

platforms:
  - name: ubuntu-14.04
    driver:
      customize:
        memory: 256

suites:
  - name: default
    data_bags_path: "../../data_bags"
    run_list:
      - recipe[awesome_customers_ubuntu::default]
    provisioner:
      encrypted_data_bag_secret_key_path: "../../.chef/encrypted_data_bag_secret"
    attributes:
      awesome_customers_ubuntu:
        secret_file: '/tmp/kitchen/encrypted_data_bag_secret'
```

Note that you added these settings:

* Line 18 specifies the root directory on your workstation where your data bags are located.
* Lines 21&mdash;22 specify the location of your secret file on your workstation.
* Lines 24&mdash;26 override the `node['awesome_customers_ubuntu']['secret_file']` node attribute.  

[END_BOX]

[START_BOX]

## 6. Set the database recipe to run

Append an `include_recipe` statement to your default recipe, <code class="file-path">default.rb</code>. The entire file will look like this.

```ruby
include_recipe 'selinux::permissive'
include_recipe 'awesome_customers_ubuntu::firewall'
include_recipe 'awesome_customers_ubuntu::web_user'
include_recipe 'awesome_customers_ubuntu::web'
include_recipe 'awesome_customers_ubuntu::database'
```

[END_BOX]

[START_BOX]

## 7. Apply and verify the configuration

Let's apply the configuration and verify that MySQL is properly configured. Run `kitchen converge` to apply the `awesome_customers_ubuntu` cookbook. 

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing data_bags
       Preparing secret
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.6.0
       resolving cookbooks for run list: ["awesome_customers_ubuntu::default"]
       Synchronizing Cookbooks:
         - awesome_customers_ubuntu (0.1.0)
         - selinux (0.9.0)
         - mysql2_chef_gem (1.0.2)
         - mysql (6.1.2)
         - httpd (0.3.4)
         - firewall (2.4.0)
         - chef-sugar (3.3.0)
         - mariadb (0.3.1)
         - yum-mysql-community (0.1.21)
         - smf (2.2.7)
         - yum (3.9.0)
         - yum-epel (0.6.5)
         - rbac (1.0.3)
         - compat_resource (12.7.0)
         - build-essential (2.2.4)
         - apt (2.9.2)
       Compiling Cookbooks...
[...]
       Recipe: awesome_customers_ubuntu::database
         * mysql_client[default] action create
        (up to date)
        (up to date)
            (up to date)
         * mysql_service[default] action create

             - install version 5.5.47-2.el7 of package mysql-community-server
        (up to date)
           * service[default :create mysql] action disable (up to date)
           * group[default :create mysql] action create (up to date)
           * user[default :create mysql] action create (up to date)
           * file[default :create /etc/mysql/my.cnf] action delete (up to date)
           * file[default :create /etc/my.cnf] action delete
             - delete file /etc/my.cnf


           * directory[default :create /etc/mysql-default] action create

             - change mode from '' to '0750'
             - change owner from '' to 'mysql'
[...]
       Running handlers:
       Running handlers complete
       Chef Client finished, 38/200 resources updated in 02 minutes 35 seconds
       Finished converging <default-ubuntu-1404> (2m41.91s).
-----> Kitchen is finished. (2m42.72s)
```

Now let's verify the database configuration. Start by logging in to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen login
Last login: Wed Feb  3 21:24:18 2016 from 10.0.2.2
[vagrant@default-ubuntu-1404 ~]$
```

First, verify that the MySQL service is running.

```bash
[vagrant@default-ubuntu-1404 ~]$ sudo netstat -tap | grep mysql
tcp        0      0 0.0.0.0:mysql           0.0.0.0:*               LISTEN      28435/mysqld
```

You'll see that the `mysqld` service is in the `LISTEN` state.

Now verify that you can access the databases that come preconfigured with the installation. If you chose a different root password when you created the data bag item, replace "mysql\_root_password" with yours. 

```bash
[vagrant@default-ubuntu-1404 ~]$ mysqlshow -h 127.0.0.1 -uroot -pmysql_root_password
+--------------------+
|     Databases      |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
```

Looks good! Now log out.

```bash
# ~
[vagrant@default-ubuntu-1404 ~]$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]