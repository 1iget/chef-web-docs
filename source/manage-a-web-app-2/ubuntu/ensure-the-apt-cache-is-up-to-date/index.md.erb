---
title: 'Ensure the apt cache is up to date'
order: 3
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 10 minutes
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
[HEADLINE] Chef Supermarket provides cookbooks that perform many common tasks. Specifying, or _pinning_, dependent cookbook versions helps you lock down functionality to a certain point in time. When a newer version of a cookbook is released, you can first verify and test that version before you deploy it to production.

A common requirement is to ensure that the package manager cache &ndash; Ubuntu's built-in package manager is named `apt` &ndash; is up to date before installing Apache, MySQL, or any other packages. This step synchronizes the system's package index to the latest list of what packages are available.

You could add code to your cookbook that runs `apt-get update` every time `chef-client` runs on your node. But writing a cookbook is an iterative process. You'll run it multiple times as you experiment, add features, fix problems, and so on. You don't necessarily want to update the `apt` cache every time you run your cookbook because the process can take some time to complete.

That's where the [apt](https://supermarket.chef.io/cookbooks/apt) cookbook on Chef Supermarket comes in. The `apt` cookbook updates the `apt` cache only on the first run, and every 24 hours thereafter. You can modify these defaults if you need to.

Remember that Chef Supermarket is a place for the community to share cookbooks. In [Learn to manage a node](/manage-a-node/ubuntu/), you downloaded the Learn Chef Apache cookbook so you didn't have to type it in a second time. The `apt` cookbook on Chef Supermarket contains everything you need to keep the `apt` cache up-to-date.

[COMMENT] Keep in mind that for now your goal is to learn how Chef works. It's OK if you don't understand every detail of how the community cookbooks work because you're working in a safe environment. As you gain experience, you'll want to evaluate the code and documentation to ensure that the cookbooks you get from Chef Supermarket do exactly what you expect before you apply them to your production environment.

[START_BOX]

## 1. Reference the apt cookbook

You don't need to manually download cookbooks from Chef Supermarket to use them. You'll learn how to automatically download cookbooks in a bit, but the first step is to reference the cookbooks you want to load.

The way you load one cookbook from inside another is to reference it in your cookbook's metadata file,<br><% fp('~/learn-chef/cookbooks/awesome_customers_ubuntu/metadata.rb') %>. To use the `apt` cookbook, append the line `depends 'apt', '~> 2.9.2'` to <% fp('metadata.rb') %> making the entire file look like this.

```ruby
# ~/chef-repo/cookbooks/awesome_customers_ubuntu/metadata.rb
name 'awesome_customers_ubuntu'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_ubuntu'
long_description 'Installs/Configures awesome_customers_ubuntu'
version '0.1.0'

depends 'apt', '~> 2.9.2'
```

We also specify the version of the `apt` cookbook we want to use. Specifying, or _pinning_, the cookbook version helps you lock down functionality to a certain point in time. When a newer version of a cookbook is released, you can first verify and test that version before you deploy it to production. That way, you can adopt the latest changes and functionality when you're ready.

How did we know to specify version `2.9.2`? One way is by reading the latest version from the `apt` cookbook's [page](https://supermarket.chef.io/cookbooks/apt) on Supermarket.

![The apt cookbook version](misc/supermarket_apt_version.png)

Another way to get version information is through the `knife cookbook site show` command. The following command retrieves information for the `apt` cookbook and searches the result for the latest version.

```bash
# ~/chef-repo
$ knife cookbook site show apt | grep latest_version
latest_version:     https://supermarket.chef.io/api/v1/cookbooks/apt/versions/2.9.2
```

There are [multiple ways to specify version constraints](http://docs.chef.io/cookbook_versions.html). The `~>` syntax, called the _pessimistic version constraint_, tells Chef that we want the latest version of the `apt` cookbook that is greater than or equal to `2.9.2` but less than `2.10.0`. The third digit in a Chef cookbook's version typically relates to bug fixes or patches that are compatible with prior versions.

[COMMENT] For this tutorial, just to ensure that what you see matches the output that is shown, we recommend that you use the versions that we specify, even if a newer version is available. We'll periodically update this tutorial to match newer versions of the community cookbooks.

[END_BOX]

[START_BOX]

## 2. Run the apt cookbook's default recipe

For our web application project, we'll use what's called the _application cookbook pattern_. An application cookbook typically contains multiple recipes, where each recipe configures one part of the system. The default recipe, <code class="file-path">default.rb</code>, lists these recipes in the order needed to build your application or service.

The `apt` cookbook's default recipe does everything we need to ensure the `apt` cache is up to date. To run this recipe, add the following to your cookbook's default recipe, <code class="file-path">default.rb</code>.

```ruby
# ~/chef-repo/cookbooks/awesome_customers/recipes/default.rb
include_recipe 'apt::default'
```

[COMMENT] Remember, order matters when you write and run recipes. That's why we'll always run this recipe before everything else.

[END_BOX]

[START_BOX]

## 3. Apply and verify the configuration

Let's apply and then verify the configuration. Run `kitchen converge` to apply the `awesome_customers_ubuntu` cookbook. 

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen converge
-----> Starting Kitchen (v1.4.2)
-----> Converging <default-ubuntu-1404>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.0.1...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
-----> Chef Omnibus installation detected (install only if missing)
       Transferring files to <default-ubuntu-1404>
       Starting Chef Client, version 12.6.0
       resolving cookbooks for run list: ["awesome_customers_ubuntu::default"]
       Synchronizing Cookbooks:
         - awesome_customers_ubuntu (0.1.0)
         - apt (2.9.2)
       Compiling Cookbooks...
       Converging 11 resources
       Recipe: apt::default
         * file[/var/lib/apt/periodic/update-success-stamp] action nothing (skipped due to action :nothing)
         * directory[/etc/apt/apt.conf.d] action create (up to date)
         * cookbook_file[/etc/apt/apt.conf.d/15update-stamp] action create
           - create new file /etc/apt/apt.conf.d/15update-stamp
           - update content in file /etc/apt/apt.conf.d/15update-stamp from none to 174cdb
           --- /etc/apt/apt.conf.d/15update-stamp	2016-02-05 03:24:09.120892000 +0000
           +++ /etc/apt/apt.conf.d/.15update-stamp20160205-5476-1nxjjqm	2016-02-05 03:24:09.120892000 +0000
           @@ -1 +1,2 @@
           +APT::Update::Post-Invoke-Success {"touch /var/lib/apt/periodic/update-success-stamp 2>/dev/null || true";};
         * execute[apt-get update] action nothing (skipped due to action :nothing)
         * execute[apt-get autoremove] action nothing (skipped due to action :nothing)
         * execute[apt-get autoclean] action nothing (skipped due to action :nothing)
         * execute[apt-get-update-periodic] action run
           - execute apt-get update
[...]

       Running handlers:
       Running handlers complete
       Chef Client finished, 6/12 resources updated in 25 seconds
       Finished converging <default-ubuntu-1404> (0m31.57s).
-----> Kitchen is finished. (0m32.55s)
```

Let's log in to the instance and verify that the `apt` cache was updated. When the `apt` cache is updated, the system updates the timestamp on the file <% fp '/var/lib/apt/periodic/update-success-stamp' %>.

Run `kitchen login` to login to your instance.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ kitchen login
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Fri Feb  5 03:24:06 2016 from 10.0.2.2
```

From your instance, run this command to get the timestamp.

```bash
# ~
vagrant@default-ubuntu-1404:~$ stat -c %y /var/lib/apt/periodic/update-success-stamp
2016-02-05 03:24:33.138500694 +0000
```

The time that comes back is in Greenwich Mean Time (GMT). It should be close to the **Last login** time that was reported in the MOTD when you logged on.

Now log back out.

```bash
# ~
vagrant@default-ubuntu-1404:~$ logout
Connection to 127.0.0.1 closed.
```

[END_BOX]