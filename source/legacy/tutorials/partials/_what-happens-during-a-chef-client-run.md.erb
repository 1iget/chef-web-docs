Recall that **chef-client** is the command you run on a node to talk to the Chef server. But what exactly does it do? The image below outlines the steps that **chef-client** takes. Take a moment to rollover the steps to learn more, starting with **Get configuration data**. You don't have to memorize everything you read here, but it's good to at least have a sense of the workflow.

<link rel="stylesheet" href="/assets/stylesheets/nine-grid.css" type="text/css" media="screen" />
<ul class="nine-grid">
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-1.png">
  <span><b>chef-client</b> reads configuration data from a local file and from a tool called Ohai (we'll look at Ohai in a later tutorial.)</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-2.png">
  <span><b>chef-client</b> must authenticate every request to the Chef server to ensure the node is registered and to help prevent unauthorized access to data. Chef uses RSA public key-pairs - the Chef server holds the public key and each client node holds a private key.</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-3.png">
  <span><b>chef-client</b> builds a <i>node</i> object in memory (we'll see later what this looks like in code.) A node object is a collection of keys and values. These keys and values describe attributes about the node, such as its name, platform, IP address, and so on.</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-4.png">
  <span><b>chef-client</b> updates the node object's attributes from attribute files, environments, roles, and Ohai. More on all that later.</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-5.png">
  <span><b>chef-client</b> checks in with the Chef server and downloads any new cookbooks and any cookbooks that have changed. If there are no new cookbooks, and no cookbook has changed, nothing is done.</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-6.png">
  <span>The <i>run-list</i> is an ordered list of policies that <b>chef-client</b> runs to configure the node. The expanded run-list includes everything that you specify in the node's run-list plus any dependendencies that those cookbooks require.</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-7.png">
  <span>Here, everything that's needed to configure the node - cookbooks, libraries, attribute files, and so on - are loaded into memory.</span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-8.png">
  <span>Here's where the real work happens. <b>chef-client</b> walks through each resource in each cookbook recipe in the run-list and ensures that the node adheres to that resource policy. If any action fails, the <b>chef-client</b> records the error and stops further processing.<br>
  </span></li>
  <li class="nine-grid"><img class="nine-grid" src="/assets/images/tutorials/chef-client-run-9.png">
  <span><b>chef-client</b> writes info about the node, including its attributes and the last time it sucessfully ran, back to the Chef server. If any action failed, the error is also reported.
  </span></li>
</ul>

<div style="clear: left;"/>
<br>