---
title: '1. Install IIS'
order: 1
layout: step
---
Let's extend what you learned about file management in the [previous lesson](/windows/configure-a-resource/) to manage an Internet Information Services (IIS) web server. Like files, packages and services are also types of resources.

Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.

Although you don't need prior knowledge about web servers, configuring one is a great way to grow your Chef skills.

## <i class="fa fa-windows" style="margin-right:3px;"></i> Get a Windows Server machine

Like the previous lesson, you'll configure the server directly. You can continue with the Windows Server machine you used in the previous lesson, but let's review the options.

Option 1: Use your own Windows Server machine. If you have a machine you'd like to use that meets the [system requirements](<%= chef_docs_url %>/chef_system_requirements.html), install the [Chef Development Kit](<%= chef_dk_url %>) on it now.

Option 2: Let us provide a Windows Server virtual machine with the Chef tools installed for you. Just click the button below.

<%= partial 'layouts/provisioner', locals: { title: 'Windows Server', type: 'windows-localmode' } %>

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:420px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, watch for:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how order affects a recipe's behavior.<br>
  <i class="fa fa-check"></i>&nbsp; how to declare multiple actions.<br>
  <i class="fa fa-check"></i>&nbsp; what problems arise.
</sidebar>

## <i class="fa fa-tasks" style="margin-right:3px;"></i> Here's what you'll do

  1. [Install IIS](#1installiis)
  1. [Start the World Wide Web Publishing Service](#2starttheworldwidewebpublishingservice)
  1. [Configure the home page](#3configurethehomepage)
  1. [Confirm your web site is running](#4confirmyourwebsiteisrunning)

Let's install IIS. From your <code class="file-path">~\chef-repo</code> directory, add this recipe to a file named <code class="file-path">webserver.rb</code>.

```ruby-Win32
# ~\chef-repo\webserver.rb
powershell_script 'Install IIS' do
  code 'Add-WindowsFeature Web-Server'
  guard_interpreter :powershell_script
  not_if "(Get-WindowsFeature -Name Web-Server).Installed"
end
```

We don't need to specify an action because `run` is the default.

Now run `chef-apply` to apply the recipe.

```ps
# ~\chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * powershell_script[Install IIS] action run
    - execute "powershell.exe" -NoLogo -NonInteractive -NoProfile -ExecutionPolicy RemoteSigned -InputFormat None -File
"C:/Users/ADMINI~1/AppData/Local/Temp/chef-script20140812-3480-xwa5in.ps1"
```

Run the recipe a second time.

```ps
# ~\chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * powershell_script[Install IIS] action run (skipped due to not_if)
```

This time, Chef does not reinstall IIS. That's because the `not_if` attribute skips the resource when the condition is true. In this case, we use the `Get-WindowsFeature` PowerShell cmdlet to check whether the `Web-Server` feature is installed.
