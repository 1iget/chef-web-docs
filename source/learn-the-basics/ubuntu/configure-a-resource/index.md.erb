---
title: 'Configure a resource'
description: 'Learn how Chef keeps your system in line with the policy you specify.'
order: 2
layout: lesson
time_to_complete: 15 minutes
---
[HEADLINE] A Chef _resource_ describes some piece of infrastructure, such as a file, a template, or a package. A Chef _recipe_ is a file that groups related resources, such as everything needed to configure a web server, database server, or a load balancer.

To get started, let's look at a basic configuration management project. You'll learn how to manage the Message of the Day (MOTD) file for your organization. The MOTD file is an example of a resource.

[START_BOX]

## 1. Set up your working directory

From your virtual machine, create the <code class="file-path">chef-repo</code> directory under your home directory, <code class="file-path">~/</code>.

```bash
$ mkdir ~/chef-repo
```

Now `cd` there.

```bash
$ cd ~/chef-repo
```

[END_BOX]

[START_BOX]

### 2. Create the MOTD file

First, you need to create the file and set the initial MOTD. To keep things basic, let's configure the file in the working directory.

From your <code class="file-path">~/chef-repo</code> directory, create a file named <code class="file-path">hello.rb</code>, add these contents, and then save the file.

```ruby
# ~/chef-repo/hello.rb
file 'motd' do
  content 'hello world'
end
```

From your terminal window, run the following `chef-apply` command to apply what you've written.

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create
    - create new file motd
    - update content in file motd from none to de031d
    --- motd        2014-05-13 14:52:54.025253948 -0700
    +++ /tmp/.motd20140513-3474-5263n1 2014-05-13 14:52:54.025253948 -0700
    @@ -1 +1,2 @@
    +hello world
```

The output tells us that a new file, <code class="file-path">motd</code>, was created.

Now verify that the file was written. Run the `more` command, which prints to the console the file you give it.

```bash
# ~/chef-repo
$ more motd
hello world
```

### Run the command a second time

Now, let's see now what happens when you run the same `chef-apply` command again.

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create (up to date)
```

This time you get a different response. This is because Chef does work only when it needs to.

Chef looks at the current configuration state and applies the action only if the current state doesn't match the desired state. Here, Chef doesn't create or modify <code class="file-path">motd</code> because it already exists and its contents didn't change.

[END_BOX]

[START_BOX]

## 3. Update the MOTD file's contents

Now you're going to change the MOTD.

Modify <code class="file-path">hello.rb</code> like this ('hello world' becomes 'hello chef'.)

```ruby
# ~/chef-repo/hello.rb
file 'motd' do
  content 'hello chef'
end
```

Run `chef-apply`.

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create
    - update content in file motd from de031d to b1522f
    --- motd        2014-05-13 14:52:54.025253948 -0700
    +++ /tmp/.motd20140513-4015-13xpiup  2014-05-13 15:00:07.284522132 -0700
    @@ -1,2 +1,2 @@
    -hello world
    +hello chef
```

This time Chef does work because we've changed the desired state of the file and need to update the installed version to match it.

[END_BOX]

[START_BOX]

## 4. Ensure the MOTD file's contents are not changed by anyone else

You need to make sure that no other process can change the MOTD.

Imagine that a co-worker manually changes <code class="file-path">motd</code> by replacing 'hello chef' with 'hello robots'. Go ahead and change your copy through your text editor. Or you can change the file from the command line like this.

```bash
# ~/chef-repo
$ echo 'hello robots' > motd
```

Now run `chef-apply`.

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create
    - update content in file motd from 9b0c18 to b1522f
    --- motd        2014-05-13 15:03:47.638770524 -0700
    +++ /tmp/.motd20140513-4170-130uqxh  2014-05-13 15:04:43.874771326 -0700
    @@ -1,2 +1,2 @@
    -hello robots
    +hello chef
```

Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resource matches what you specify, even if it is altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

[END_BOX]

[START_BOX]

## 5. Delete the MOTD file

OK, you're done experimenting with the MOTD, so let's clean up. From your <code class="file-path">~/chef-repo</code> directory, create a new file named <code class="file-path">goodbye.rb</code> and save this content to it.

```ruby
# goodbye.rb
file 'motd' do
  action :delete
end
```

Now apply <code class="file-path">goodbye.rb</code> to delete the file.

```bash
# ~/chef-repo
$ chef-apply goodbye.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action delete
    - delete file motd
```

The output shows that <code class="file-path">motd</code> is now gone, but let's prove it.

```bash
# ~/chef-repo
$ more motd
motd: No such file or directory
```

[END_BOX]

[START_BOX]

## Summary

You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state. You worked with a [file](https://docs.chef.io/resource_file.html), which is one kind of resource.

### Resources describe the what, not the how

Your policy declares _what_ state each resource should be in, but not _how_ to get there. In this lesson, you declared that the file <code class="file-path">motd</code> must exist and what its contents are, but you didn't specify how to apply that policy. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.

A recipe declares what state each resource should be in but not how to achieve that state. Chef handles these complexities for you.

### Resources have actions

When you deleted the file, you saw the `:delete` action.

Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's often the most common affirmative one &ndash; for example, _create_ a file, _install_ a package, and _start_ a service.

When we created the file we didn't specify the `:create` action because `:create` is the default. But of course you can specify it if you want.

The documentation for each resource type, [file](https://docs.chef.io/resource_file.html) for example, explains the type's default action.

### Recipes organize resources

In Chef, <code class="file-path">hello.rb</code> is an example of a [recipe](https://docs.chef.io/recipes.html), or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.

Our recipe states everything we need to manage the MOTD file. You used [chef-apply](https://docs.chef.io/ctl_chef_apply.html) to apply that recipe from the command line.

[END_BOX]

[START_BOX]

## Exercises

<% exercise_question(<<-EOH
1. What is a <i>resource</i>?
EOH
) %>

<% accordion('question1', 'Answer') do %>

A resource represents a piece of infrastructure and its desired state, such as a package that should be installed, a service that should be running, or a file that should be generated.

<% end %>

<hr>

<% exercise_question(<<-EOH
2. What is a <i>recipe</i>?
EOH
) %>

<% accordion('question2', 'Answer') do %>

<% markdown do %>

A recipe is a collection of resources that describes a particular configuration or policy. A recipe describes everything that is required to configure part of a system. Recipes do things such as:

* install and configure software components.
* manage files.
* deploy applications.
* execute other recipes.

<% end %>

<% end %>

<hr>

<% exercise_question(<<-EOH
3. What happens when you don't specify a resource's action?
EOH
) %>

<dl class="accordion" data-accordion>
  <dd class="accordion-navigation">
    <a href="#question3">Answer <i class='fa fa-angle-double-right'></i></a>
    <div id="question3" class="box content">
      <%= partial "/learn-the-basics/ubuntu/configure-a-resource/exercises/answers/3" %>
    </div>
  </dd>
</dl>
</p>
<hr>

<% exercise_question(<<-EOH
4. Modify the <code class="file-path">hello.rb</code> recipe you wrote in this lesson to manage the MOTD file under the <code class="file-path">/tmp/messages</code> directory, and not in the current directory.
EOH
) %>

<% reveal_modal('exercise4-hint', 'Hint') do %>

You'll need to create the <code class="file-path">/tmp/messages</code> directory first. The documentation for the `directory` resource [shows you how](https://docs.chef.io/resource_directory.html).

<% end %>

<% accordion('question4', 'Answer') do %>

Here's how to ensure that the <code class="file-path">/tmp/messages</code> directory exists before the file is written.

```ruby
directory '/tmp/messages'

file '/tmp/messages/motd' do
  content 'hello world'
end
```

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * directory[/tmp/messages] action create
    - create new directory /tmp/messages
    - restore selinux security context
  * file[/tmp/messages/motd] action create
    - create new file /tmp/messages/motd
    - update content in file /tmp/messages/motd from none to b94d27
    --- /tmp/messages/motd	2015-02-04 18:40:47.309341667 -0800
    +++ /tmp/.motd20150204-28719-101ep29	2015-02-04 18:40:47.311341670 -0800
    @@ -1 +1,2 @@
    +hello world
    - restore selinux security context
$ more /tmp/messages/motd
hello world
```

<% end %>


[END_BOX]

<% next_page(current_page) do %>

Of course, your job is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

<% end %>
