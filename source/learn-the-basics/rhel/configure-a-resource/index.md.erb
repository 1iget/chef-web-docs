---
title: 'Configure a resource'
description: 'Learn how Chef keeps your system in line with the policy you specify.'
order: 2
layout: lesson
time_to_complete: 15 minutes
---
[HEADLINE] A Chef _resource_ describes some piece of infrastructure, such as a file, a template, or a package. A Chef _recipe_ is a file that groups related resources, such as everything needed to configure a web server, database server, or a load balancer.

To get started, let's look at a basic configuration management project. You'll learn how to manage the Message of the Day (MOTD) file for your organization. The MOTD file is an example of a resource.

[START_BOX]

## 1. Set up your working directory

From your virtual machine, create the <code class="file-path">chef-repo</code> directory under your home directory, <code class="file-path">~/</code>.

```bash
$ mkdir ~/chef-repo
```

Now `cd` there.

```bash
$ cd ~/chef-repo
```

[END_BOX]

[START_BOX]

## 2. Create the MOTD file

In this step, you'll first create the file and set the initial MOTD. To keep things basic, you'll configure the file in the <code class="file-path">/tmp</code> directory.

Next, you'll write what's called a _recipe_ to describe the desired state of the MOTD file. Then you'll run [chef-client](https://docs.chef.io/ctl_chef_client.html), the program that applies your Chef code to place your system in the desired state. Typically, `chef-client` downloads and runs the latest Chef code from the Chef server, but in this lesson, you'll run `chef-client` in what's called _local mode_ to apply Chef code that exists locally on your virtual machine.

From your <code class="file-path">~/chef-repo</code> directory, create a file named <code class="file-path">hello.rb</code>, add these contents, and then save the file.

```ruby
# ~/chef-repo/hello.rb
file '/tmp/motd' do
  content 'hello world'
end
```

From your terminal window, run the following `chef-client` command to apply what you've written.

```bash
# ~/chef-repo
$ chef-client --local-mode hello.rb
2016-03-24T18:24:21+00:00] WARN: No config file found or specified on command line, using command line options.
[2016-03-24T18:24:21+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root/chef-repo.
Starting Chef Client, version 12.8.1
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2016-03-24T18:24:23+00:00] WARN: Node default-centos-72 has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - create new file /tmp/motd
    - update content in file /tmp/motd from none to b94d27
    --- /tmp/motd	2016-03-24 18:24:23.030000766 +0000
    +++ /tmp/.chef-motd20160324-25656-75j2lz	2016-03-24 18:24:23.026999266 +0000
    @@ -1 +1,2 @@
    +hello world
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 01 seconds
```

The output tells us that a new file, <code class="file-path">/tmp/motd</code>, was created. (The warnings you see relate to concepts we haven't introduced yet, and can be safely ignored for now.)

Now verify that the file was written. Run the `more` command, which prints a file to the console.

```bash
# ~/chef-repo
$ more /tmp/motd
hello world
```

### Run the command a second time

Now, let's see now what happens when you run the same `chef-client` command again.

```bash
# ~/chef-repo
$ chef-client --local-mode hello.rb
[2016-03-24T18:24:25+00:00] WARN: No config file found or specified on command line, using command line options.
[2016-03-24T18:24:25+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root/chef-repo.
Starting Chef Client, version 12.8.1
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2016-03-24T18:24:26+00:00] WARN: Node default-centos-72 has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create (up to date)

Running handlers:
Running handlers complete
Chef Client finished, 0/1 resources updated in 01 seconds
```

This time you get a different response &ndash; the file is already up to date. This is because Chef applies the configuration only when it needs to.

Chef looks at the current configuration state and applies the action only if the current state doesn't match the desired state. Here, Chef doesn't create or modify <code class="file-path">/tmp/motd</code> because it already exists and its contents didn't change. We call this approach _test and repair_.

[END_BOX]

[START_BOX]

## 3. Update the MOTD file's contents

Now you're going to change the MOTD.

Modify <code class="file-path">hello.rb</code> like this ('hello world' becomes 'hello chef'.)

```ruby
# ~/chef-repo/hello.rb
file '/tmp/motd' do
  content 'hello chef'
end
```

Run `chef-client`.

```bash
# ~/chef-repo
$ chef-client --local-mode hello.rb
[2016-03-24T18:24:29+00:00] WARN: No config file found or specified on command line, using command line options.
[2016-03-24T18:24:29+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root/chef-repo.
Starting Chef Client, version 12.8.1
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2016-03-24T18:24:30+00:00] WARN: Node default-centos-72 has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from b94d27 to c38c60
    --- /tmp/motd	2016-03-24 18:24:23.026999266 +0000
    +++ /tmp/.chef-motd20160324-26099-14hk6vy	2016-03-24 18:24:30.508737995 +0000
    @@ -1,2 +1,2 @@
    -hello world
    +hello chef
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 01 seconds
```

This time Chef applies the action because you've changed the desired state of the file.

[END_BOX]

[START_BOX]

## 4. Ensure the MOTD file's contents are not changed by anyone else

You need to make sure that no other process can change the MOTD.

Imagine that a co-worker manually changes <code class="file-path">/tmp/motd</code> by replacing 'hello chef' with 'hello robots'. Go ahead and change your copy of <code class="file-path">/tmp/motd</code> through your text editor. Or you can change the file from the command line like this.

```bash
# ~/chef-repo
$ echo 'hello robots' > /tmp/motd
```

Now run `chef-client`.

```bash
# ~/chef-repo
$ chef-client --local-mode hello.rb
[2016-03-24T18:24:32+00:00] WARN: No config file found or specified on command line, using command line options.
[2016-03-24T18:24:32+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root/chef-repo.
Starting Chef Client, version 12.8.1
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2016-03-24T18:24:34+00:00] WARN: Node default-centos-72 has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from 548078 to c38c60
    --- /tmp/motd	2016-03-24 18:24:31.701333952 +0000
    +++ /tmp/.chef-motd20160324-26334-rexmjn	2016-03-24 18:24:34.061513366 +0000
    @@ -1,2 +1,2 @@
    -hello robots
    +hello chef
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 01 seconds
```

Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resource matches what you specify, even if it is altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

[COMMENT] In practice, it's common to configure `chef-client` to act as a service that runs periodically or in response to an event, such as a commit to source control. Running Chef through automation helps to ensure that your servers remain configured as you expect and also enables them to be reconfigured when you need them to be.

[END_BOX]

[START_BOX]

## 5. Delete the MOTD file

OK, you're done experimenting with the MOTD, so let's clean up. From your <code class="file-path">~/chef-repo</code> directory, create a new file named <code class="file-path">goodbye.rb</code> and save the following content to it.

```ruby
# ~/chef-repo/goodbye.rb
file '/tmp/motd' do
  action :delete
end
```

Now apply <code class="file-path">goodbye.rb</code> to delete the file.

```bash
# ~/chef-repo
$ chef-client --local-mode goodbye.rb
[2016-03-24T18:24:36+00:00] WARN: No config file found or specified on command line, using command line options.
[2016-03-24T18:24:36+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root/chef-repo.
Starting Chef Client, version 12.8.1
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
[2016-03-24T18:24:37+00:00] WARN: Node default-centos-72 has an empty run list.
Converging 1 resources
Recipe: @recipe_files::/root/chef-repo/goodbye.rb
  * file[/tmp/motd] action delete
    - delete file /tmp/motd

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated in 01 seconds
```

The output shows that <code class="file-path">/tmp/motd</code> is now gone, but let's prove it.

```bash
# ~/chef-repo
$ more /tmp/motd
/tmp/motd: No such file or directory
```

[END_BOX]

[START_BOX]

## Summary

You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state. You worked with a [file](https://docs.chef.io/resource_file.html), which is one kind of resource.

### Resources describe the what, not the how

A recipe is a file that holds one or more resources. Each resource declares _what_ state a part of the system should be in, but not _how_ to get there. Chef handles these complexities for you.

In this lesson, you declared that the file <code class="file-path">/tmp/motd</code> must exist and what its contents are, but you didn't specify how to create or write to the file. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.

### Resources have actions

When you deleted the file, you saw the `:delete` action.

Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's often the most common affirmative one &ndash; for example, _create_ a file, _install_ a package, and _start_ a service.

When we created the file we didn't specify the `:create` action because `:create` is the default. But of course you can specify it if you want.

The documentation for each resource type, [file](https://docs.chef.io/resource_file.html) for example, explains the type's default action.

### Recipes organize resources

In Chef, <code class="file-path">hello.rb</code> is an example of a [recipe](https://docs.chef.io/recipes.html), or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.

Our recipe states everything we need to manage the MOTD file. You used `chef-client` in local mode to apply that recipe from the command line.

[END_BOX]

[START_BOX]

## Exercises

<% exercise_question(<<-EOH
1. What is a <i>resource</i>?
EOH
) %>

<% accordion('question1', 'Answer') do %>

A resource represents a piece of infrastructure and its desired state, such as a package that should be installed, a service that should be running, or a file that should be generated.

<% end %>

<hr>

<% exercise_question(<<-EOH
2. What is a <i>recipe</i>?
EOH
) %>

<% accordion('question2', 'Answer') do %>

<% markdown do %>

A recipe is a collection of resources that describes a particular configuration or policy. A recipe describes everything that is required to configure part of a system. Recipes do things such as:

* install and configure software components.
* manage files.
* deploy applications.
* execute other recipes.

<% end %>

<% end %>

<hr>

<% exercise_question(<<-EOH
3. What happens when you don't specify a resource's action?
EOH
) %>

<dl class="accordion" data-accordion>
  <dd class="accordion-navigation">
    <a href="#question3">Answer <i class='fa fa-angle-double-right'></i></a>
    <div id="question3" class="box content">
      <%= partial "/learn-the-basics/rhel/configure-a-resource/exercises/answers/3" %>
    </div>
  </dd>
</dl>
</p>
<hr>

<% exercise_question(<<-EOH
4. Modify the <code class="file-path">hello.rb</code> recipe you wrote in this lesson to manage the MOTD file under the <code class="file-path">/tmp/messages</code> directory, and not in the <code class="file-path">/tmp</code> directory.
EOH
) %>

<% reveal_modal('exercise4-hint', 'Hint') do %>

You'll need to create the <code class="file-path">/tmp/messages</code> directory first. The documentation for the `directory` resource [shows you how](https://docs.chef.io/resource_directory.html).

<% end %>

<% accordion('question4', 'Answer') do %>

Here's how to ensure that the <code class="file-path">/tmp/messages</code> directory exists before the file is written.

```ruby
directory '/tmp/messages'

file '/tmp/messages/motd' do
  content 'hello world'
end
```

Here's how to apply and verify the recipe.

```bash
# ~/chef-repo
$ chef-client --local-mode hello.rb
[2016-01-07T17:19:52+00:00] WARN: No config file found or specified on command line, using command line options.
[2016-01-07T17:19:52+00:00] WARN: No cookbooks directory found at or above current directory.  Assuming /root/chef-repo.
Starting Chef Client, version 12.6.0
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Compiling Cookbooks...
[2016-01-07T17:19:54+00:00] WARN: Node default-centos-65 has an empty run list.
Converging 2 resources
Recipe: @recipe_files::/root/chef-repo/hello.rb
  * directory[/tmp/messages] action create
    - create new directory /tmp/messages
    - restore selinux security context
  * file[/tmp/messages/motd] action create
    - create new file /tmp/messages/motd
    - update content in file /tmp/messages/motd from none to b94d27
    --- /tmp/messages/motd	2016-01-07 17:19:54.226759289 +0000
    +++ /tmp/messages/.motd20160107-2708-pw2nw	2016-01-07 17:19:54.226759289 +0000
    @@ -1 +1,2 @@
    +hello world
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 2/2 resources updated in 01 seconds
$ more /tmp/messages/motd
hello world
```

<% end %>


[END_BOX]

<% next_page(current_page) do %>

Of course, your job is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

<% end %>
