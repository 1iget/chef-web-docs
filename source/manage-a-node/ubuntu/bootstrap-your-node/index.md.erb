---
title: 'Bootstrap your node'
order: 4
description: 'Set up chef-client on your node,
 associate it with your Chef server, and apply your Apache cookbook to it.'
keywords:
layout: lesson
sections: [exercises]
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
[HEADLINE] We call the process that installs `chef-client` on a node and the initial checkin to the Chef server _bootstrapping_ the node.

Recall that any computer that's managed by a Chef server is called a _node_, and that `chef-client` is the command that applies the policy defined by your cookbooks to a node.

Let's bootstrap a node and execute the Apache cookbook on it.

[START_BOX]

## 1. Bootstrap your node

Now that you've verified that you can connect to your node over SSH, you're now ready to bootstrap it.

First, make sure you're in the <code class="file-path">~/learn-chef</code> directory.

```bash
$ cd ~/learn-chef
```

Now choose the option that matches how you normally connect to your node over SSH.

[COMMENT] The optional `--node-name` argument uniquely identifies the node with the Chef server. Its value can be whatever you want. The server's FQDN is the default. If you previously used the name `node1` to bootstrap a different node, you'll need to choose a different name or [remove the previous node](/manage-a-node/ubuntu/update-your-nodes-configuration#howtocleanupyourenvironment).

### Bootstrap using a username and password

Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">PASSWORD</code> with your user's password.

```bash
# ~/learn-chef
$ knife bootstrap ADDRESS --ssh-user USER --ssh-password 'PASSWORD' --sudo --use-sudo-password --node-name node1 --run-list 'recipe[learn_chef_apache2]'
Creating new client for node1
Creating new node for node1
Connecting to 52.33.228.36
52.33.228.36 -----> Installing Chef Omnibus (-v 12)
52.33.228.36 downloading https://www.opscode.com/chef/install.sh
52.33.228.36   to file /tmp/install.sh.1329/install.sh
52.33.228.36 trying wget...
52.33.228.36 Getting information for chef stable 12 for ubuntu...
[...]
52.33.228.36     +    <h1>hello world</h1>
52.33.228.36        </body>
52.33.228.36      </html>
52.33.228.36     -
52.33.228.36
52.33.228.36 Running handlers:
52.33.228.36 Running handlers complete
52.33.228.36 Chef Client finished, 2/4 resources updated in 15 seconds
```

### Bootstrap using key-based authentication

Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/learn-chef
$ knife bootstrap ADDRESS --ssh-user USER --sudo --identity-file IDENTITY_FILE --node-name node1 --run-list 'recipe[learn_chef_apache2]'
Creating new client for node1
Creating new node for node1
Connecting to 52.33.228.36
52.33.228.36 -----> Installing Chef Omnibus (-v 12)
52.33.228.36 downloading https://www.opscode.com/chef/install.sh
52.33.228.36   to file /tmp/install.sh.1329/install.sh
52.33.228.36 trying wget...
52.33.228.36 Getting information for chef stable 12 for ubuntu...
[...]
52.33.228.36     +    <h1>hello world</h1>
52.33.228.36        </body>
52.33.228.36      </html>
52.33.228.36     -
52.33.228.36
52.33.228.36 Running handlers:
52.33.228.36 Running handlers complete
52.33.228.36 Chef Client finished, 2/4 resources updated in 15 seconds
```

### Bootstrap a local virtual machine using a forwarded port

Here's an example for Vagrant.

Replace <code class="placeholder">PORT</code> with your SSH forwarded port, for example, 2222, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <code class="file-path">/home/user/.vagrant/machines/default/virtualbox/private_key</code>.

```bash
# ~/learn-chef
$ knife bootstrap localhost --ssh-port PORT --ssh-user vagrant --sudo --identity-file IDENTITY_FILE --node-name node1 --run-list 'recipe[learn_chef_apache2]'
Creating new client for node1
Creating new node for node1
Connecting to localhost
localhost -----> Installing Chef Omnibus (-v 12)
localhost downloading https://www.opscode.com/chef/install.sh
localhost   to file /tmp/install.sh.4785/install.sh
localhost trying wget...
localhost Getting information for chef stable 12 for ubuntu...
[...]
localhost     +    <h1>hello world</h1>
localhost        </body>
localhost      </html>
localhost     -
localhost
localhost Running handlers:
localhost Running handlers complete
localhost Chef Client finished, 2/4 resources updated in 09 seconds
```

<hr>

<% reveal_modal('knife-help-modal', 'Need help troubleshooting?') do %>

<% markdown do %>

## If the operation times out or fails, here are some things to try

* Ensure that you run `knife` commands from your <code class="file-path">learn-chef</code> directory or one of its sub-directories.
* Ensure you have a <code class="file-path">learn-chef/.chef</code> directory and that it contains a <code class="file-path">knife.rb</code> file and your RSA private key file. If you don't, <a href="/manage-a-node/ubuntu/set-up-your-chef-server#step2" target="_blank">configure your workstation to communicate with Chef server</a>.
* Ensure that your node's IP address is accessible from your network.
* Ensure the user name you provide has root or `sudo` access on the node.
* Ensure your workstation has outbound access (including firewall) on these ports:
  * 22 (SSH)
  * 80 (HTTP)
  * 443 (HTTPS)
* Ensure your node has inbound access (including firewall) on these ports:
  * 22 (SSH)
* Ensure your node has outbound access (including firewall) on these ports:
  * 443 (HTTPS)

<% end %>

<% end %>


[END_BOX]

[START_BOX]

## 2. Confirm the result

Two things just happened.

First, your node was associated with your hosted Chef account. To verify this, navigate to the [https://manage.chef.io](https://manage.chef.io). From the **Nodes** tab, you'll see an entry for the node you just bootstrapped.

![The bootstrapped node](ubuntu/management-console-node.png)

You can also verify that the node successfully bootstrapped by running the `knife node list` command.

```bash
# ~/learn-chef
$ knife node list
node1
```

You can use the `knife node show` command to view data about your node.

```bash
# ~/learn-chef
$ knife node show node1
Node Name:   node1
Environment: _default
FQDN:        ip-172-31-18-102.us-west-2.compute.internal
IP:          172.31.18.102
Run List:    recipe[learn_chef_apache2]
Roles:
Recipes:     learn_chef_apache2, learn_chef_apache2::default
Platform:    ubuntu 14.04
Tags:
```

The second thing that happened was that your node did an initial checkin with the Chef server and ran the Apache cookbook. To verify this, open a web browser from your workstation and navigate to your web server.

![The basic home page](misc/webserver-basic-remote.png)

If you bootstrapped a Vagrant instance, the easiest way to verify the configuration is to create an SSH connection to the instance and run `curl localhost`.

```bash
$ vagrant ssh
Welcome to Ubuntu 14.04.3 LTS (GNU/Linux 3.19.0-25-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Fri Feb  5 13:28:02 2016 from 10.0.2.2
[vagrant@localhost ~]$ sudo apt-get install curl --yes > /dev/null
[vagrant@localhost ~]$ curl localhost
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.
```

[END_BOX]

[START_BOX]

## Summary

The `knife bootstrap` command established an SSH connection to the node, installed `chef-client`, downloaded the Learn Chef Apache cookbook on the node, and ran it. In one command, Chef carried out most of the steps you previously performed manually.

[END_BOX]
