---
title: 'Get a node to bootstrap'
order: 3
description: 'Set up chef-client on your node,
 associate it with your Chef server, and apply your IIS cookbook to it.'
keywords:
layout: lesson
sections: [exercises]
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
[HEADLINE] We call the process that installs `chef-client` on a node and the initial check-in to the Chef server _bootstrapping_ the node.

Recall that any computer that's managed by a Chef server is called a _node_, and that `chef-client` is the command that applies the policy defined by your cookbooks to a node.

Let's bootstrap a node and execute the IIS cookbook on it.

[START_BOX]

## 1. Get a Windows Server machine to bootstrap

In [Learn the Chef basics](/learn-the-basics/windows/), you installed the Chef DK on a server and configured it directly. Here you'll see how the bootstrap process enables you to configure your server remotely from your workstation.

Like before, we suggest that you work in a disposable environment such as a Windows Server virtual machine. To ensure that the output you see matches the sample output that's shown, we recommend that you run Windows Server 2012 R2 on your virtual machine. Also ensure that you have `sudo` or root access to the instance.

We recommend that you set up a second virtual machine so that you can see the bootstrap process run on a clean configuration. However, you can also bootstrap the instance that you used in the previous tutorial &ndash; just keep in mind that the output you see won't match what's shown because that instance is already configured with the Chef tools and your basic IIS web server configuration.

If you don't have a preferred way to set up a server, here are some popular options.

<% accordion('vm-aws', 'Amazon Web Services') do %>

<% markdown do %>

AWS's [one-year free account](https://aws.amazon.com/free/?sc_channel=PS&sc_campaign=acquisition_US&sc_publisher=google&sc_medium=cloud_computing_b&sc_content=aws_free_e&sc_detail=aws%20free%20tier&sc_category=cloud_computing&sc_segment=73823473242&sc_matchtype=e&sc_country=US&s_kwcid=AL!4422!3!73823473242!e!!g!!aws%20free%20tier&ef_id=VV3lAgAAAHK07c0y:20151119221840:s) gives you 750 hours per month of usage on the t2.micro tier.

If you're new to AWS, their [getting started guide](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/EC2_GetStarted.html#ec2-launch-instance_linux) walks you through the creation of your first Windows Server 2012 R2 instance. 

When you select the instance size, you can choose t2.micro to take advantage of the free usage tier. However, a t2.medium or larger instance size will give you better performance. When you create your security group, ensure that ports 80 (HTTP), 443 (HTTPS), 3389 (RDP), and 5985-5986 (WinRM) are open for inbound network traffic.

<% end %>

<% end %>

<% accordion('vm-azure', 'Microsoft Azure') do %>

<% markdown do %>

Microsoft Azure is offering a [30-day free trial](https://azure.microsoft.com/en-us/free/) for up to $200 of usage.

When you're ready to continue with this tutorial, [follow this tutorial](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-tutorial/) to create your Windows Server 2012 R2 instance. For now, all you need to do is create the instance. Ensure that your instance enables inbound access on ports 80 (HTTP), 443 (HTTPS), 3389 (RDP), 5985-5986 (WinRM).

<% end %>

<% end %>

<% accordion('vm-hyper-v', 'Hyper-V') do %>

<% markdown do %>

Hyper-V enables you to create and manage virtual machines from your workstation. 

Choose this option if you don't have access to cloud resources or you prefer to work with local virtual machines. You'll also need reasonably powerful hardware. Ensure that:

* your workstation supports and is configured to use CPU virtualization. This setting is typically configured through your system's BIOS.
* your workstation meets the [system requirements](https://msdn.microsoft.com/virtualization/hyperv_on_windows/quick_start/walkthrough_compatibility) requirements for running Hyper-V.
* your workstation has at least 60GB of free disk space. This will enable you to download the base image and run a few virtual machine instances.
* your workstation has at least 1GB memory available per virtual machine instance.
* nested virtualization is enabled if you're using another virtual machine as your workstation through a program such as VMWare Fusion.

In this part, you'll perform these steps to set up a Windows Server 2012 R2 virtual machine.

1. Download the evaluation version of Windows Server 2012 R2 as an ISO image.
1. Enable the Hyper-V Windows feature
1. Create a Hyper-V virtual switch to provide your virtual machine with Internet access.
1. Create a location to store virtual machines.
1. Create an empty base virtual machine.
1. Connect to your virtual machine through Hyper-V Manager.
1. Install Windows Server 2012 R2 on your virtual machine.

### Download the evaluation version of Windows Server 2012 R2 as an ISO image.

<%= partial 'layouts/partials/hyper-v/download_iso' %>

### Enable the Hyper-V Windows feature

<%= partial 'layouts/partials/hyper-v/enable_hyper-v' %>

### Create a Hyper-V virtual switch to provide your virtual machine with Internet access.

<%= partial 'layouts/partials/hyper-v/create_switch' %>

### Create a location to store virtual machines.

<%= partial 'layouts/partials/hyper-v/create_store' %>

### Create an empty base virtual machine.

<%= partial 'layouts/partials/hyper-v/create_vm' %>

### Connect to your virtual machine through Hyper-V Manager.

<%= partial 'layouts/partials/hyper-v/connect_vm' %>

### Install Windows Server 2012 R2 on your virtual machine.

<%= partial 'layouts/partials/hyper-v/install_2012_r2' %>

<% end %>

<% end %>

[END_BOX]

[START_BOX]

## 2. Gather some details about your machine

[COMMENT] All you need is for your virtual machine to be running &ndash; don't connect to it just yet.

Now, gather this information about your machine:

* Its host name or public IP address.
* A user name that has Administrator access and its password.

If you're bootstrapping an instance under Hyper-V, you can run this PowerShell command to get your instance's IP address on your local network.

```ps
$ Get-VM -Name "WindowsServer2012R2" | select -ExpandProperty NetworkAdapters | select IPAddresses
IPAddresses
-----------
{192.168.1.171, fe80::983c:ebdf:3e87:34db}
```

[END_BOX]

[START_BOX]

## 3. Prepare your node 

Use of SSL is strongly recommended, particularly when invoking knife-windows on non-Windows platforms, since without SSL there are limited options for ensuring the privacy of the plaintext transport.

### Open the firewall

```ps
$ netsh advfirewall firewall add rule name="WinRM-HTTPS" dir=in localport=5986 protocol=TCP action=allow
```

### Create a self-signed certificate

The easiest way to do this is to do it on the workstation and use knife-windows

```ps
$ knife windows cert generate --cert-passphrase "strong_passphrase" --hostname "myserver.myorganization.net" --output-file "server_cert.pfx"
```

### Import the pfx file generated from knife windows cert generate into the cert store on the node

I dont have the command for that handy

### Add a HTTPS listener on the node

```ps
$ winrm create winrm/config/Listener?Address=*+Transport=HTTPS "@{Hostname=`"<IP or host name>`";CertificateThumbprint=`"<thumbprint generated by knife-windows above>`"}"
```

knife windows cert generate above should use the same hostname or IP used to create the listener

### Configure WinRM

```ps
$ winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="1024"}'
$ winrm set winrm/config '@{MaxTimeoutms="1800000"}'
```

[END_BOX]

[START_BOX]

## 4. Create a test WinRM connection to your node

The bootstrap process connects to your node over the WinRM protocol. Now that you have the connection details, let's create a test WinRM connection to your node.

You don't have to do this every time you bootstrap a node, but verifying that your node is connectable will help ensure that the bootstrap process succeeds.

Connects to the remote WSMan/WinRM endpoint and verifies the remote node is listening. This is the equivalent of running Test-Wsman from PowerShell. Endpoints to test can be specified manually, or be driven by search and use many of the same connection options as knife winrm. To test a single node using the default WinRM port (5985)

```bash
$ knife wsman test 192.168.1.10 -m --winrm-transport ssl
```

[END_BOX]

[START_BOX]

## Summary

In this lesson, you brought up a node that you'll later configure using Chef.

In this lesson, you created a test connection to your node over WinRM. But once you get the hang of the bootstrap process, you'll see that  `knife bootstrap` enables you to configure your servers without the need to connect to them directly. This enables you to further automate the process of provisioning and configuring your infrastructure.

[END_BOX]
