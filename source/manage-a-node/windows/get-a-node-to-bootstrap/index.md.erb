---
title: 'Get a node to bootstrap'
order: 3
description: 'Bring up a Windows Server 2012 R2 instance and prepare it for the bootstrap process.'
keywords:
layout: lesson
sections: [exercises]
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
[HEADLINE] Any computer that's managed by Chef is called a _node_.

Now it's time to bring up a Windows Server 2012 R2 instance and prepare it for the bootstrap process.

During the bootstrap process, your node gets associated with the Chef server. The Chef server holds information about your node that you can use to generate reports or share with other nodes. The bootstrap process also installs the Chef tools on your node and does an initial checkin with the Chef server.

In [Learn the Chef basics](/tutorials/learn-the-basics/windows/free/), you installed the Chef DK on a server and configured it directly. Here you'll see how the bootstrap process enables you to configure your server remotely from your workstation.

Like before, we suggest that you work in a disposable environment such as a Windows Server virtual machine or cloud instance. To ensure that the output you see matches the sample output that's shown, we recommend that you run Windows Server 2012 R2 on your instance. Also ensure that you have administrator access to the instance.

This lesson suggests one way to prepare a Windows Server node for use with a Chef server, and involves a manual process. The setup we describe helps ensure that your node is connectable in any environment.

[COMMENT] The easiest way to get started is to use a system that has full Internet access. However, many users run Chef behind the firewall. [Check out this blog post](https://www.chef.io/blog/2014/10/28/working-with-chef-behind-your-firewall/) to learn more.

[START_BOX]

## 1. Get a Windows Server 2012 R2 node to bootstrap

Your node must be reachable from your workstation &ndash; the system where you'll initiate the bootstrap process. We'll show you how to verify a connection before you bootstrap your node.

The free trial virtual machine that we provide in the first tutorial is not reachable from the Internet because its IP address is allocated on the private network. Therefore, you'll need to bring up your own system.

If you used your own system for the first tutorial, we recommend that you set up a second system so that you can see the bootstrap process run on a clean configuration. If you do decide to bootstrap your existing system, just keep in mind that the output you see won't match what's shown because that system is already configured with the Chef tools and your basic IIS web server configuration.

If you don't have a preferred way to set up a server, here are some popular options.

<% accordion('vm-aws', 'Amazon Web Services') do %>

<% markdown do %>

AWS's [one-year free account](https://aws.amazon.com/free/?sc_channel=PS&sc_campaign=acquisition_US&sc_publisher=google&sc_medium=cloud_computing_b&sc_content=aws_free_e&sc_detail=aws%20free%20tier&sc_category=cloud_computing&sc_segment=73823473242&sc_matchtype=e&sc_country=US&s_kwcid=AL!4422!3!73823473242!e!!g!!aws%20free%20tier&ef_id=VV3lAgAAAHK07c0y:20151119221840:s) gives you 750 hours per month of usage on the t2.micro tier.

If you're new to AWS, their ["Getting Started with Amazon EC2 Windows Instances" tutorial](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/EC2_GetStarted.html) walks you through the creation of your first Windows Server 2012 R2 instance.

When you select the instance size, you can choose t2.micro to take advantage of the free usage tier. However, a t2.medium or larger instance size will give you better performance. When you create your security group, ensure that ports 80 (HTTP), 3389 (RDP), and 5985 (WinRM) are open for inbound network traffic, and that port 443 (HTTPS) is open for outbound traffic.

<% end %>

<% end %>

<% accordion('vm-azure', 'Microsoft Azure') do %>

<% markdown do %>

Microsoft Azure is offering a [30-day free trial](https://azure.microsoft.com/en-us/free/) for up to $200 of usage.

When you're ready to continue with this tutorial, [go to the "Create a virtual machine running Windows in the Azure portal"](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-tutorial/) tutorial on the Azure site. For now, all you need to do is create a Windows Server 2012 R2 Datacenter instance.

Ensure that your instance's network security group enables inbound network access on ports 80 (HTTP), 443 (HTTPS), 3389 (RDP), and 5985 (WinRM).

![](/assets/images/misc/azure_network_security_group_windows.png)

<% end %>

<% end %>

<% accordion('vm-hyper-v', 'Hyper-V') do %>

<% markdown do %>

Hyper-V enables you to create and manage virtual machines from your workstation.

Choose this option if you don't have access to cloud resources or you prefer to work with local virtual machines. You'll also need reasonably powerful hardware. Ensure that:

* your workstation supports and is configured to use CPU virtualization. This setting is typically configured through your system's BIOS.
* your workstation meets the [system requirements](https://msdn.microsoft.com/virtualization/hyperv_on_windows/quick_start/walkthrough_compatibility) requirements for running Hyper-V.
* your workstation has at least 60GB of free disk space. This will enable you to download the base image and run a few virtual machine instances.
* your workstation has at least 1GB memory available per virtual machine instance.
* nested virtualization is enabled if you're using another virtual machine as your workstation through a program such as VMware Fusion.

In this part, you'll perform these steps to set up a Windows Server 2012 R2 virtual machine.

1. Download the evaluation version of Windows Server 2012 R2 as an ISO image.
1. Enable the Hyper-V Windows feature
1. Create a Hyper-V virtual switch to provide your virtual machine with Internet access.
1. Create a location to store virtual machines.
1. Create an empty base virtual machine.
1. Connect to your virtual machine through Hyper-V Manager.
1. Install Windows Server 2012 R2 on your virtual machine.

### Download the evaluation version of Windows Server 2012 R2 as an ISO image.

<%= partial 'layouts/partials/hyper-v/download_iso' %>

### Enable the Hyper-V Windows feature

<%= partial 'layouts/partials/hyper-v/enable_hyper-v' %>

### Create a Hyper-V virtual switch to provide your virtual machine with Internet access.

<%= partial 'layouts/partials/hyper-v/create_switch' %>

### Create a location to store virtual machines.

<%= partial 'layouts/partials/hyper-v/create_store' %>

### Create an empty base virtual machine.

<%= partial 'layouts/partials/hyper-v/create_vm' %>

### Connect to your virtual machine through Hyper-V Manager.

<%= partial 'layouts/partials/hyper-v/connect_vm' %>

### Install Windows Server 2012 R2 on your virtual machine.

<%= partial 'layouts/partials/hyper-v/install_2012_r2' %>

<% end %>

<% end %>

[END_BOX]

[START_BOX]

## 2. Gather some details about your machine

[COMMENT] All you need is for your virtual machine to be running &ndash; don't connect to it just yet.

Now, gather this information about your machine:

* Its host name or public IP address.
* A user name that has administrator access and its password.

If you're bootstrapping an instance under Hyper-V, you can run this PowerShell command to get your instance's IP address on your local network.

```ps
$ Get-VM -Name "WindowsServer2012R2" | select -ExpandProperty NetworkAdapters | select IPAddresses
IPAddresses
-----------
{192.168.1.171, fe80::983c:ebdf:3e87:34db}
```

[END_BOX]

[START_BOX]

## 3. Connect to your node

Next, log in to your node so that you can prepare your node for the bootstrap process.

If you're using physical hardware, you can log in to your system directly. If your node is running remotely, such as in the cloud, create an RDP connection. If your node is a local virtual machine, such as a Hyper-V instance, you can connect through your virtualization software.

The following resources can help you connect if your node is running on AWS, Azure, or as a Hyper-V instance.

<% accordion('connect-aws', 'Amazon Web Services') do %>

<% markdown do %>

[Connecting to Your Windows Instance Using RDP](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/connecting_to_windows_instance.html)

<% end %>

<% end %>

<% accordion('connect-azure', 'Microsoft Azure') do %>

<% markdown do %>

[Log on to a Windows virtual machine](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-log-on-windows-server/)

<% end %>

<% end %>

<% accordion('connect-hyper-v', 'Hyper-V') do %>

<%= partial 'layouts/partials/hyper-v/connect_vm' %>

<% end %>

[END_BOX]

[START_BOX]

## 4. Configure the firewall to accept remote WinRM connections

In the next part, you'll bootstrap your Windows Server node remotely from your workstation over the WinRM protocol.

By default, the Windows firewall permits inbound traffic on port 5985 (WinRM) only from systems in the same local domain. Let's make sure that the firewall is configured to accept inbound connections from any remote address.

Run this command to change the default rule to enable inbound traffic from any remote address.

```ps
$ Get-NetFirewallPortFilter | ?{$_.LocalPort -eq 5985 } | Get-NetFirewallRule | ?{ $_.Direction –eq "Inbound" -and $_.Profile -eq "Public" -and $_.Action –eq "Allow"} | Set-NetFirewallRule -RemoteAddress "Any"
```

In practice, your firewall settings depend on your environment. For example, if each node in your network is joined to the same domain, you might use the default firewall settings.

[END_BOX]

[START_BOX]

## 5. Verify the configuration

From your workstation, you can verify that your Windows Server node can receive network traffic on port 5985 and through the firewall. You don't have to do this every time you bootstrap a node, but verifying that your node is connectable will help ensure that the bootstrap process succeeds.

To verify the connection, you can use the `knife wsman test` command, which is provided by the `knife-windows` plugin. This command provides functionality that's similar to PowerShell's
[Test-WSMan](https://technet.microsoft.com/en-us/library/hh849873.aspx) cmdlet, but is available from any operating system that can run Chef DK, including Windows, Mac OS, and Linux.

From the <% fp '~/learn-chef' %> directory on your workstation, run the following command, replacing <% ph 'HOSTNAME' %> with your node's hostname or IP address.

```bash
# ~/learn-chef
$ knife wsman test HOSTNAME --manual-list
```

Here's an example:

```bash
# ~/learn-chef
$ knife wsman test 52.201.225.210 --manual-list
Connected successfully to 52.201.225.210 at http://52.201.225.210:5985/wsman.
```

[END_BOX]

[START_BOX]

## Summary

In this part, you brought up a node that you'll later configure using Chef. You also configured the firewall to accept inbound WinRM connections and created a test WinRM connection to your node.

You can also automate the process. For example, if you use Amazon EC2, you might attach an initialization script to your instance's [user data](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html).

Depending on your requirements, [additional options](https://github.com/chef/knife-windows) are available to set up your node for use with Chef, including how to configure your node to use SSL.

[END_BOX]
