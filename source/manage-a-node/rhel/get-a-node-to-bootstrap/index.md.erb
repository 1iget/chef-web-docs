---
title: 'Get a node to bootstrap'
order: 3
description: 'Set up a system running Red Hat Enterprise Linux or CentOS to be managed by Chef.'
keywords:
layout: lesson
sections: [exercises]
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
[HEADLINE] Any computer that's managed by Chef is called a _node_.

Now it's time to bring up a Red Hat Enterprise Linux 7 or CentOS 7 instance and prepare it for the bootstrap process.

In [Learn the Chef basics](/tutorials/learn-the-basics/rhel/free/), you installed the Chef DK on a server and configured it directly. Here you'll set up a Red Hat Enterprise Linux or CentOS server, called a _node_, and prepare your node to be configured by Chef remotely from your workstation.

Like before, we suggest that you work in a disposable environment such as a Red Hat Enterprise Linux or CentOS virtual machine or cloud instance. To ensure that the output you see matches the sample output that's shown, we recommend that you run Red Hat Enterprise Linux 7 or CentOS 7 on your instance. Also ensure that you have `sudo` or root access to the instance.

[COMMENT] The easiest way to get started is to use a system that has full Internet access. However, many users run Chef behind the firewall. [Check out this blog post](https://www.chef.io/blog/2014/10/28/working-with-chef-behind-your-firewall/) to learn more.

[START_BOX]

## 1. Get a Red Hat Enterprise Linux 7 or CentOS 7 node to bootstrap

Your node must be reachable from your workstation &ndash; the system where you'll initiate the bootstrap process. We'll show you how to verify a connection before you bootstrap your node.  

The free trial virtual machine that we provide in the first tutorial is not reachable from the Internet because its IP address is allocated on the private network. Therefore, you'll need to bring up your own system.

If you used your own system for the first tutorial, we recommend that you set up a second system so that you can see the bootstrap process run on a clean configuration. If you do decide to bootstrap your existing system, just keep in mind that the output you see won't match what's shown because that system is already configured with the Chef tools and your basic Apache web server configuration.

If you don't have a preferred way to set up a server, here are some popular options.

<% accordion('vm-aws', 'Amazon Web Services') do %>

<%= partial 'layouts/partials/aws_centos_instance' %>

<% end %>

<% accordion('vm-azure', 'Microsoft Azure') do %>

<%= partial 'layouts/partials/azure_centos_instance' %>

<% end %>

<% accordion('vm-vagrant', 'VirtualBox and Vagrant') do %>

<% markdown do %>

[VirtualBox](https://www.virtualbox.org/) and [Vagrant](https://www.vagrantup.com/) are free virtualization tools that enable you to manage virtual machine instances on your workstation.

Choose this option if you don't have access to cloud resources or you prefer to work with local virtual machines. You'll also need reasonably powerful hardware. Ensure that:

* your workstation supports and is configured to use CPU virtualization. This setting is typically configured through your system's BIOS.
* your workstation meets the [system requirements](https://www.virtualbox.org/wiki/End-user_documentation) requirements for running VirtualBox.
* your workstation has at least 5GB of free disk space. This will enable you to download the base image and run a few virtual machine instances.
* your workstation has at least 512MB memory available per virtual machine instance.
* nested virtualization is enabled if you're using another virtual machine as your workstation through a program such as VMWare Fusion.

Here's how to install VirtualBox and Vagrant and bring up a CentOS 7 instance.

Start by installing Virtual Box and Vagrant.

### Install VirtualBox

<%= partial 'layouts/install_virtualbox' %>

### Install Vagrant

<%= partial 'layouts/install_vagrant' %>
<%= partial 'layouts/vagrant_centos_box' %>

<% end %>

<% end %>

[END_BOX]

[START_BOX]

## 2. Gather some details about your machine

[COMMENT] All you need is for your virtual machine to be running &ndash; don't connect to it just yet.

Now, gather this information about your machine:

* Its host name or public IP address.
* A user name that has root or `sudo` access and its password. If you use key-based authentication to connect to your instance, note the location of your private key file.

<% markdown do %>

If you're bootstrapping a local virtual machine, such as a Vagrant instance, you'll also need to know which [forwarded port](https://docs.vagrantup.com/v2/networking/forwarded_ports.html) Vagrant chose for routing SSH traffic. Forwarded ports enable the host (your workstation) to receive and forward network traffic to the guest (the virtual machine.)

If you're using virtualization software other than Vagrant and VirtualBox, check the documentation for that software to learn how to get the SSH connection details to the virtual machine, including the SSH forwarded port. Here's how to get the connection details for Vagrant.

<% accordion('vagrant-details', "Show details") do %>

<%= partial 'layouts/partials/vagrant_ssh_config_centos' %>

<% end %>

<% end %>

[END_BOX]

[START_BOX]

## 3. Create a test SSH connection to your node

The bootstrap process connects to your node over SSH. Now that you have the connection details, let's create a test SSH connection to your node.

You don't have to do this every time you bootstrap a node, but verifying that your node is connectable will help ensure that the bootstrap process succeeds.

[WINDOWS] If you're on a Windows workstation and have Git installed, you can use the `ssh` command that we show here. If you're using PuTTY, the [getting started](http://the.earth.li/~sgtatham/putty/0.66/htmldoc/Chapter2.html#gs) guide shows how to start an SSH connection. Also, if you're using key-based authentication, you'll need to [convert your private key](http://the.earth.li/~sgtatham/putty/0.64/htmldoc/Chapter8.html#pubkey) to a format PuTTY can use.

Here are examples for the various ways you can connect.

### Connect using a username and password

```bash
$ ssh root@40.76.28.32
The authenticity of host '40.76.28.32 (40.76.28.32)' can't be established.
RSA key fingerprint is SHA256:YiT1n9QZ64GnXcCeRpYMOLxpJZ9IjCft1Fpf5tvAFuQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '40.76.28.32' (RSA) to the list of known hosts.
root@40.76.28.32's password:
```

### Connect using key-based authentication

```bash
$ ssh -i ~/.ssh/my.pem root@40.76.28.32
The authenticity of host '40.76.28.32 (40.76.28.32)' can't be established.
RSA key fingerprint is SHA256:YiT1n9QZ64GnXcCeRpYMOLxpJZ9IjCft1Fpf5tvAFuQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '40.76.28.32' (RSA) to the list of known hosts.
```

### Connect to a local virtual machine using a forwarded port

Here's an example for Vagrant. The `-l` option specifies the username `vagrant`. The `-p` option specifies the port on the host (2222) that will forward to port 22 on the guest.

```bash
$ ssh -i /home/user/.vagrant/machines/default/virtualbox/private_key -l vagrant -p 2222 localhost
The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.
RSA key fingerprint is c4:4d:f9:05:09:31:33:05:cd:99:52:5b:fc:e0:10:b5.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.
Last login: Thu Dec  3 15:32:08 2015 from 10.0.2.2
```

[END_BOX]

[START_BOX]

## 4. Verify network access

For this tutorial, you'll need to ensure that your node can access the Internet and has ports 22 (SSH), 80 (HTTP), and 443 (HTTPS) open to inbound traffic through the firewall.

Although Chef can be run completely from behind the firewall, giving your node Internet access is the easiest way to install packages and perform other common tasks.

In production, you might use automation to bring up servers that have the required network configuration. But for now, let's manually ensure that your server can reach the Internet through your company's firewall. One easy way to test your connection is to run `curl` to retrieve www.cnn.com and search the output for a 200 OK result.

```bash
$ curl -I http://www.cnn.com | grep HTTP/1.1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0 88096    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
HTTP/1.1 200 OK
```

If you see 200 OK in the output, you're all set and can move to the next lesson.

If you receive an error like this one, you'll need to configure your firewall.

```bash
$ curl -I http://www.cnn.com | grep HTTP/1.1

curl: (6) Couldn't resolve host 'www.cnn.com'
```

<% accordion('configure-firewall', 'Configure the firewall') do %>

<%= partial 'layouts/partials/configure_iptables' %>

<p/>
If you're still unable to connect, your company's firewall or proxy server might be blocking outbound Internet access. In that case, you may need to work with your network administrator to see what options are available for you to access the Internet from your server.

<% end %>

[END_BOX]

[START_BOX]

## 5. Close your SSH session

Now close the SSH connection to your Red Hat Enterprise Linux or CentOS node.

```bash
[root@40.76.28.32 ~]$ exit
logout
Connection to 40.76.28.32 closed.
```

[END_BOX]

[START_BOX]

## Summary

In this lesson, you brought up a node that you'll later configure using Chef.

You also created a test connection to your node over SSH. But once you get the hang of things, you'll see that the bootstrap process enables you to configure your servers without the need to connect to them directly. This enables you to further automate the process of provisioning and configuring your infrastructure.

[END_BOX]
