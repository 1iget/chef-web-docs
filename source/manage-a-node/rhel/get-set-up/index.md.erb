---
title: 'Set up your workstation'
order: 1
description: "Install the Chef DK and a text editor on your workstation."
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
Recall that your workstation is the computer from which you author your cookbooks and administer your network. Although you're configuring a Red Hat Enterprise Linux server, your workstation can be any OS you choose &ndash; be it Linux, Mac OS, or Windows.

[WINDOWS] If you're using a Windows 7 workstation, [you'll need to install Windows PowerShell 4.0](http://social.technet.microsoft.com/wiki/contents/articles/21016.how-to-install-windows-powershell-4-0.aspx) or later before you begin. PowerShell is part of the Windows Management Framework.

[START_BOX]

## 1. Install the Chef Development Kit

In the first tutorial, [Learn the Chef basics](/learn-the-basics/rhel/), you used the tools provided by the Chef Development Kit (Chef DK) to configure a virtual machine directly. Now it's time to install the Chef DK on your workstation so that you can manage a node remotely.

[COMMENT] You can also use a virtual machine as your workstation. Just make sure your VM meets the [system requirements](https://docs.chef.io/install_dk.html#review-prerequisites).

<a class='accent-button radius' href='https://downloads.chef.io/chef-dk/' target='_blank'>Install Chef DK&nbsp;&nbsp;<i class='fa fa-external-link'></i></a>

[COMMENT] The [Chef documentation](https://docs.chef.io/install_dk.html) describes additional steps that can help you set up your workstation to use Chef more effectively. You don't have to perform all the steps now, but you can refer to it later if you run into problems. For example, if you're running multiple versions of Ruby, the documentation explains [how to use Chef's Ruby](https://docs.chef.io/install_dk.html#set-system-ruby).

[END_BOX]

[START_BOX]

## 2. Set up your text editor

As you did in the previous tutorial, make sure you have a good text editor that provides features such as syntax highlighting and line numbering.

Now's a good time to make sure your favorite text editor is set up. If you don't have a preferred text editor, [Atom](http://atom.io), [Sublime Text](http://www.sublimetext.com), and [Visual Studio Code](https://code.visualstudio.com) are popular among Chef users, and run in a graphical user environment.

[END_BOX]

[START_BOX]

## 3. Create a working directory

Create a directory to hold your work as you progress through the Learn Chef tutorials. Chef users commonly create a directory for their organization and a subdirectory for each project, as is common when working with GitHub.

For the Learn Chef tutorials, we'll use <code class="file-path">~/learn-chef</code> as the root directory.

```bash
# ~
$ mkdir ~/learn-chef
$ cd ~/learn-chef
```

You can use a different directory if you'd like &ndash; just be sure to adjust the paths you see in the tutorials.

[WINDOWS] On Windows, we recommend that you use PowerShell to work with Chef. On Learn Chef, we use the <code class="file-path">~</code> character in directory names, which is a common shortcut for the user's home directory on Linux, but also works in PowerShell. On Windows, <code class="file-path">~</code> refers to your home directory, for example, <code class="file-path">C:\Users\Administrator</code>.

[END_BOX]

[START_BOX]

## 4. Windows workstation only &ndash; install an SSH client

In this tutorial, you'll log in to your Linux instance to verify your work. To do so, you'll need an SSH client. Mac OS and most Linux distributions come with an SSH client. On Windows, you'll need to install one manually.

The easiest way to get set up is to [install Git](http://git-scm.com/download/), which includes an SSH client. [Learn more](http://www.hurryupandwait.io/blog/need-an-ssh-client-on-windows-dont-use-putty-or-cygwinuse-git).

After you install Git, open a new PowerShell window and run `git --version` to check whether the path to the Git binaries is included in your system `PATH`.

```ps
$ git --version
git version 2.7.3.windows.1
```

If you receive an error, you'll need to add Git to your `PATH` environment variable manually. Here's how to do that for the 64-bit version of Git.

```ps
$ $path = [Environment]::GetEnvironmentVariable("PATH", "Machine")
$ $git_path = "C:\Program Files\Git\cmd;C:\Program Files\Git\usr\bin"
$ [Environment]::SetEnvironmentVariable("PATH", "$path;$git_path", "Machine")
```

Here's how for the 32-bit version of Git.

```ps
$ $path = [Environment]::GetEnvironmentVariable("PATH", "Machine")
$ $git_path = "C:\Program Files (x86)\Git\cmd;C:\Program Files (x86)\Git\usr\bin"
$ [Environment]::SetEnvironmentVariable("PATH", "$path;$git_path", "Machine")
```

[WINDOWS] Many Git users use Git Bash, which is part of Git for Windows, to work with Git from Windows. [posh-git](https://github.com/dahlbyk/posh-git) is another popular option, which provides access to Git from Windows PowerShell.

[END_BOX]
