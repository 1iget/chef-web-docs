---
title: 'Create the Customers web application'
short_title: 'Create the Customers app'
order: 6
keywords: TODO
layout: tutorials/platforms/environments/overview/lesson/layout
time_to_complete: 30 minutes
snippet_path: create-a-web-app-cookbook/ubuntu/vagrant/create-the-customers-app-ubuntu-vagrant
snippet_workstation: ubuntu
---
So far, you have a cookbook named `lamp` which can configure a general-purpose LAMP stack. Let's summarize some of its features.

* The `lamp` cookbook runs on Ubuntu, and configures Apache, MySQL, and PHP.
* The `lamp` cookbook uses node attributes to make the document root, database name, and database administrator configurable.
* For testing purposes, the `lamp` cookbook includes a data bag which includes the MySQL root and administrator passwords.
* The `lamp` cookbook includes InSpec tests that help you automatically verify the configuration behaves as you expect.

Say you have the requirement to deliver a web application that displays customer records. How can you extend the `lamp` cookbook to configure a specific web application?

You could create a duplicate, or _fork_, of the `lamp` cookbook and modify it to suit your needs. However, what happens when new features are added to the `lamp` cookbook? Integrating new features into your copy can become tedious.

A more common pattern is to create what's commonly called a _wrapper cookbook_. A wrapper cookbook wraps another cookbook to extend or change its behavior without forking it.

To wrap another cookbook, you typically follow the same pattern you used previously to take advantage of community cookbooks from Chef Supermarket. You start by referencing the base cookbook in your wrapper cookbook's <% fp 'metadata.rb' %> file. Then you include the specific recipes you want to run in your base cookbook from your wrapper cookbook's recipes. To change the way the base cookbook behaves, you can override node attributes from the base cookbook in your wrapper cookbook's attributes file.

In this part, you'll create a cookbook called `lamp_customers` that configures the Customers web application. The Customers web application is basic to illustrate the concept of a wrapper cookbook. It includes these features:

* It adds a table to the database that contains sample customer records.
* It adds a homepage that uses PHP code to read from the database and display customer data to the user.

Here's what the Customers web app looks like.

![the resulting web page](misc/manage_customers_node.png)

[START_BOX]

## 1. Create the lamp_customers cookbook

```bash
$ cd ~/learn-chef
```

<% command_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/cd-learn-chef-ubuntu-vagrant-2', features: :stdin) %>

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/lamp_customers
```

<% command_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/chef-generate-cookbook-lamp_customersubuntu-vagrant') %>

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/lamp_customers
```

<% command_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/cd-lamp_customers-ubuntu-vagrant', features: :stdin) %>

Update Berksfile

<% code_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/berkfile-ubuntu-vagrant') %>

Update metadata.rb

<% code_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/metadata-ubuntu-vagrant-4') %>

In default.rb, include_recipe 'lamp::default'

<% code_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/run-lamp-recipe-ubuntu-vagrant') %>

* Update .kitchen.yml to point to `lamp`'s databag path (in practice, might have its own...)
  * (Maybe omit data bags path for now and add later before 2nd kitchen converge? Or, just say we add it now to prepare us for later... (I think I like the 1st option - need to add that!))

<% code_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/kitchen-yml-ubuntu-vagrant-3') %>

`kitchen converge`

<% command_snippet(page: current_page, path: 'create-lamp_customers-cookbook-ubuntu-vagrant/kitchen-converge-ubuntu-vagrant-5') %>

[END_BOX]

[START_BOX]

## 2. Add a database table that contains sample customer records

* `chef generate file create-tables.sql`

<% command_snippet(page: current_page, path: 'add-database-table-ubuntu-vagrant/chef-generate-file-create-tables-ubuntu-vagrant') %>

* Write `create-tables.sql`

<% code_snippet(page: current_page, path: 'add-database-table-ubuntu-vagrant/create-tables-sql-ubuntu-vagrant') %>

default.rb:

```ruby
include_recipe 'lamp::default'

passwords = data_bag_item('passwords', 'mysql')

# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')

# Write the SQL script to the filesystem.
cookbook_file create_tables_script_path do
  source 'create-tables.sql'
end

# Seed the database with a table and test data.
execute "initialize #{node['lamp']['database']['dbname']} database" do
  command "mysql -h #{node['lamp']['database']['host']} -u #{node['lamp']['database']['admin_username']} -p#{passwords['admin_password']} -D #{node['lamp']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['lamp']['database']['host']} -u #{node['lamp']['database']['admin_username']} -p#{passwords['admin_password']} -D #{node['lamp']['database']['dbname']} -e 'describe customers;'"
end
```

<% code_snippet(page: current_page, path: 'add-database-table-ubuntu-vagrant/run-database-script-ubuntu-vagrant') %>

[END_BOX]

[START_BOX]

## 3. Add a homepage that uses PHP code

* `chef generate template index.php`

<% command_snippet(page: current_page, path: 'add-homepage-ubuntu-vagrant/chef-generate-template-index-ubuntu-vagrant') %>

* Write `index.php.erb`

<% code_snippet(page: current_page, path: 'add-homepage-ubuntu-vagrant/index-php-ubuntu-vagrant') %>

Update default.rb

```ruby
include_recipe 'lamp::default'

passwords = data_bag_item('passwords', 'mysql')

# Create a path to the SQL file in the Chef cache.
create_tables_script_path = File.join(Chef::Config[:file_cache_path], 'create-tables.sql')

# Write the SQL script to the filesystem.
cookbook_file create_tables_script_path do
  source 'create-tables.sql'
end

# Seed the database with a table and test data.
execute "initialize #{node['lamp']['database']['dbname']} database" do
  command "mysql -h #{node['lamp']['database']['host']} -u #{node['lamp']['database']['admin_username']} -p#{passwords['admin_password']} -D #{node['lamp']['database']['dbname']} < #{create_tables_script_path}"
  not_if  "mysql -h #{node['lamp']['database']['host']} -u #{node['lamp']['database']['admin_username']} -p#{passwords['admin_password']} -D #{node['lamp']['database']['dbname']} -e 'describe customers;'"
end

# Write the home page.
template "#{node['lamp']['web']['document_root']}/index.php" do
  source 'index.php.erb'
  variables(
    admin_password: passwords['admin_password']
  )
end
```

<% code_snippet(page: current_page, path: 'add-homepage-ubuntu-vagrant/run-php-template-ubuntu-vagrant') %>

[END_BOX]

[START_BOX]

## 4. Specify the document root and database name

```bash
# ~/learn-chef/cookbooks/lamp_customers
$ chef generate attribute default
```

<% command_snippet(page: current_page, path: 'add-node-attributes-ubuntu-vagrant/chef-generate-attribute-ubuntu-vagrant-2') %>

Write default.rb

<% code_snippet(page: current_page, path: 'add-node-attributes-ubuntu-vagrant/attribute-ubuntu-vagrant-4') %>

[END_BOX]


[START_BOX]

## 5. Apply the configuration

`kitchen converge`

<% command_snippet(page: current_page, path: 'apply-cookbook-ubuntu-vagrant/kitchen-converge-ubuntu-vagrant-6') %>

![the resulting web page](misc/manage_customers_node.png)

[END_BOX]

[START_BOX]

## 6. WRITE UNIT TESTS

Update default_test.rb

```ruby
describe command("mysql -h 127.0.0.1 -uroot -pfakerootpassword -D 4thcoffee -e 'describe customers;'") do
  its('stdout') { should match(/id/) }
end

describe command 'wget -qO- localhost' do
  its('stdout') { should match(/Customers/) }
end
```

<% code_snippet(page: current_page, path: 'verify-customers-configuration-ubuntu-vagrant/inspec-default-ubuntu-vagrant-2') %>

`kitchen verify`

<% command_snippet(page: current_page, path: 'verify-customers-configuration-ubuntu-vagrant/kitchen-verify-customers-ubuntu-vagrant-1') %>


`kitchen test`

<% command_snippet(page: current_page, path: 'verify-customers-configuration-ubuntu-vagrant/kitchen-test-ubuntu-vagrant-2') %>

[END_BOX]

<% next_page(current_page) do %>

In this tutorial, you set up a basic yet complete web application stack that includes a web server, database, and scripting. Through local development, you're able to iterate, experiment, and get fast feedback as you develop your configuration policy. It also gives you greater confidence that your cookbooks will behave as you expect before you upload them to Chef server and run them on a bootstrapped node.

You also learned a few new skills, such as how to use Berkshelf to manage cookbook dependencies and how to use node attributes to work with passwords and other sensitive data.

[GITHUB] Get the final version of the `awesome_customers_ubuntu` cookbook on [GitHub](https://github.com/learn-chef/awesome_customers_ubuntu).

Next, we recommend that you [learn about automated testing](/skills/get-started-with-testing/). You'll learn how to use tools such as InSpec, ChefSpec, RuboCop, and Foodcritic to speed up the feedback loop even more by writing test code that automatically verifies whether your policy behaves as you expect.

[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).

<p style="font-size: 14px; font-style: italic;">
This tutorial was inspired from <a href="http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/">Getting Started Writing Chef Cookbooks the Berkshelf Way</a>, by Mischa Taylor. It was updated for use with the Chef DK and the latest community cookbooks.
</p>

<% end %>
