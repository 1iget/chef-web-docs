---
title: 'Run your web application on a node'
order: 11
keywords: TODO
layout: tutorials/platforms/environments/overview/lesson/layout
sections: [exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 60 minutes
---
Now that you have the Customers web application working on a local test instance through Test Kitchen, you can apply your `awesome_customers_ubuntu` cookbook to a real server, or node.

This part is optional, but it's a good opportunity to practice uploading your cookbooks to Chef server and then applying them to a bootstrapped node. In the process, you'll also learn how to use Berkshelf to automatically identify and resolve dependencies that your cookbook has on other cookbooks.

You'll need to [set up a Chef server account](/tutorials/manage-a-node/ubuntu/) if you don't already have one.

Here are the steps you'll follow:

1. [Bring up a node to manage](#step1)
1. [Upload your cookbooks to Chef server](#step2)
1. [Bootstrap your node](#step3)
1. [Verify the configuration](#step4)
1. [Optionally, clean up your environment](#cleanupyourenvironment)

[START_BOX]

## 1. Bring up a node to manage

Like you did in [Manage a node](/tutorials/manage-a-node/ubuntu/), bring up an Ubuntu 14.04 server to manage. Your server can run on spare hardware, a cloud instance, or even a virtual machine.

[Read this page](/tutorials/manage-a-node/ubuntu/hosted/get-a-node-to-bootstrap/) if you need a refresher on how to prepare your node for the bootstrap process.

At this point, your node should have ports 22, 80, and 443 open through the firewall. You also need your node's host name or public IP address, as well as an account that has root or `sudo` access and its password. If you use key-based authentication to connect to your instance, note the location of your private key file.

[END_BOX]

[START_BOX]

## 2. Upload your cookbooks to Chef server

Recall that <% fp 'metadata.rb' %> references the cookbooks your cookbook depends on.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_ubuntu/metadata.rb
name 'awesome_customers_ubuntu'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_ubuntu'
long_description 'Installs/Configures awesome_customers_ubuntu'
version '0.1.0'

depends 'apt', '~> 4.0'
depends 'firewall', '~> 2.5'
depends 'httpd', '~> 0.4'
depends 'mysql', '~> 7.0'
depends 'mysql2_chef_gem', '~> 1.1'
depends 'database', '~> 6.0'
```

These cookbooks need to exist on the Chef server so that the node can access them when it runs `chef-client`.

You could download each cookbook from Chef Supermarket and then upload it the Chef server, but there's one minor complication &ndash; each cookbook you depend on might depend on one or more other cookbooks. And those cookbooks in turn might depend on others.

For example, if you look at the [mysql](https://github.com/chef-cookbooks/mysql/blob/master/metadata.rb) cookbook, you'll see in its <% fp 'metadata.rb' %> file that it depends on the `yum-mysql-community` and `smf` cookbooks.

```ruby
# metadata.rb
# [...]

depends 'yum-mysql-community'
depends 'smf'
```

To help unravel this dependency web &ndash; and remove the need for you to manually resolve cookbook dependencies &ndash; we're going to use [Berkshelf](http://berkshelf.com) instead of running the `knife cookbook upload` command to manually upload each dependency. Berkshelf uploads your cookbooks to the Chef server and retrieves the cookbooks that your cookbook depends on.

Berkshelf comes with the Chef DK, so you don't have to install anything.

When you created your cookbook, the `chef generate cookbook` command created a file named <% fp 'Berksfile' %> in the cookbook's root directory.

For this project, you won't need to work directly with <% fp 'Berksfile' %>. But you'll notice that <% fp 'Berksfile' %> comes pre-configured to pull cookbooks from Chef Supermarket.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ more Berksfile
source "https://supermarket.chef.io"

metadata
```

The `metadata` line tells Berkshelf to pull additional dependencies from the <% fp 'metadata.rb' %> file.

### Use Berkshelf to install your dependencies

The next step is to have Berkshelf resolve your dependencies by downloading all dependent cookbooks from Chef Supermarket.

Run `berks install`.

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ berks install
Resolving cookbook dependencies...
Fetching 'awesome_customers_ubuntu' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Installing apt (2.9.2)
Installing build-essential (2.2.4)
Installing chef-sugar (3.3.0)
Installing compat_resource (12.7.1)
Installing firewall (2.4.0)
Installing database (5.1.2)
Using awesome_customers_ubuntu (0.1.0) from source at .
Installing httpd (0.4.4)
Installing mariadb (0.3.1)
Installing mysql (7.0.0)
Installing mysql2_chef_gem (1.1.0)
Installing openssl (4.4.0)
Installing postgresql (4.0.0)
Installing rbac (1.0.3)
Installing smf (2.2.7)
Installing yum (3.10.0)
Installing yum-epel (0.6.5)
Installing yum-mysql-community (0.1.21)
```

Berkshelf installs dependent cookbooks to the <% fp '~/.berkshelf/cookbooks' %> directory so that they can be shared among all of your cookbooks.

```bash
$ ls ~/.berkshelf/cookbooks
apt-2.9.2                  httpd-0.4.4                rbac-1.0.3
build-essential-2.2.4      mariadb-0.3.1              smf-2.2.7
chef-sugar-3.3.0           mysql-7.0.0                yum-3.10.0
compat_resource-12.7.1     mysql2_chef_gem-1.1.0      yum-epel-0.6.5
database-5.1.2             openssl-4.4.0              yum-mysql-community-0.1.21
firewall-2.4.0             postgresql-4.0.0
```

### Use Berkshelf to upload the cookbooks to the Chef server

Now we can upload your cookbooks to the Chef server.

Run `berks upload`.

<% accordion('berks-no-ssl-verify', "If you're using your own Chef server") do %>

<%= partial 'layouts/partials/berks_no_ssl_verify' %>

<% end %>
<br>

```bash
# ~/learn-chef/cookbooks/awesome_customers_ubuntu
$ berks upload
Uploaded apt (2.9.2) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded awesome_customers_ubuntu (0.1.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded build-essential (2.2.4) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded chef-sugar (3.3.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded compat_resource (12.7.1) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded database (5.1.2) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded firewall (2.4.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded httpd (0.4.4) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded mariadb (0.3.1) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded mysql (7.0.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded mysql2_chef_gem (1.1.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded openssl (4.4.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded postgresql (4.0.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded rbac (1.0.3) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded smf (2.2.7) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded yum (3.10.0) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded yum-epel (0.6.5) to: 'https://api.chef.io:443/organizations/your_org'
Uploaded yum-mysql-community (0.1.21) to: 'https://api.chef.io:443/organizations/your_org'
```

### Verify that the upload process succeeded

To prove that the cookbooks uploaded successfully, run `knife cookbook list` from your <% fp '~/learn-chef' %> directory.

```bash
# ~/learn-chef
$ knife cookbook list
apt                        2.9.2
awesome_customers_ubuntu   0.1.0
build-essential            2.2.4
chef-sugar                 3.3.0
compat_resource            12.7.1
database                   5.1.2
firewall                   2.4.0
httpd                      0.4.4
mariadb                    0.3.1
mysql                      7.0.0
mysql2_chef_gem            1.1.0
openssl                    4.4.0
postgresql                 4.0.0
rbac                       1.0.3
smf                        2.2.7
yum                        3.10.0
yum-epel                   0.6.5
yum-mysql-community        0.1.21
```

Chef server now contains everything you need to run `chef-client` on your node.

[END_BOX]

[START_BOX]

## 3. Bootstrap your node

Now you can bootstrap your node. You'll specify the `awesome_customers_ubuntu` cookbook's default recipe in the node's run-list, which will apply your web application configuration.

Here are two examples of the bootstrap process. [Find more complete details](/tutorials/manage-a-node/ubuntu/hosted/bootstrap-your-node/).

### Bootstrap using a username and password

Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">PASSWORD</code> with your user's password. You can also replace the node name, <code class="placeholder">customers\_web_app</code>, with another if you prefer.

```bash
# ~/learn-chef
$ knife bootstrap ADDRESS --ssh-user USER --ssh-password 'PASSWORD' --sudo --use-sudo-password --node-name customers_web_app --run-list 'recipe[awesome_customers_ubuntu]'
Creating new client for customers_web_app
Creating new node for customers_web_app
Connecting to 23.96.80.167
23.96.80.167 [sudo] password for azureuser: -----> Installing Chef Omnibus (-v 12)
23.96.80.167 downloading https://www.opscode.com/chef/install.sh
23.96.80.167   to file /tmp/install.sh.11054/install.sh
23.96.80.167 trying curl...
23.96.80.167 Getting information for chef stable 12 for el...
[...]
23.96.80.167 Recipe: awesome_customers_ubuntu::web
23.96.80.167   * httpd_service_ubuntu_systemd[customers] action restart
23.96.80.167     * service[httpd-customers] action restart
23.96.80.167       - restart service service[httpd-customers]
23.96.80.167
23.96.80.167
23.96.80.167 Running handlers:
23.96.80.167 Running handlers complete
23.96.80.167 Chef Client finished, 132/215 resources updated in 06 minutes 19 seconds
```

### Bootstrap using key-based authentication

Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <% fp '~/.ssh/my.pem' %>. You can also replace the node name, <code class="placeholder">customers\_web_app</code>, with another if you prefer.

```bash
# ~/learn-chef
$ knife bootstrap ADDRESS --ssh-user USER --sudo --identity-file IDENTITY_FILE --node-name customers_web_app --run-list 'recipe[awesome_customers_ubuntu]'
Creating new client for customers_web_app
Creating new node for customers_web_app
Connecting to 54.69.248.21
54.69.248.21 -----> Installing Chef Omnibus (-v 12)
54.69.248.21 downloading https://www.opscode.com/chef/install.sh
54.69.248.21   to file /tmp/install.sh.16492/install.sh
54.69.248.21 trying curl...
54.69.248.21 Getting information for chef stable 12 for el...
[...]
54.69.248.21 Recipe: awesome_customers_ubuntu::web
54.69.248.21   * httpd_service_ubuntu_systemd[customers] action restart
54.69.248.21     * service[httpd-customers] action restart
54.69.248.21       - restart service service[httpd-customers]
54.69.248.21
54.69.248.21
54.69.248.21 Running handlers:
54.69.248.21 Running handlers complete
54.69.248.21 Chef Client finished, 132/215 resources updated in 02 minutes 08 seconds
```

[END_BOX]

[START_BOX]

## 4. Verify the configuration

From a browser, navigate to your server. You'll see this:

![](misc/manage_customers_node.png)

In this part, you uploaded your cookbooks to the Chef server and then bootstrapped your node. Later, [check out this appendix](/tutorials/create-a-web-app-cookbook/ubuntu/updating-your-nodes-configuration/) to read about some ways to update your node's configuration.

[END_BOX]

[START_BOX]

## Clean up your environment

Perform these steps if you want to clean up your environment after you complete this tutorial or you want to repeat the process from the beginning.

### Remove the cookbooks from the Chef server

From your workstation, run the `knife cookbook list` command to list the cookbooks that exist on your Chef server.

Then run `knife cookbook delete <cookbook-name>` to delete any cookbooks you no longer want.

The [bulk delete](https://docs.chef.io/knife_cookbook.html#bulk-delete) option is an easy way to remove multiple cookbooks. For example, `knife cookbook bulk delete . -p` will entirely remove all cookbooks from your Chef server.

[WARN] Be sure not to remove any cookbooks that are used by other nodes in your network.

### Remove the cookbooks from your Berkshelf cache

Berkshelf installs dependent cookbooks to the <% fp '~/.berkshelf/cookbooks' %> directory on your workstation so that they can be shared among all of your cookbooks.

From your workstation, you can remove individual cookbooks you no longer need from this directory, or remove them all like this.

```bash
$ rm -r ~/.berkshelf/cookbooks
```

### Delete the node from the Chef server

From your workstation, run these commands to delete the data about your node from the Chef server.

```bash
# ~/learn-chef
$ knife node delete customers_web_app --yes
Deleted node[customers_web_app]
$ knife client delete customers_web_app --yes
Deleted client[customers_web_app]
```

### Tear down your node

Deleting a node from your Chef server removes any data about that node from the server &ndash; it doesn't automatically tear down the instance.

Don't forget to tear down any cloud instances that you used to complete the tutorial.

[END_BOX]
