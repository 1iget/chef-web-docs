---
title: 'Configure SQL Server'
order: 5
keywords: TODO
layout: tutorials/platforms/environments/overview/lesson/layout
sections: []
next: {heading: Next, partial: next}
time_to_complete: 40 minutes
---
Now let's configure Microsoft SQL Server. For this tutorial, we'll use Microsoft SQL Server Express 2012.

In the previous lesson, you used PowerShell DSC to enable the IIS role.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/webserver.rb
# Enable the IIS role.
dsc_script 'Web-Server' do
  code <<-EOH
  WindowsFeature InstallWebServer
  {
    Name = "Web-Server"
    Ensure = "Present"
  }
  EOH
end
```

To configure SQL Server, we want to download the installer and run it from a Chef recipe. Although it's possible to [use PowerShell DSC to configure SQL Server](http://www.colinsalmcorner.com/post/install-and-configure-sql-server-using-powershell-dsc
), let's use the [sql_server](https://supermarket.chef.io/cookbooks/sql_server) cookbook from Chef Supermarket to learn how community cookbooks work.

Remember that Chef Supermarket is a place for the community to share cookbooks. In [Manage a Windows Server node](/tutorials/manage-a-node/windows/), you downloaded the Learn Chef IIS cookbook so you didn't have to type it in a second time. The `sql_server` cookbook on Chef Supermarket works in a similar way &ndash; it contains reusable components so that you don't have to reinvent the wheel.

The `sql_server` cookbook works by downloading the SQL Server installer to a temporary location. Then it runs the installer in quiet mode by [providing a configuration file](https://technet.microsoft.com/en-us/library/Dd239405\(v=SQL.110\).aspx) that lists the required configuration options. The cookbook uses the template mechanism that you worked with in the previous tutorial to build the configuration file. You'll learn in this lesson how to use node attributes to customize the contents of the configuration file when the cookbook runs.

The `sql_server` cookbook adheres to Chef's _test and repair_ model by downloading the installer only if it doesn't already exist and by running the installer only if SQL Server isn't installed.

[COMMENT] Keep in mind that for now your goal is to learn how Chef works. It's OK if you don't understand every detail of how the community cookbooks work because you're working in a safe environment. As you gain experience, you'll want to evaluate the code and documentation to ensure that the cookbooks you get from Chef Supermarket do exactly what you expect before you apply them to your production environment.

[START_BOX]

## 1. Reference the sql_server cookbook

You don't need to manually download cookbooks from Chef Supermarket to use them. You'll learn how to automatically download cookbooks in a bit, but the first step is to reference the cookbooks you want to load.

The way you load one cookbook from inside another is to reference it in your cookbook's metadata file, <% fp 'metadata.rb' %>. To use the `sql_server` cookbook, append the line `depends 'sql_server', '~> 2.5.0'` to <% fp 'metadata.rb' %>, making the entire file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/metadata.rb
name 'awesome_customers_windows'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_windows'
long_description 'Installs/Configures awesome_customers_windows'
version '0.1.0'

depends 'sql_server', '~> 2.5.0'
```

We also specify the version of the `sql_server` cookbook we want to use. Specifying, or _pinning_, the cookbook version helps you lock down functionality to a certain point in time. When a newer version of a cookbook is released, you can first verify and test that version before you deploy it to production. That way, you can adopt the latest changes and functionality when you're ready.

How did we know to specify version `2.5.0`? One way is by reading the latest version from the `sql_server` cookbook's [page](https://supermarket.chef.io/cookbooks/sql_server) on Supermarket.

![The sql_server cookbook version](misc/supermarket_sql_server_version.png)

Another way to get version information is through the `knife supermarket show` command. The following command retrieves information for the `sql_server` cookbook and searches the result for the latest version.

On a Windows workstation, you would run:

```ps
# ~/learn-chef
$ knife supermarket show sql_server | findstr latest_version
latest_version:     https://supermarket.chef.io/api/v1/cookbooks/sql_server/versions/2.5.0
```

On Linux or Mac OS, you would run:

```bash
# ~/learn-chef
$ knife supermarket show sql_server | grep latest_version
latest_version:     https://supermarket.chef.io/api/v1/cookbooks/sql_server/versions/2.5.0
```

There are [multiple ways to specify version constraints](http://docs.chef.io/cookbook_versions.html). The `~>` syntax, called the _pessimistic version constraint_, tells Chef that we want the latest version of the `sql_server` cookbook that is greater than or equal to `2.5.0` but less than `2.6.0`. The third digit in a Chef cookbook's version typically relates to bug fixes or patches that are compatible with prior versions.

[COMMENT] For this tutorial, just to ensure that what you see matches the output that is shown, we recommend that you use the versions that we specify, even if a newer version is available.  We'll periodically update this tutorial to match newer versions of the community cookbooks.

[END_BOX]

[START_BOX]

## 2. Create the database recipe

Now let's create a recipe to hold all of our database configuration code. From your <% fp '~/learn-chef' %> directory, start by creating a recipe named <% fp 'database.rb' %>.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_windows database
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_windows/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_windows/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_windows/spec/unit/recipes/database_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_windows/spec/unit/recipes/database_spec.rb
    - update content in file cookbooks/awesome_customers_windows/spec/unit/recipes/database_spec.rb from none to 6027f9
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_windows/recipes/database.rb] action create
    - create new file cookbooks/awesome_customers_windows/recipes/database.rb
    - update content in file cookbooks/awesome_customers_windows/recipes/database.rb from none to 97f98b
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 3. Set node attributes to customize the installation

In [Manage a Windows Server node](/tutorials/manage-a-node/windows/), you learned about some of the built-in node attributes that Chef provides, such as the node's IP address. You can also define your own custom attributes that are specific to your policy.

The `sql_server` cookbook defines [a number of node attributes](https://github.com/opscode-cookbooks/sql_server/blob/master/attributes/server.rb) that control how SQL Server is installed, such as the installation directory and which features to install. These values are written to the configuration file that the installer uses to customize the installation.

When you call one cookbook from another, you can specify, or _override_, that cookbook's node attributes with your values. Although in most cases we can use the default values, we also want to:

* indicate that we accept the terms of the end-user license agreement (EULA.) Accepting the EULA is mandatory to install SQL Server.
* install SQL Server 2012 Express and not SQL Server 2008 R2 Express, which is the default.
* name the SQL Server instance 'MSSQLSERVER'. Using this name simplifies the later process of setting up a database instance.
* specify not to install updates during the installation process. For our project, we don't need product updates.

### Create the custom attributes file

Let's create an attributes file that will define all of the custom attributes for your web application cookbook.

Run the following to create an attributes file named <% fp 'default.rb' %>.

```bash
# ~/learn-chef
$ chef generate attribute cookbooks/awesome_customers_windows default
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::attribute
  * directory[cookbooks/awesome_customers_windows/attributes] action create
    - create new directory cookbooks/awesome_customers_windows/attributes
  * template[cookbooks/awesome_customers_windows/attributes/default.rb] action create
    - create new file cookbooks/awesome_customers_windows/attributes/default.rb
    - update content in file cookbooks/awesome_customers_windows/attributes/default.rb from none to e3b0c4
    (diff output suppressed by config)
```

This command adds the <% fp 'default.rb' %> attribute file to the<br><% fp '~/learn-chef/cookbooks/awesome_customers_windows/attributes' %> directory.

### Override the sql_server cookbook's default attributes

Earlier, we listed the functionality we need to override. Here are the `sql_server` cookbook's attributes for these items, their default values, and the values we need to use.

| Attribute                              | Default value       | New value       |
|---------------------------------------:|---------------------|-----------------|
| `default['sql_server']['accept_eula']`    | `false`             | `true`          |
| `default['sql_server']['version']`        | `'2008'`            | `'2012'`        |
| `default['sql_server']['instance_name']`  | `'SQLEXPRESS'`      | `'MSSQLSERVER'` |
| `default['sql_server']['update_enabled']` | `true`              | `false`         |

To override these attributes, you create new ones that use the same names and define the values you want to use.

Add the following to <% fp 'default.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/attributes/default.rb
default['sql_server']['accept_eula'] = true
default['sql_server']['version'] = '2012'
default['sql_server']['instance_name']  = 'MSSQLSERVER'
default['sql_server']['update_enabled'] = false
```

#### Vagrant users: set the system administrators attribute

One final setting to account for is the Windows accounts that act as the SQL Server system administrators. The `sql_server` cookbook by default [sets this value to Administrator](https://github.com/chef-cookbooks/sql_server/blob/master/attributes/server.rb#L34).

```ruby
# default.rb
default['sql_server']['sysadmins'] = ['Administrator']
```

Many Test Kitchen drivers run Chef as the `Administrator` user. However, the Vagrant driver runs Chef as the `vagrant` user.

One way to solve this might be to include the `vagrant` user in the list of system administrators in your default node attributes file.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/attributes/default.rb
# This is not a recommended practice.
default['sql_server']['sysadmins'] = ['Administrator', 'vagrant']
```

However, this is not a recommened practice because the `vagrant` user is only part of your development and testing environment. You don't want this user name to be included in a production environment.

The correct way to enable the `vagrant` user to be a SQL system administrator in your development and testing environment is to override this node attribute from the `attributes` section of your Test Kitchen configuration file.

If you are using the Vagrant driver, make the final part of your <% fp '.kitchen.yml' %> file look like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
attributes:
  sql_server:
    sysadmins: ['Administrator', 'vagrant']
```

This setting includes both the `Administrator` and the `vagrant` users as SQL system administrators.

This syntax might look strange because you're used to writing node attributes using Ruby syntax. The Test Kitchen configuration file uses [YAML](http://yaml.org).

The complete <% fp '.kitchen.yml' %> file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.35.35"}]

provisioner:
  name: chef_zero

transport:
  name: winrm
  elevated: true

platforms:
  - name: windows-2012r2
    driver:
      customize:
        memory: 2048

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
      sql_server:
        sysadmins: ['Administrator', 'vagrant']
```

If you had specific requirements for which Windows accounts should be set as the system administrator, you would set `default['sql_server']['sysadmins']` in your default node attribute file, <% fp 'default.rb' %>. If you're using the Vagrant driver to test your configuration, you might continue to overwrite this attribute from your <% fp '.kitchen.yml' %> file to include the `vagrant` user.

[END_BOX]

[START_BOX]

## 4. Set the system administrator password

Before we install SQL Server, there's one more thing we need to take care of. We need to provide a system administrator (SA) password.

The `sql_server` cookbook requires the user to set the `node['sql_server']['server_sa_password']` node attribute with an initial SA password. The `sql_server` cookbook writes that password to the installer's configuration file.

Because Chef code is often maintained under source control, you never want to store passwords in a recipe in plain text.

There are several approches you can take. For example, you could use an [encrypted data bag](https://docs.chef.io/chef/essentials_data_bags.html). A data bag is a collection of key-value pairs that are shared among your nodes. You can encrypt data bags to protect sensitive information, such as certificates, API keys, and passwords. You would retrieve the decrypted password from the data bag when the recipe runs and use that value to set the `node['sql_server']['server_sa_password']` attribute.

For this project, we'll generate a random password for the administrator account when the cookbook runs and store that password directly in the node attribute. This way, the node has access to the password without making that password available to everyone who reads our recipes.

### Write the random_password helper method

To generate random passwords, you'll use Ruby's [SecureRandom.base64](http://ruby-doc.org/stdlib-2.2.0/libdoc/securerandom/rdoc/SecureRandom.html) method to build your own helper method. Then you'll call your helper method to set node attribute that holds the SA password.

Start by defining the `random_password` method at the top of your attributes file, <% fp 'default.rb' %>. The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/attributes/default.rb
def random_password
  require 'securerandom'
  password = SecureRandom.base64
  until password =~ /[A-Z]/ && password =~ /[a-z]/ && password =~ /[0-9]/
    password = SecureRandom.base64
  end
  password
end

default['sql_server']['accept_eula'] = true
default['sql_server']['version'] = '2012'
default['sql_server']['instance_name']  = 'MSSQLSERVER'
default['sql_server']['update_enabled'] = false
```

The `require 'securerandom'` part loads the `SecureRandom` module. We define it inside the `random_password` method to load the `SecureRandom` module only when it's used. The `SecureRandom.base64` method returns a string similar to "RuoHq6AvmcNH5hGKQkC0ew==".

To meet SQL Server's [strong password requirements](https://support.microsoft.com/en-us/kb/965823), the `random_password` method generates passwords until it finds one that includes at least one uppercase letter, at least one lowercase letter, and at least one digit. It uses regular expressions to validate the contents of the generated password.

<% accordion('regex-more', 'More about regular expressions') do %>

The [=~ pattern match operator](http://ruby-doc.org/core-2.1.0/Regexp.html#method-i-3D-7E) matches the string on the left-hand side to the regular expression on the right-hand side.

The slash `/` notation defines the regular expression pattern to match. The bracket `[]` notation defines which characters to match. For example, `/[A-Z]/` defines a regular expression that matches a single character in the range A through Z.

[Learn more about regular expressions](http://www.tutorialspoint.com/ruby/ruby_regular_expressions.htm)

Here's a more compact way to define a regular expression that validates SQL Server's strong password requirements. It uses [lookahead](http://www.rexegg.com/regex-lookarounds.html) to validate the password requirements without requiring the characters to occur in any particular order.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/attributes/default.rb
def random_password
  require 'securerandom'
  password = SecureRandom.base64
  until password =~ /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])/
    password = SecureRandom.base64
  end
  password
end
```

[Rubular](http://rubular.com) is a handy way to test out your regular expressions.

<% end %>
<br>

[COMMENT] In practice, you might add the `random_password` to a helper library to make it more reusable. The [openssl cookbook](https://github.com/chef-cookbooks/openssl/blob/master/libraries/random_password.rb) shows an example.

### Set the node attribute for the SA password

Now add a node attribute to your attributes file that defines the SA password. The entire file looks like this.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/attributes/default.rb
def random_password
  require 'securerandom'
  password = SecureRandom.base64
  until password =~ /^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])/
    password = SecureRandom.base64
  end
  password
end

default['sql_server']['accept_eula'] = true
default['sql_server']['version'] = '2012'
default['sql_server']['instance_name']  = 'MSSQLSERVER'
default['sql_server']['update_enabled'] = false
normal_unless['sql_server']['server_sa_password'] = random_password
```

Typically, you use `default` to define a node attribute. To ensure that the password is generated one time only, you use `normal_unless`. [normal_unless](https://docs.chef.io/attributes.html#use-attribute-files) sets the node attribute only if the attribute has no value.

[COMMENT] A node's attributes are accessible to other nodes in your network through Chef's [search](https://docs.chef.io/chef_search.html) capabilities. If you don't want other nodes to have access to sensitive information such as passwords, consider an alternative approach such as using encrypted data bags. The encrypted data is available to other nodes in your network, but only the nodes that have access to the secret key can decrypt the data. [chef-vault](https://github.com/Nordstrom/chef-vault) is commonly used to distribute secret keys to nodes. [Learn more](https://www.chef.io/blog/2016/01/21/chef-vault-what-is-it-and-what-can-it-do-for-you/)

### Modify your Test Kitchen configuration file to support local development

It's common to specify a value for passwords and other sensitive information as you develop your cookbooks. Here are a few reasons why.

First, recall that your Test Kitchen configuration file, <% fp '.kitchen.yml' %>, uses the `chef_zero` provisioner.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
[...]
provisioner:
  name: chef_zero
[...]
```

The `provisioner` section specifies how to run Chef. You specify `chef_zero` to mimic a Chef server environment on your local machine. Because the Chef server environment is reset between each Test Kitchen run, your node attributes are not preserved. This can cause problems when you run `kitchen converge` multiple times on the same test instance because your node attributes (for example, one that defines a database password) won't match the existing configuration.

Other reasons you might specify the passwords during development are to support testing and debugging. For example, if your database is not configured as you expect, it may be easier to connect to the database to troubleshoot the issue using an easy to remember password that you specify.

You can override node attributes in the `attributes` section of your <% fp '.kitchen.yml' %> file. Test Kitchen sets these attributes before your cookbooks runs. Modify the `suites` section of your copy to look like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
      sql_server:
        server_sa_password: 'SQL_sa_pa$$w0rd'
```

As an example, the complete version for the Vagrant driver looks like this.

```yaml
# ~/learn-chef/cookbooks/awesome_customers_windows/.kitchen.yml
---
driver:
  name: vagrant
  network:
    - ["private_network", {ip: "192.168.35.35"}]

provisioner:
  name: chef_zero

transport:
  name: winrm
  elevated: true

platforms:
  - name: windows-2012r2
    driver:
      customize:
        memory: 2048

suites:
  - name: default
    run_list:
      - recipe[awesome_customers_windows::default]
    attributes:
      sql_server:
        sysadmins: ['Administrator', 'vagrant']
        server_sa_password: 'SQL_sa_pa$$w0rd'
```

This syntax might look strange because you're used to writing node attributes using Ruby syntax. The Test Kitchen configuration file uses [YAML](http://yaml.org).

Remember, Test Kitchen is only involved during cookbook development and not when your cookbook is applied to a node that's managed by a Chef server. That's why your <% fp '.kitchen.yml' %> file is a safe place to store test passwords.

[COMMENT] Use basic names for your passwords while in development mode. Never use passwords that might appear on your production systems.

[END_BOX]

[START_BOX]

## 5. Install SQL Server

Now that we've referenced the `sql_server` cookbook from our cookbook's metadata and set up the node attributes we need to override, we're ready to install SQL Server.

The `sql_server` cookbook provides a recipe named `server` that does everything for us. So all we need to do is run that recipe from our `database` recipe.

Add the following to <% fp 'database.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/database.rb
# Install SQL Server.
include_recipe 'sql_server::server'
```

[END_BOX]

[START_BOX]

## 6. Set the database recipe to run

As you did for the `lcm` and `web` recipes, add a line to your cookbook's default recipe, <% fp 'default.rb' %> to run the `database` recipe.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/default.rb
include_recipe 'awesome_customers_windows::lcm'
include_recipe 'awesome_customers_windows::web'
include_recipe 'awesome_customers_windows::database'
```

[END_BOX]

[START_BOX]

## 7. Apply and verify the configuration

Like before, let's apply and then verify the configuration. Run `kitchen converge` to apply the `awesome_customers_windows` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen converge
-----> Starting Kitchen (v1.8.0)
-----> Converging <default-windows-2012r2>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
[...]
       Recipe: sql_server::server
         * template[C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\ConfigurationFile.ini] action create
           - create new file C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\ConfigurationFile.ini
           - update content in file C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\ConfigurationFile.ini from none to 9128b2
           --- C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\ConfigurationFile.ini	2016-04-27 02:03:50.000000000 +0000
           +++ C:\Users\vagrant\AppData\Local\Temp\kitchen\cache/chef-ConfigurationFile.ini20160427-2192-1bv5bkh	2016-04-27 02:03:50.000000000 +0000
           @@ -1 +1,202 @@
           +; SQLSERVER2012 Configuration File
           +; Generated by Chef Software Chef
           +[OPTIONS]
           +
           +; Auto accept the license terms
           +
           +IACCEPTSQLSERVERLICENSETERMS="True"
[...]
         * windows_package[Microsoft SQL Server 2012 (64-bit)] action install
         Recipe: <Dynamically Defined Resource>
           * remote_file[C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\package\SQLEXPR_x64_ENU.exe] action create
             - create new file C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\package\SQLEXPR_x64_ENU.exe
             - update content in file C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\package\SQLEXPR_x64_ENU.exe from none to 7f5e3d
             (file sizes exceed 10000000 bytes, diff output suppressed)
           - install version latest of package Microsoft SQL Server 2012 (64-bit)
       Recipe: sql_server::server
         * registry_key[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQLServer\SuperSocketNetLib\Tcp\IPAll] action create (up to date)
         * windows_service[MSSQLSERVER] action start (up to date)
         * windows_service[MSSQLSERVER] action enable (up to date)

       Running handlers:
       Running handlers complete
       Chef Client finished, 3/10 resources updated in 03 minutes 50 seconds

       Finished converging <default-windows-2012r2> (4m10.30s).
-----> Kitchen is finished. (4m12.90s)
```

You'll see from the output that the SQL Server install configuration file, <% fp 'ConfigurationFile.ini' %>, is generated and SQL Server 2012 Express is downloaded and installed.

Now let's connect to your node and run a few commands to help verify that the SQL Server service is running.

First, from a PowerShell session on your node, run these commands to set up PowerShell to manage SQL Server.

```ps
# ~
$ Set-ExecutionPolicy RemoteSigned
$ Import-Module SQLPS
```

Now run this command.

```ps
# ~
$ Get-Service MSSQL*

Status   Name               DisplayName
------   ----               -----------
Running  MSSQLSERVER        SQL Server (MSSQLSERVER)
```

You'll see that the `MSSQLSERVER` service is running.

[END_BOX]
