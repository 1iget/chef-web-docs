---
title: 'Configure the LCM'
order: 3
keywords: TODO
layout: tutorials/platforms/environments/overview/lesson/layout
sections: []
next: {heading: Next, partial: next}
time_to_complete: 20 minutes
---
In this tutorial, you'll use Chef's support for [PowerShell Desired State Configuration (DSC)](https://technet.microsoft.com/en-us/library/dn249912.aspx) to configure IIS and ASP.NET. With PowerShell DSC, you define the state of the system &ndash; files, processes, services, registry keys, and so on &ndash; and the framework ensures that the actual state matches the desired state.

The default configuration mode for the [Local Configuration Manager (LCM)](https://msdn.microsoft.com/en-us/powershell/dsc/metaconfig4), the DSC engine, is `ApplyAndMonitor`. The `ApplyAndMonitor` mode monitors the state of previous DSC actions and reports to the log file when any state changes, or _drifts_.

Because we'll use Chef to monitor for configuration drift, it's not necessary to enable the `ApplyAndMonitor` mode. Instead, we'll set the LCM's configuration mode to `ApplyOnly` to prevent DSC from checking for drift.

[START_BOX]

## 1. Verify the current configuration mode

`ApplyAndMonitor` is the default configuration mode, but let's verify. From a PowerShell windows on your Windows Server instance, run this command.

```ps
$ Get-DscLocalConfigurationManager | select -ExpandProperty "ConfigurationMode"
ApplyAndMonitor
```

You'll see that the current mode is `ApplyAndMonitor`.

[END_BOX]

[START_BOX]

## 2. Create the lcm recipe

The first step to setting the configuration mode is to create a recipe. From the <% fp '~/learn-chef' %> directory on your workstation, run this `chef generate recipe` command to create a recipe named `lcm`.

```bash
# ~/learn-chef
$ chef generate recipe cookbooks/awesome_customers_windows lcm
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[cookbooks/awesome_customers_windows/spec/unit/recipes] action create (up to date)
  * cookbook_file[cookbooks/awesome_customers_windows/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[cookbooks/awesome_customers_windows/spec/unit/recipes/lcm_spec.rb] action create_if_missing
    - create new file cookbooks/awesome_customers_windows/spec/unit/recipes/lcm_spec.rb
    - update content in file cookbooks/awesome_customers_windows/spec/unit/recipes/lcm_spec.rb from none to eba995
    (diff output suppressed by config)
  * template[cookbooks/awesome_customers_windows/recipes/lcm.rb] action create
    - create new file cookbooks/awesome_customers_windows/recipes/lcm.rb
    - update content in file cookbooks/awesome_customers_windows/recipes/lcm.rb from none to 80e3a4
    (diff output suppressed by config)
```

[END_BOX]

[START_BOX]

## 3. Write the lcm recipe to configure the LCM

Now write the recipe. Add this code to<br><% fp '~/learn-chef/cookbooks/awesome_customers_windows/recipes/lcm.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/lcm.rb
powershell_script 'Configure the LCM' do
  code <<-EOH
    Configuration ConfigLCM
    {
        Node "localhost"
        {
            LocalConfigurationManager
            {
                ConfigurationMode = "ApplyOnly"
                RebootNodeIfNeeded = $false
            }
        }
    }
    ConfigLCM -OutputPath "#{Chef::Config[:file_cache_path]}\\DSC_LCM"
    Set-DscLocalConfigurationManager -Path "#{Chef::Config[:file_cache_path]}\\DSC_LCM"
  EOH
  not_if '(Get-DscLocalConfigurationManager | select -ExpandProperty "ConfigurationMode") -eq "ApplyOnly"'
end
```

This code creates a DSC configuration named `ConfigLCM`. The configuration sets the local LCM's `ConfigurationMode` to `ApplyOnly` and prevents reboot.

Line 14 writes the configuration to the <% fp 'DSC_LCM' %> directory under Chef's cache directory. Line 15 uses the [Set-DscLocalConfigurationManager](https://technet.microsoft.com/en-us/library/dn521621.aspx) cmdlet to apply the LCM settings to the local system.

`Chef::Config[:file_cache_path]` reads the location of the Chef cache from the [chef-client configuration file](https://docs.chef.io/config_rb_client.html). The Chef cache is the location that holds cookbooks and temporary files. It's commonly used to store downloaded files and scripts in a location that's isolated from the rest of the system.

The `not_if` part ensures that the configuration is applied only if the system is not in the desired state. In this case, the configuration won't be set if the configuration mode is already `ApplyOnly`.

You'll learn more about how the `powershell_script` and `code` parts fit in to describing PowerShell and DSC code as part of a Chef recipe.

[END_BOX]

[START_BOX]

## 4. Run the lcm recipe

For our web application project, we'll use what's called the _application cookbook pattern_. An application cookbook typically contains multiple recipes, where each recipe configures one part of the system. The default recipe, <% fp 'default.rb' %>, lists these recipes in the order needed to build your application or service.

To run the `lcm` recipe, add the following to your cookbook's default recipe, <% fp 'default.rb' %>.

```ruby
# ~/learn-chef/cookbooks/awesome_customers_windows/recipes/default.rb
include_recipe 'awesome_customers_windows::lcm'
```

[COMMENT] Remember, order matters when you write and run recipes. That's why we'll always run this recipe before everything else.

[END_BOX]

[START_BOX]

## 5. Apply and verify the configuration

Let's apply and then verify the configuration. Run `kitchen converge` to apply the `awesome_customers_windows` cookbook.

```bash
# ~/learn-chef/cookbooks/awesome_customers_windows
$ kitchen converge
-----> Converging <default-windows-2012r2>...
       Preparing files for transfer
       Preparing dna.json
       Resolving cookbook dependencies with Berkshelf 4.3.2...
       Removing non-cookbook files before transfer
       Preparing validation.pem
       Preparing client.rb
[...]
       Recipe: awesome_customers_windows::lcm
         * powershell_script[Configure the LCM] action run
           - execute "C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe" -NoLogo -NonInteractive -NoProfile -ExecutionPolicy Bypass -InputFormat None -File "C:/Users/vagrant/AppData/Local/Temp/chef-script20160427-1920-1o4v017.ps1"

       Running handlers:
       Running handlers complete
       Chef Client finished, 1/1 resources updated in 38 seconds

       Finished converging <default-windows-2012r2> (0m44.95s).
-----> Kitchen is finished. (0m47.62s)
```

Now let's verify that the LCM is configured to use the new configuration mode.

From your Windows Server instance, run the same command that you ran in step 1.

```ps
$ Get-DscLocalConfigurationManager | select -ExpandProperty "ConfigurationMode"
ApplyOnly
```

You'll see that the current mode is now `ApplyOnly`.

As an optional exercise, you can examine the generated .mof configuration file. You can read from the output which directory holds the Chef cache &ndash; here's an example for Vagrant.

```ini
# C:\Users\vagrant\AppData\Local\Temp\kitchen\cache\DSC_LCM
/*
@TargetNode='localhost'
@GeneratedBy=vagrant
@GenerationDate=02/11/2016 20:14:13
@GenerationHost=WIN-HJ4AJJPSATO
*/
instance of MSFT_DSCMetaConfiguration as $MSFT_DSCMetaConfiguration1ref
{
ConfigurationMode = "ApplyOnly";
 RebootNodeIfNeeded = False;
};
instance of OMI_ConfigurationDocument
{
 Version="1.0.0";
 Author="vagrant";
 GenerationDate="02/11/2016 20:14:13";
 GenerationHost="WIN-HJ4AJJPSATO";
};
```

[END_BOX]
