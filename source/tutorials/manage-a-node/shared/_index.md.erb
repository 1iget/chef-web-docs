In [Learn the Chef basics](/tutorials/learn-the-basics/rhel/free/), you learned how to use Chef to bring up a web server and serve a basic home page. You configured the server by running the commands directly on it. Now, let's simulate a production environment more closely by using Chef to configure another web server that you manage remotely, from your workstation.

Typically, Chef is comprised of three elements &ndash; your workstation, a Chef server, and nodes.

<img src="/assets/images/networks/workstation-server-node.png" style="width: 100%; box-shadow: none;" alt="Your workstation, a Chef server, and nodes" />

* Your __workstation__ is the computer from which you author your cookbooks and administer your network. It's typically the machine you use everyday. Although you'll be configuring a Red Hat Enterprise Linux server, your workstation can be any OS you choose &ndash; be it Linux, Mac OS, or Windows.
* __Chef server__ acts as a central repository for your cookbooks as well as for information about every node it manages. For example, the Chef server knows a node's fully qualified domain name (FQDN) and its platform.
* A __node__ is any computer that is managed by a Chef server. Every node has the Chef client installed on it. The Chef client talks to the Chef server. A node can be any physical or virtual machine in your network.

In the lessons that follow, you'll use each of these three elements.

<% if current_page.data.environment == 'aws-automate' %>

Chef Automate extends this setup by giving your operations and development teams a common platform for developing, building, testing, and deploying cookbooks, applications, and more. It enables multiple teams to work together on systems made up of multiple components and services, and promotes the DevOps principles of cross-team collaboration, cooperation, and transparency.

![](automate/automate-architecture.svg)

In this tutorial, you'll set up a Chef server and a Chef Automate server. You'll use Chef Automate's [visibility](https://docs.chef.io/visibility.html) feature to gain insight into what's happening on your Chef server to better understand what happens when `chef-client` runs on your nodes.

You access Chef Automate's visibility feature through a web interface. Here's an example that details the result of a successful `chef-client` run.

![](manage-a-node/chef_automate_nodes_bootstrap_node1_details.png)

[COMMENT] Later, if you're interested in Chef Automate's workflow and compliance features, see [Get started with Chef Automate](/automate/) and [Assess your infrastructure with the Chef compliance scanner](/compliance-assess/).

<% end %>

After completing this tutorial, you should be able to:

* write Chef code to define a policy from your workstation.
* apply that policy to a node.
* update your policy and apply it to a node.
* understand how to diagnose and resolve a failed `chef-client` run.
<% if current_page.data.environment == 'aws-automate' %>
* use Chef Automate's visibility feature to visualize the status of your nodes.
<% end %>

<hr>

<% if current_page.data.environment == 'aws-automate' %>
**Note**&nbsp;&nbsp;To successfully complete this tutorial, you'll need three systems in addition to your Chef server:
<% else %>
**Note**&nbsp;&nbsp;To successfully complete this tutorial, you'll need two systems in addition to your Chef server:
<% end %>

<% if current_page.data.environment == 'aws-automate' %>
* A system running Chef Automate, which provides visibility into what's happening on your Chef server.
<% end %>
* A system running Linux, Mac OS, or Windows to act as your workstation. You can use a virtual machine or cloud instance if you don't want to use your primary computer.
* A system running Red Hat Enterprise Linux 7 or CentOS 7 to act as your node. This system can use spare hardware or run as a virtual machine or cloud instance.

You don't have to bring up any systems yet. The lessons that follow explain everything you'll need to get set up. You'll begin by setting up your workstation for Chef development.

<% accordion('test-configuration', 'Test configuration') do %>

<% markdown do %>

<% render_machine_config(current_page.data.machine_config) %>

<% end %>

<% end %>
