---
title: "Update your node's configuration"
description: Make a change to your cookbook, upload it to the Chef server, and see the node update its configuration.
order: 6
layout: tutorials/platforms/environments/overview/lesson/layout
time_to_complete: 20 minutes
snippet_path: manage-a-node/rhel/virtualbox/update-your-nodes-configuration
snippet_workstation: ubuntu
headings: [
  { label: '1. Add template code to your HTML', href: '#step1' },
  { label: "2. Update your cookbook's version metadata", href: '#step2' },
  { label: '3. Upload your cookbook to the Chef server', href: '#step3' },
  { label: '4. Run the cookbook on your node', href: '#step4' },

  ]
---
[HEADLINE] You ran `knife bootstrap` to associate your node with the Chef server and do an initial checkin. Bootstrapping is a one-time process.<br>The `knife ssh` command enables you to update your node's configuration when your cookbook changes.

During the bootstrap process, your node downloaded and installed `chef-client`, downloaded the latest cookbooks, and executed the run-list.

Chef provides information about your node that you can access from your cookbooks. Let's update our home page to display some info about the node. You'll practice updating your cookbook, uploading it to the Chef server, and seeing the changes appear on your node.

You already [learned how to use the template resource](/tutorials/learn-the-basics/rhel/free/make-your-recipe-more-manageable#step3) to reference the HTML file for your home page. You're ready to add placeholders to your HTML file that are filled in with info about your node as the recipe runs.

[START_BOX]

## 1. Add template code to your HTML

On the local workstation copy of your `learn_chef_httpd` cookbook, change <code class="file-path">index.html.erb</code> to look like this.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/index-html-erb') %>

[END_BOX]

[START_BOX]

## 2. Update your cookbook's version metadata

Before you upload an updated cookbook to Chef server, you should always update your cookbook's version metadata to ensure that each version is tied to a specific set of functionality.

Your cookbook's <code class="file-path">metadata.rb</code> file holds the cookbook's version. When you run the<br>`chef generate cookbook` command to create your cookbook, the initial version is set to 0.1.0. Here's what your `learn_chef_httpd` cookbook's <code class="file-path">metadata.rb</code> file looks like.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/metadata-0-1-0') %>

Most Chef cookbooks follow the [Semantic Versioning](http://semver.org) scheme. Version numbers are typically written as MAJOR.MINOR.PATCH, where:

* MAJOR specifies a change that's incompatible with previous versions.
* MINOR specifies new functionality that's backwards-compatible with previous versions.
* PATCH specifies backwards-compatible bug fixes.

According to [Semantic Versioning](http://semver.org), you should set your cookbook's version number to 1.0.0 at the point it's ready to use in production. But let's say that you're not yet ready to mark your cookbook ready for production. An update to the HTML template represents a minor change in functionality, so let's increment the middle number, making your cookbook's version 0.2.0.

Modify your copy of <% fp 'metadata.rb' %> like this. The `version` field changes to '0.2.0'.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/metadata-0-2-0') %>

[Learn more about cookbook versioning](https://docs.chef.io/cookbook_versions.html)

[END_BOX]

[START_BOX]

## 3. Upload your cookbook to the Chef server

Now you're ready to upload your cookbook to the Chef server. Run the `knife cookbook upload` command like this.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/upload-0-2-0', features: [:stdin, :stderr]) %>

[END_BOX]

[START_BOX]

## 4. Run the cookbook on your node

Now that your updated cookbook is on the Chef server, you can run `chef-client` on your node. The `chef-client` command pulls from Chef server the latest cookbooks from the node's run-list and applies the run-list to the node.

To run `chef-client` on your node remotely from your workstation, you'll run the [knife ssh](https://docs.chef.io/knife_ssh.html) command. `knife ssh` takes the command to run on the node as an argument. Here, we'll run `sudo chef-client`.

As with `knife bootstrap`, the options you provide to `knife ssh` depend on how you would normally connect to your node over SSH. [The other versions of this tutorial](/tutorials/manage-a-node/rhel/) describe the process more generally. But because your CentOS node is managed by Vagrant and VirtualBox, you connect to it by providing its SSH forwarded port.

Run the following command to run `chef-client` on your node.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/knife-ccr-1') %>

[COMMENT] Remember, in practice it's common to configure Chef to act as a service that runs periodically or as part of a continuous integration or continuous delivery (CI/CD) pipeline. For now, we're updating our server configuration by running `chef-client` manually.

[END_BOX]

[START_BOX]

## 4. Confirm the result

As before, run `curl` to verify the configuration. Replace the IP address you see here with yours. In this example, <% ph 'node1' %> is the Linux node's FQDN.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/curl-node1-2') %>

You can also open a web browser from your workstation and navigate to your web server.

Open a web browser from your workstation and navigate to your web server.

![The home page with FQDN](misc/webserver-template-node1.png)

The home page now displays "hello from node1.test" instead of "hello world".

[END_BOX]

[START_BOX]

## How to clean up your environment

Perform these steps if you want to clean up your Chef server after you complete this tutorial or you want to repeat the tutorial from the beginning.

### Delete the node from the Chef server

As you experiment, it's a good idea to delete information about your node from the Chef server when you no longer need it. That way, your Chef server contains only relevant information. In practice, it's up to you whether to delete node information when you retire a production system from service.

From your workstation, run these commands to delete the data about your node from the Chef server.

```bash
# ~/learn-chef
$ knife node delete node1 --yes
Deleted node[node1]
$ knife client delete node1 --yes
Deleted client[node1]
```

### Optional: Delete the RSA private key from your node

During the bootstrap process, an RSA private key is generated on your node to enable your node to make API calls to the Chef server. The default location of this key is <code class="file-path">/etc/chef/client.pem</code> on Linux systems.

If you plan to bootstrap your node a second time, for example, to practice the process, you'll need to log in to your node and delete the RSA private key file, like this.

```bash
$ sudo rm /etc/chef/client.pem
```

### Optional: Tear down your instance

Deleting a node from your Chef server removes any data about that node from the server &ndash; it doesn't automatically tear down the instance.

Don't forget to tear down any cloud instances that you used to complete the tutorial.

[END_BOX]

[START_BOX]

## Summary

In this lesson you updated your cookbook, uploaded it to the Chef server, and saw the changes appear on your node.

To update your cookbook you used a _template_. A [template][template] enables you to write a single, general recipe that’s customized for a particular node as the recipe runs. That means you don’t have to write a custom version of your recipe for every node.

You also ran `knife ssh` to update your node. [knife ssh][knifessh] invokes the command you specify over an SSH connection on a node &ndash; in our case `sudo chef-client`. You didn't have to specify the run-list because you already set that up when you bootstrapped the node.

[COMMENT] Alternatively, you could SSH directly into your server and run `sudo chef-client`. In this lesson, we use `knife ssh` because it enables us to do all of our work from our local workstation.

### Templates work through node objects

To understand how templates work, you should first understand a bit more about nodes. Recall that a _node_ represents a server and is typically a virtual machine or physical server &ndash; basically any compute resource in your infrastructure that's managed by Chef. When you bootstrapped your node, the Chef server created what's called a _node object_ for you. This node object contains a number of attributes that describe the node, and these attributes are saved on the Chef server.

When a recipe runs, a `node` object is loaded into the program. Chef loads the node's attributes from the Chef server into memory. For our home page, we want to display the server's fully qualified domain name (FQDN). To do so, we access the `fqdn` attribute of the `node` object.

[END_BOX]

[START_BOX]

That's it for this tutorial. You can continue to experiment with your virtual machine. When you're done, be sure to [clean up your environment](/manage-a-node/rhel/update-your-nodes-configuration#howtocleanupyourenvironment).

You can also explore [https://manage.chef.io](https://manage.chef.io). See what info's available for your nodes and what else you can do.

In the next tutorial, [Develop your infrastructure code locally](/local-development/rhel/), you'll learn how _local development_ with Test Kitchen can help you iterate faster and correct mistakes earlier in the development process. With local development, you verify your cookbooks on local test instances that resemble production before you apply your work to a bootstrapped node.

[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).

[END_BOX]

[template]: https://docs.chef.io/templates.html
[knifessh]: https://docs.chef.io/knife_ssh.html
