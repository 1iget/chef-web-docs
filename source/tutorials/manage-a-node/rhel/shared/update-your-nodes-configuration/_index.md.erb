[HEADLINE] You ran `knife bootstrap` to associate your node with the Chef server and do an initial checkin. Bootstrapping is a one-time process.<br>The `knife ssh` command enables you to update your node's configuration when your cookbook changes.

During the bootstrap process, your node downloaded and installed `chef-client`, downloaded the latest cookbooks, and executed the run-list.

Chef provides information about your node that you can access from your cookbooks. Here you'll update the  home page to display your node's fully-qualified domain name (FQDN). You'll practice updating your cookbook, uploading it to the Chef server, and seeing the changes appear on your node.

You already [learned how to use the template resource](/tutorials/learn-the-basics/rhel/free/make-your-recipe-more-manageable#step3) to reference the HTML file for your home page. You're ready to add placeholders to your HTML file that are filled in with info about your node as the recipe runs.

[START_BOX]

## 1. Add template code to your HTML

When you bootstrapped your node, the Chef server created what's called a _node object_ for you. This node object contains a number of attributes that describe the node, and these attributes are saved on the Chef server. When a recipe runs, a `node` object is loaded into the program. Chef loads the [node's attributes](https://docs.chef.io/attributes.html) from the Chef server into memory. You can access these attributes from your Chef recipes.

For our home page, we want to display the server's fully qualified domain name (FQDN). To do so, we access the `fqdn` attribute of the `node` object. On the local workstation copy of your `learn_chef_httpd` cookbook, change <code class="file-path">index.html.erb</code> to look like this.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/index-html-erb-node1-centos') %>

The <code>&lt;%= %&gt;</code> syntax enables you to provide placeholders in your template file. Placeholders are replaced with their values when `chef-client` runs. You'll work more with templates in later tutorials, but you can [read more](https://docs.chef.io/templates.html) now in the Chef documentation.

[COMMENT] Keep in mind that this example is for illustrative purposes. In practice, you might modify your web server's configuration file to specify the server's hostname or other info instead of its web page content.

[END_BOX]

[START_BOX]

## 2. Update your cookbook's version metadata

Before you upload an updated cookbook to Chef server, you should always update your cookbook's version metadata to ensure that each version is tied to a specific set of functionality.

Your cookbook's <code class="file-path">metadata.rb</code> file holds the cookbook's version. When you run the<br>`chef generate cookbook` command to create your cookbook, the initial version is set to 0.1.0. Here's what your `learn_chef_httpd` cookbook's <code class="file-path">metadata.rb</code> file looks like.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/metadata-0-1-0-learn_chef_httpd') %>

Most Chef cookbooks follow the [Semantic Versioning](http://semver.org) scheme. Version numbers are typically written as MAJOR.MINOR.PATCH, where:

* MAJOR specifies a change that's incompatible with previous versions.
* MINOR specifies new functionality that's backwards-compatible with previous versions.
* PATCH specifies backwards-compatible bug fixes.

An update to the HTML template represents a minor change in functionality, so let's increment the middle number, making your cookbook's version 0.2.0.

Modify your copy of <% fp 'metadata.rb' %> like this. The `version` field changes to '0.2.0'.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/metadata-0-2-0-learn_chef_httpd') %>

[Learn more about cookbook versioning](https://docs.chef.io/cookbook_versions.html)

[END_BOX]

[START_BOX]

## 3. Upload your cookbook to the Chef server

Now you're ready to upload your cookbook to the Chef server. Run the `knife cookbook upload` command like this.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/upload-0-2-0-learn_chef_httpd', features: [:stdin, :stderr]) %>

[END_BOX]

[START_BOX]

## 4. Run the cookbook on your node

<% if current_page.parent.data.environment == 'virtualbox' %>

Now that your updated cookbook is on the Chef server, you can run `chef-client` on your node. The `chef-client` command pulls from Chef server the latest cookbooks from the node's run-list and applies the run-list to the node.

To run `chef-client` on your node remotely from your workstation, you'll use the [knife ssh](https://docs.chef.io/knife_ssh.html) command. `knife ssh` takes the command to run on the node as an argument. Here, we'll run `sudo chef-client`.

As with `knife bootstrap`, the options you provide to `knife ssh` depend on how you would normally connect to your node over SSH. [The other versions of this tutorial](/tutorials/manage-a-node/rhel/) describe the process more generally. But because your CentOS node is managed by Vagrant and VirtualBox, you connect to it by providing its SSH forwarded port.

Run the following command to run `chef-client` on your node.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/knife-ccr-node1-centos-1') %>

<% else %>

Now that your updated cookbook is on the Chef server, you can run `chef-client` on your node. The `chef-client` command pulls from Chef server the latest cookbooks from the node's run-list and applies the run-list to the node.

To run `chef-client` on your node remotely from your workstation, you'll use the [knife ssh](https://docs.chef.io/knife_ssh.html) command. `knife ssh` takes the command to run on the node as an argument. Here, we'll run `sudo chef-client`.

As with `knife bootstrap`, the options you provide to `knife ssh` depend on how you would normally connect to your node over SSH.

Choose the option that matches how you normally connect to your node over SSH.

* [Update your node using key-based authentication](#updateyournodeusingkeybasedauthentication)
* [Update your node using password authentication](#updateyournodeusingpasswordauthentication)
* [Update a local virtual machine using a forwarded port](#updatealocalvirtualmachineusingaforwardedport)

### Update your node using key-based authentication

Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/learn-chef
$ knife ssh ADDRESS 'sudo chef-client' --manual-list --ssh-user USER --identity-file IDENTITY_FILE
```

Here's an example.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/knife-ccr-node1-centos-1') %>

Here you see that the "hello world" message is replaced with one that includes the node's FQDN. In this example, the node's FQDN is "node1-centos".

### Update your node using password authentication

Replace <code class="placeholder">ADDRESS</code>, <code class="placeholder">USER</code>, and <code class="placeholder">PASSWORD</code> with your values.

```bash
# ~/learn-chef
$ knife ssh ADDRESS 'sudo chef-client' --manual-list --ssh-user USER --ssh-password 'PASSWORD'
```

The output will resemble the output shown for key-based authentication above.

### Update a local virtual machine using a forwarded port

Replace <code class="placeholder">PORT</code> with your SSH forwarded port, for example, 2222, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <code class="file-path">/home/user/.vagrant/machines/default/virtualbox/private_key</code>.

```bash
# ~/learn-chef
$ knife ssh localhost --ssh-port PORT 'sudo chef-client' --manual-list --ssh-user vagrant --identity-file IDENTITY_FILE
```

The output will resemble the output shown for key-based authentication above.

<% end %>

[COMMENT] Remember, in practice it's common to configure Chef to act as a service that runs periodically or as part of a continuous integration or continuous delivery (CI/CD) pipeline. For now, we're updating our server configuration by running `chef-client` manually.

[END_BOX]

[START_BOX]

## 5. Verify the result

As before, run `curl` to verify the configuration. Replace the IP address you see here with yours. You'll see your node's FQDN appear instead of the example shown.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/curl-node1-centos-2') %>

<% if current_page.parent.data.environment != 'virtualbox' %>

You can also open a web browser from your workstation and navigate to your web server.

![The home page with FQDN](manage-a-node/webserver-template-node1-centos.png)

If you bootstrapped a Vagrant instance, one way to verify the configuration is to create an SSH connection to the instance and run `curl localhost`.

```bash
$ vagrant ssh
Last login: Thu Dec  3 19:54:48 2015 from 10.0.2.2
[vagrant@localhost ~]$ curl localhost
<html>
  <body>
    <h1>hello from localhost</h1>
  </body>
</html>
[vagrant@localhost ~]$ exit
logout
Connection to 127.0.0.1 closed.
```

The home page now displays "hello from localhost" instead of "hello world".

<% end %>

<% if current_page.parent.data.environment == 'aws-automate' %>

From the **Nodes** tab in the Chef Automate dashboard, you'll also see that the `chef-client` run succeeded.

![](manage-a-node/chef_automate_nodes_node1_ccr2.png)

<% end %>

[END_BOX]

<% next_page(current_page) do %>

In this part you updated your cookbook, uploaded it to the Chef server, and saw the changes appear on your node.

To update your cookbook you used a _template_. A [template](https://docs.chef.io/templates.html) enables you to write a single, general recipe that’s customized for a particular node as the recipe runs. That means you don’t have to write a custom version of your recipe for every node.

You also ran `knife ssh` to update your node. [knife ssh](https://docs.chef.io/knife_ssh.html) invokes the command you specify over an SSH connection on a node &ndash; in our case `sudo chef-client`. You didn't have to specify the run-list because you already set that up when you bootstrapped the node.

In the next part, you'll make a second modification to your `learn_chef_httpd` cookbook that, although might appear correct, will actually fail on your node. You'll then remedy the failure and verify that `chef-client` succeeds.

<% end %>
