[HEADLINE] You ran `knife bootstrap` to associate your node with the Chef server and do an initial checkin. Bootstrapping is a one-time process.<br>The `knife winrm` command enables you to update your node's configuration when your cookbook changes.

During the bootstrap process, your node downloaded and installed `chef-client`, downloaded the latest cookbooks, and executed the run-list.

Chef provides information about your node that you can access from your cookbooks. Here you'll update the  home page to display your node's fully-qualified domain name (FQDN). You'll practice updating your cookbook, uploading it to the Chef server, and seeing the changes appear on your node.

You already [learned how to use the template resource](/tutorials/learn-the-basics/windows/free/make-your-recipe-more-manageable#step3) to reference the HTML file for your home page. You're ready to add placeholders to your HTML file that are filled in with info about your node as the recipe runs.

[START_BOX]

## 1. Add template code to your HTML

When you bootstrapped your node, the Chef server created what's called a _node object_ for you. This node object contains a number of attributes that describe the node, and these attributes are saved on the Chef server. When a recipe runs, a `node` object is loaded into the program. Chef loads the [node's attributes](https://docs.chef.io/attributes.html) from the Chef server into memory. You can access these attributes from your Chef recipes.

For our home page, we want to display the server's fully qualified domain name (FQDN). To do so, we access the `fqdn` attribute of the `node` object. On the local workstation copy of your `learn_chef_iis` cookbook, change <code class="file-path">Default.htm.erb</code> to look like this.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/index-html-erb-node1-windows') %>

The <code>&lt;%= %&gt;</code> syntax enables you to provide placeholders in your template file. Placeholders are replaced with their values when `chef-client` runs. You'll work more with templates in later tutorials, but you can [read more](https://docs.chef.io/templates.html) now in the Chef documentation.

[COMMENT] Keep in mind that this example is for illustrative purposes. In practice, you might modify your web server's configuration file to specify the server's hostname or other info instead of its web page content.

[END_BOX]

[START_BOX]

## 2. Update your cookbook's version metadata

Before you upload an updated cookbook to Chef server, you should always update your cookbook's version metadata to ensure that each version is tied to a specific set of functionality.

Your cookbook's <code class="file-path">metadata.rb</code> file holds the cookbook's version. When you run the<br>`chef generate cookbook` command to create your cookbook, the initial version is set to 0.1.0. Here's what your `learn_chef_iis` cookbook's <code class="file-path">metadata.rb</code> file looks like.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/metadata-0-1-0-learn_chef_iis') %>

Most Chef cookbooks follow the [Semantic Versioning](http://semver.org) scheme. Version numbers are typically written as MAJOR.MINOR.PATCH, where:

* MAJOR specifies a change that's incompatible with previous versions.
* MINOR specifies new functionality that's backwards-compatible with previous versions.
* PATCH specifies backwards-compatible bug fixes.

An update to the HTML template represents a minor change in functionality, so let's increment the middle number, making your cookbook's version 0.2.0.

Modify your copy of <% fp 'metadata.rb' %> like this. The `version` field changes to '0.2.0'.

<% code_snippet(page: current_page, path: 'add-template-code-to-your-html/metadata-0-2-0-learn_chef_iis') %>

[Learn more about cookbook versioning](https://docs.chef.io/cookbook_versions.html)

[END_BOX]

[START_BOX]

## 3. Upload your cookbook to the Chef server

Now you're ready to upload your cookbook to the Chef server. Run the `knife cookbook upload` command like this.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/upload-0-2-0-learn_chef_iis', features: [:stdin, :stderr]) %>

[END_BOX]

[START_BOX]

## 4. Run the cookbook on your node

Now that your updated cookbook is on the Chef server, you can run `chef-client` on your node. The `chef-client` command pulls from Chef server the latest cookbooks from the node's run-list and applies the run-list to the node.

To run `chef-client` on your node remotely from your workstation, you could create a WinRM or Remote Desktop connection to your node and then run `chef-client`. Another way is to use the [knife winrm](https://docs.chef.io/plugin_knife_windows.html#winrm) command. A benefit to using the `knife winrm` command is that it enables you to run `chef-client` (or any other command) on multiple nodes at the same time.

Recall that the Chef server stores information about your nodes. This information is indexed and is searchable from tools such as `knife`. When you run `knife winrm`, you can either specify your node's IP address or a [search query](https://docs.chef.io/chef_search.html) that specifies which nodes to connect to. Because the search [query syntax](https://docs.chef.io/knife_search.html#query-syntax) supports multiple search patterns and can contain multiple search criteria, you can use `knife winrm` to run `chef-client` on multiple nodes at the same time.

Run the following `knife winrm` command to run your updated cookbook on your node. Replace <% ph 'USER' %> and <% ph 'PASSWORD' %> with your values.

Also replace <code class="placeholder">node1-windows</code> with your node's name if you used a different name to bootstrap your node.

```bash
# ~/learn-chef
$ knife winrm 'name:node1-windows' chef-client --winrm-user USER --winrm-password 'PASSWORD' --attribute ipaddress
```

Here's an example.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/knife-ccr-node1-windows-1') %>

Here you see that your node downloads and applies version 0.2.0 of the `learn_chef_iis` cookbook.

The `'name:node1-windows'` part is the search query. It returns all nodes that have the name "node1-windows". In practice, you would have only one node with a given name. Recall that a search query supports multiple patterns. If you were to specify `'name:node1-*'`, which uses a wildcard pattern, `knife winrm` would run `chef-client` on all nodes whose name begins with "node1-".

The `--attribute` part tells `knife` which node attribute to use when opening a WinRM connection. The default is to use the node's FQDN. For learning purposes, here we specify `ipaddress` to use the node's IP address because your node may not have a resolvable FQDN. In practice, you might omit this argument if your node does have a resolvable FQDN.

[COMMENT] Remember, in practice it's common to configure Chef to act as a service that runs periodically or as part of a continuous integration or continuous delivery (CI/CD) pipeline. For now, we're updating our server configuration by running `chef-client` manually.

[END_BOX]

[START_BOX]

## 5. Verify the result

As before, run `curl` to verify the configuration. Replace the IP address you see here with yours. You'll see that the "hello world" message is replaced with your node's FQDN.

<% command_snippet(page: current_page, path: 'add-template-code-to-your-html/curl-node1-windows-2') %>

<% if current_page.parent.data.environment != 'virtualbox' %>

You can also open a web browser from your workstation and navigate to your web server. Here's an example for a system who's FQDN is "node1-windows".

![The home page with FQDN](manage-a-node/webserver-template-node1-windows.png)

<% end %>

<% if ['aws-automate', 'opsworks'].include?(current_page.parent.data.environment) %>

From the **Nodes** tab in the Chef Automate dashboard, you'll also see that the `chef-client` run succeeded.

![](manage-a-node/chef_automate_nodes_node1_ccr2.png)

<% end %>

[END_BOX]

<% next_page(current_page) do %>

In this part you updated your cookbook, uploaded it to the Chef server, and saw the changes appear on your node.

To update your cookbook you used a _template_. A [template](https://docs.chef.io/templates.html) enables you to write a single, general recipe that’s customized for a particular node as the recipe runs. That means you don’t have to write a custom version of your recipe for every node.

You also ran `knife winrm` to update your node. [knife winrm](https://docs.chef.io/plugin_knife_windows.html#winrm) invokes the command you specify over a WinRM connection on a node &ndash; in our case `chef-client`. You didn't have to specify the run-list because you already set that up when you bootstrapped the node.

In the next part, you'll make a second modification to your `learn_chef_iis` cookbook that, although it might appear correct, will actually fail on your node. You'll then remedy the failure and verify that `chef-client` succeeds.

<% end %>
