Here you'll upload a cookbook to the Chef server.

Most Chef users maintain their cookbooks in a source control repository such as GitHub. However, also maintaining a copy of your cookbooks on the Chef server provides these benefits:

1. A central location for your cookbooks that's accessible from every node in your network.
1. A versioning mechanism that enables you to associate different cookbook versions among your nodes. This enables you to roll out new configuration policies only when you're ready.

The Chef server does not replace source control. Source control is where you and your team develop your cookbooks. Chef server is where you publish your cookbooks when you're ready to run them on your nodes.

[START_BOX]

## 1. Get the learn\_chef\_iis cookbook from GitHub

In [Learn the Chef basics](/tutorials/learn-the-basics/windows/), you wrote a cookbook named `learn_chef_iis` that configures IIS web server. You'll run that cookbook on your new node.

Normally, you write cookbooks on your workstation. In _Learn the Chef basics_, you wrote the `learn_chef_iis` directly on your test server. Instead of having you type in the cookbook again, let's get a copy from GitHub.

First, you need a place to store your cookbooks locally on your workstation. Recall that your `knife` configuration file looks similar to this.

<% code_snippet(page: current_page.previous_page, path: 'generate-knife-config/knife-rb') %>

`cookbook_path` is defined as <% fp '"#{current_dir}/../cookbooks"' %>. The path breaks down like this:

| Partial path              | Meaning                                        | Full path                         |
|---------------------------|------------------------------------------------|-----------------------------------|
| <% fp '#{current_dir}' %> | The location of <% fp 'knife.rb' %>            | <% fp '~/learn-chef/.chef' %>     |
| <% fp '..' %>             | Traverse up one directory                      | <% fp '~/learn-chef' %>           |
| <% fp 'cookbooks' %>      | Traverse to the <% fp 'cookbooks' %> directory | <% fp '~/learn-chef/cookbooks' %> |

[COMMENT] Your `knife` configuration file, like many files in Chef, is built on the Ruby programming language. The `#{current_dir}` syntax, for example, is how you insert variables into strings. The [Chef documentation](https://docs.chef.io/ruby.html#ruby-basics) provides a quick overview of the common Ruby patterns you'll use when you write Chef code.

Start by creating the <code class="file-path">~/learn-chef/cookbooks</code> directory.

<% command_snippet(workstation: 'ubuntu', path: 'manage-a-node/rhel/hosted/upload-a-cookbook/create-cookbooks-directory/mkdir-cookbooks', features: :stdin) %>

Now `cd` there.

<% command_snippet(workstation: 'ubuntu', path: 'manage-a-node/rhel/hosted/upload-a-cookbook/create-cookbooks-directory/cd-cookbooks', features: :stdin) %>

Next, clone the `learn_chef_iis` cookbook from GitHub.

<% command_snippet(page: current_page, path: 'git-clone-cookbook/git-clone-learn_chef_iis', features: [:stdin, :stderr]) %>

The contents of <% fp '~/learn-chef/cookbooks/learn_chef_iis' %> is the same as what you built in the previous tutorial. You can examine this directory to familiarize yourself with its contents.

[COMMENT] [Chef Supermarket](https://supermarket.chef.io/) is also a place for the community to share cookbooks. You'll learn more about community cookbooks in later tutorials.

[END_BOX]

[START_BOX]

## 2. Upload your cookbook to the Chef server

In practice, you would typically run your cookbook on a temporary instance, such as a virtual machine, before you upload it to the Chef server. You might also run a series of quality tests to ensure your cookbook does what you expect. You'll learn about this process in the next tutorial.

For now, upload the `learn_chef_iis` cookbook to your Chef server. Run this command from anywhere under your <code class="file-path">~/learn-chef</code> directory.

<% command_snippet(page: current_page, path: 'upload-0-1-0/knife-cookbook-upload-learn_chef_iis', features: [:stdin, :stderr]) %>

The output shows that the cookbook was successfully uploaded, but you can run the `knife cookbook list` command to verify.

<% command_snippet(page: current_page, path: 'upload-0-1-0/knife-cookbook-list-learn_chef_iis') %>

<% if current_page.parent.data.environment == 'aws-automate' %>

Return to the Chef Automate dashboard and refresh the page. You see that the event is registered with Chef Automate.

![](manage-a-node/chef_automate_nodes_upload_cookbook.png)

**TODO**: ^^ Fix this. It should show 1.

Recall that when you set up your Chef server, you [configured Chef server to send server object data](https://docs.chef.io/setup_visibility_chef_automate.html#configure-chef-server-to-send-server-object-data) to Chef Automate.

```bash
$ echo "data_collector["root_url"] = "https://CHEF_AUTOMATE_FQDN/data-collector/v0/" | sudo tee -a /etc/opscode/chef-server.rb
$ echo "data_collector["token"] = "93a49a4f2482c64126f7b6015e6b0f30284287ee4054ff8807fb63d9cbd1c506" | sudo tee -a /etc/opscode/chef-server.rb
$ sudo chef-server-ctl reconfigure
```

This enables Chef server to send events to Chef Automate, such as when you upload a cookbook to Chef server.

<% end %>

[END_BOX]

<% next_page(current_page) do %>

<% if current_page.parent.data.environment == 'virtualbox' %>
The next step is to bootstrap your node and run the `learn_chef_iis` cookbook on it. In [Learn the Chef basics](/tutorials/learn-the-basics/), you ran `chef-client` in local mode to configure the server directly. Now you'll see how the bootstrap process triggers `chef-client` to run on your node remotely, from your workstation.
<% else %>
The next step is to bring up a Windows Server instance and prepare it for the bootstrap process.
<% end %>

<% end %>
