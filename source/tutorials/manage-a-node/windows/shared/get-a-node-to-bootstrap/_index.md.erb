[HEADLINE] Any computer that's managed by Chef is called a _node_.

Now it's time to bring up a Windows Server 2012 R2 instance and prepare it for the bootstrap process.

[COMMENT] Although Chef supports [multiple versions of Windows Server](https://docs.chef.io/platforms.html#chef-client-title-foundational-platforms), for this tutorial we recommend you use Windows Server 2012 R2. Doing so helps ensure that the output you see matches the sample output that's shown.

In [Learn the Chef basics](/tutorials/learn-the-basics/), you installed the Chef DK on a server and configured it directly. Here you'll set up a Windows Server instance, called a _node_, and prepare your node to be configured by Chef remotely from your workstation.

[START_BOX]

## 1. Get a Windows Server 2012 R2 node to bootstrap

Like before, we suggest that you work in a disposable environment such as a Windows Server 2012 R2 virtual machine or cloud instance.

Ensure that your system:

* provides administrator access.
* has a resolvable IP address.
* can access the Internet.
* provides network access on ports 80 (HTTP), and 443 (HTTPS), 3389 (RDP), and 5985 (WinRM).

[COMMENT] The easiest way to get started is to use a system that can access the Internet over ports 80, 443, 3389, and 5985. If your firewall or network environment doesn't provide this access, [check out this blog post](https://www.chef.io/blog/2014/10/28/working-with-chef-behind-your-firewall/) and [this video](https://youtu.be/iD859HMm9XI?list=PL11cZfNdwNyPo_EEgCGDe9mrUlMtTf361).

If you still have the system that you used in the first tutorial, _Learn the Chef basics_, you can continue to use that system for this tutorial. However, the [free trial virtual machine](/tutorials/learn-the-basics/windows/free/) option that we provide in the first tutorial does not have a public IP address. If you used the free trial VM, you'll need to bring up your own system.

The system requirements for your node are the same as the ones you used in the first tutorial. Use these links if you need a refresher on how to bring up a node in your preferred runtime environment.

* [Amazon Web Services (step 2)](/tutorials/learn-the-basics/windows/aws/set-up-a-machine-to-manage/#step2)
* [Microsoft Azure (step 2)](/tutorials/learn-the-basics/windows/azure/set-up-a-machine-to-manage/#step2)
* [Google Compute Platform (step 2)](/tutorials/learn-the-basics/windows/gcp/set-up-a-machine-to-manage/#step2)
* [Bring your own system (step 1)](/tutorials/learn-the-basics/windows/bring-your-own-system/set-up-a-machine-to-manage/#step1)

[COMMENT] For now, we recommend that you bootstrap your Windows Server node using the network settings that we show. Later, depending on your requirements, [additional options](https://github.com/chef/knife-windows) are available to set up your node for use with Chef, including how to configure your node to use SSL.

[END_BOX]

[START_BOX]

## 2. Gather some details about your machine

[COMMENT] All you need is for your system to be running &ndash; don't connect to it just yet.

Now, gather this information about your machine:

* Its hostname or public IP address.
* A user name that has administrator access and its password.

If you're bootstrapping an instance under Hyper-V, you can run this PowerShell command to get your instance's IP address on your local network. Here's an example.

```ps
$ Get-VM -Name "WindowsServer2012R2" | select -ExpandProperty NetworkAdapters | select IPAddresses
IPAddresses
-----------
{192.168.1.171, fe80::983c:ebdf:3e87:34db}
```

[END_BOX]

[START_BOX]

## 3. Connect to your node

Next, log in to your node so that you can prepare your node for the bootstrap process.

If you're using physical hardware, you can log in to your system directly. If your node is running remotely, such as in the cloud, create an RDP connection. If your node is a local virtual machine, such as a Hyper-V instance, you can connect through your virtualization software.

The following resources can help you connect if your node is running on Amazon Web Services, Microsoft Azure, Google Cloud Platform, or as a Hyper-V instance.

<% accordion('connect-aws', 'Amazon Web Services') do %>

<% markdown do %>

[Connecting to Your Windows Instance Using RDP](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/connecting_to_windows_instance.html)

<% end %>

<% end %>

<% accordion('connect-azure', 'Microsoft Azure') do %>

<% markdown do %>

[How to connect and log on to an Azure virtual machine running Windows](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-connect-logon/)

<% end %>

<% end %>

<% accordion('connect-google', 'Google Cloud Platform') do %>

<% markdown do %>

[Connecting to a Windows Instance](https://cloud.google.com/compute/docs/instances/windows/connecting-to-windows-instance)

<% end %>

<% end %>

<% accordion('connect-hyper-v', 'Hyper-V') do %>

<%= partial 'layouts/partials/hyper-v/connect_vm' %>

<% end %>

[END_BOX]

[START_BOX]

## 4. Configure the firewall to accept remote WinRM connections

In the next part, you'll bootstrap your Windows Server node remotely from your workstation over the WinRM protocol.

By default, the Windows firewall permits inbound traffic on port 5985 (WinRM) only from systems in the same local domain. Let's make sure that the firewall is configured to accept inbound connections from any remote address.

Run this command to change the default rule to enable inbound traffic from any remote address.

```ps
$ Get-NetFirewallPortFilter | ?{$_.LocalPort -eq 5985 } | Get-NetFirewallRule | ?{ $_.Direction –eq "Inbound" -and $_.Profile -eq "Public" -and $_.Action –eq "Allow"} | Set-NetFirewallRule -RemoteAddress "Any"
```

In practice, your firewall settings depend on your environment. For example, if each node in your network is joined to the same domain, you might use the default firewall settings.

[END_BOX]

[START_BOX]

## 5. Verify the configuration

From your workstation, you can verify that your Windows Server node can receive network traffic on port 5985 and through the firewall. You don't have to do this every time you bootstrap a node, but verifying that your node is connectable will help ensure that the bootstrap process succeeds.

To verify the connection, you can use the `knife wsman test` command. This command provides functionality that's similar to PowerShell's
[Test-WSMan](https://technet.microsoft.com/en-us/library/hh849873.aspx) cmdlet, but is available from any operating system that can run Chef DK, including Windows, Mac OS, and Linux.

From the <% fp '~/learn-chef' %> directory on your workstation, run the following command, replacing <% ph 'HOSTNAME' %> with your node's hostname or IP address.

```bash
# ~/learn-chef
$ knife wsman test HOSTNAME --manual-list
```

Here's an example:

```bash
# ~/learn-chef
$ knife wsman test 52.201.225.210 --manual-list
Connected successfully to 52.201.225.210 at http://52.201.225.210:5985/wsman.
```

[END_BOX]

<% if current_page.parent.data.environment == 'aws-automate' %>

[START_BOX]

## 6. Configure data collection

Earlier, you configured Chef server [to send data](/tutorials/manage-a-node/windows/automate/set-up-your-chef-server#step8) to Chef Automate. Now you'll repeat a simlar process to enable your node to send data. The details of a `chef-client` run is one example of data that nodes can send.

To configure your node to send data, you need:

1. the Chef Automate server's SSL certificate.
1. a configuration file that specifies how to authenticate with Chef Automate, similar to the one you [created for your Chef server](/tutorials/manage-a-node/ubuntu/automate/set-up-your-chef-server#step8).

### Upload the Chef Automate server's SSL certificate

On Windows nodes, trusted Chef SSL certificates go in the <% fp 'C:\chef\trusted_certs' %> directory. From a PowerShell window on your Windows Server node, create that directory now.

```ps
$ New-Item C:\chef\trusted_certs -ItemType Directory -Force
```

Earlier, you [downloaded your Chef Automate server's SSL certificate](/tutorials/manage-a-node/windows/automate/set-up-your-chef-server#step7) to your workstation. For a Linux node, you might run `scp` to upload the certificate to your node.

For Windows nodes, you can write a small Ruby program to upload the SSL certificate from your workstation. Chef is built on Ruby, and the Chef DK provides you with the full Ruby programming language. You can run this program from any workstation &ndash; whether it's Linux, Mac OS, or Windows.

Add the following to a file named <% fp 'upload-cert.rb' %> in a temporary directory on your workstation (either <% fp '/tmp' %> or <% fp 'C:\Temp' %>).

```ruby
# /tmp/upload-cert.rb
require 'winrm'
require 'winrm-fs'

opts = {
  endpoint: 'http://NODE_IP_ADDRESS:5985/wsman',
  user: 'USERNAME',
  password: 'PASSWORD'
}
connection = WinRM::Connection.new(opts)
file_manager = WinRM::FS::FileManager.new(connection)
file_manager.upload('/tmp/CHEF_AUTOMATE_FQDN.crt', 'C:/chef/trusted_certs/CHEF_AUTOMATE_FQDN.crt')
```

Next, replace:

* <% ph 'NODE_IP_ADDRESS' %> with your node's IP address.
* <% ph 'USERNAME' %> and <% ph 'PASSWORD' %> with the username and password you use to connect to your Windows node.
* <% ph 'CHEF_AUTOMATE_FQDN' %> with your Chef Automate server's FQDN.
* <% ph '/tmp/' %> with the directory name you used to [download your Chef Automate server's SSL certificate](/tutorials/manage-a-node/windows/automate/set-up-your-chef-server#step7) to your workstation.

Here's a complete example of what this file might look like.

<% code_snippet(path: 'manage-a-node/rhel/aws-automate/get-a-node-to-bootstrap/copy-server-certificate/upload-cert-rb') %>

Next, run the program like this.

<% command_snippet(workstation: 'ubuntu', path: 'manage-a-node/rhel/aws-automate/get-a-node-to-bootstrap/copy-server-certificate/upload-automate-certificate-to-node1-windows', features: :stdin) %>

As an optional step, you can verify that the SSL certificate exists in the <% fp 'C:\chef\trusted_certs' %> directory on your Windows node.

[COMMENT] This Ruby program is for learning purposes. In a more production-like environment, you would use your established process to copy the SSL certificate to your node.

### Create the data collection configuration file

To [configure your node to send data](https://docs.chef.io/setup_visibility_chef_automate.html#configure-nodes) to Chef Automate, you can modify your Chef configuration file (typically located at <% fp 'C:\chef\client.rb' %>) or add an additional configuration file to the <% fp 'C:\chef\client.d' %> directory.

Because Chef is not yet installed on your node, the configuration file <% fp 'C:\chef\client.rb' %> does not yet exist, so here you'll use the second option.

Start by creating the <% fp 'C:\chef\client.d' %> directory on your node.

```ps
$ New-Item C:\chef\client.d -ItemType Directory -Force
```

Next, add this to a file named <% fp 'C:\chef\client.d\data_collector.rb' %> on your node. Replace <% ph 'CHEF_AUTOMATE_FQDN' %> with your Chef Automate server's FQDN.

```ruby
# C:\chef\client.d\data_collector.rb
data_collector.server_url "https://CHEF_AUTOMATE_FQDN/data-collector/v0/"
data_collector.token "93a49a4f2482c64126f7b6015e6b0f30284287ee4054ff8807fb63d9cbd1c506"
```

For example:

```ruby
data_collector.server_url "https://ec2-52-23-164-34.compute-1.amazonaws.com/data-collector/v0/"
data_collector.token "93a49a4f2482c64126f7b6015e6b0f30284287ee4054ff8807fb63d9cbd1c506"
```

As with your Chef server, you can use the token value shown here for learning purposes. In a more production-like envirionment, you can [create your own token](https://docs.chef.io/setup_visibility_chef_automate.html#understand-and-optionally-create-data-collector-tokens).

Your node is now ready to send data to Chef Automate.

[END_BOX]

<% end %>

<% next_page(current_page) do %>

In this part, you brought up a node that you'll configure using Chef. You also created a test connection to your node and verified the firewall enables remote WinRM connections.

The next step is to bootstrap your node and run the `learn_chef_iis` cookbook on it. In [Learn the Chef basics](/tutorials/learn-the-basics/), you ran `chef-client` in local mode to configure the server directly. Now you'll see how the bootstrap process triggers `chef-client` to run on your node remotely, from your workstation.

<% end %>
