Previously, you bootstrapped your node to your Chef server to apply a basic web server configuration. Later, you updated your configuration policy by modifying the contents of the home page to show the node's FQDN.

In this part, you'll make a second modification to your `learn_chef_iis` cookbook that, although it might appear correct, will actually fail on your node. You'll then remedy the failure and verify that `chef-client` succeeds.

You'll practice the process of updating your cookbook, bumping its version metadata, and applying your update to your node. You'll also gain insight into how to resolve failures when something goes wrong.

[COMMENT] Just remember that this exercise is for learning purposes. You typically don't test configuration changes on a bootstrapped node. The recommended workflow involves first [verifying your changes locally on test instances](/tutorials/local-development/windows/) and then [submitting your change to an automated pipeline](/automate/), such as Chef Automate. You'll learn more about Chef's test-driven, team-based workflow in future tutorials.

[START_BOX]

## 1. Assign read access to the IIS_IUSRS group

By default, IIS provides access to web content to the `IIS_IUSRS` group. But let's modify our Chef recipe to ensure that this group has read rights to the <% fp 'c:\inetpub\wwwroot' %> directory.

Recall that your default recipe looks like this.

<% code_snippet(page: current_page, path: 'set-web-content-owner/initial-default-recipe-learn_chef_iis') %>

To assign read rights to the `IIS_IUSRS` group, you use the [directory resource's](https://docs.chef.io/resource_directory.html) `rights` property.

Modify your default recipe like this. You may notice this recipe has a mistake, but go ahead and copy the recipe exactly as you see it.

<% code_snippet(page: current_page, path: 'set-web-content-owner/add-web-user-err-learn_chef_iis') %>

The `directory` resource also specifies the `:create` action, which ensures that the <% fp 'c:\inetpub\wwwroot' %> directory is created if it does not exist.

[END_BOX]

[START_BOX]

## 2. Apply the changes to your node

Next you'll repeat the steps you performed in the previous part to apply your updated configuration on your node.

1. Update the cookbook's version metadata.
1. Upload the cookbook to Chef server.
1. Run `chef-client` on your node.

First, modify <% fp 'metadata.rb' %> by setting the `version` field to '0.3.0'.

<% code_snippet(page: current_page, path: 'set-web-content-owner/metadata-0-3-0-learn_chef_iis') %>

Next, run this `knife cookbook upload` command to upload your cookbook to the Chef server.

<% command_snippet(page: current_page, path: 'set-web-content-owner/upload-0-3-0-learn_chef_iis', features: [:stdin, :stderr]) %>

Finally, run `knife winrm` to trigger `chef-client` to run on your node. Here's an example.

<% command_snippet(page: current_page, path: 'set-web-content-owner/knife-ccr-node1-windows-2') %>

You see that the `chef-client` run failed! Here's the error.

```bash
# ~/learn-chef
Chef::Exceptions::Win32APIError
-------------------------------
No mapping between account names and security IDs was done.
```

As you may have already realized, the updated configuration attempts to assign read permissions to the `IIS_USRS` group, instead of the `IIS_IUSRS` group (note the missing `I`).

<% if ['aws-automate', 'opsworks'].include?(current_page.parent.data.environment) %>

You can verify the failure from the **Nodes** tab in the Chef Automate dashboard.

![](manage-a-node/chef_automate_nodes_node1_failure.png)

Click on the node to view details about the failure.

![](manage-a-node/chef_automate_nodes_failure_node1_windows_details1.png)

At the bottom of the page, you see that the `template` resource failed. Click **error log** to view details about the error.

![](manage-a-node/chef_automate_nodes_failure_node1_windows_details2.png)

The run log displays details about the error as well as the backtrace, which lists which function calls are active and can help you understand how your program got where it is.

![](manage-a-node/chef_automate_nodes_failure_node1_windows_details_runlog.png)

In this tutorial, you use the `knife winrm` command from your workstation to remotely trigger `chef-client` to run on your node. This is a manual process. When `chef-client` fails, you see the failure immediately in your terminal window.

However, imagine that you have dozens, hundreds, or even thousands of servers that run `chef-client` periodically as a service or as part of a continuous integration or continuous delivery (CI/CD) pipeline.  Chef Automate enables you to quickly scan the status of your nodes and investigate the root cause when a `chef-client` run fails.

<% end %>


[END_BOX]

[START_BOX]

## 3. Resolve the failure

Now you'll perform these steps to resolve the failure. Steps 2&mdash;4 should be famililar to you.

1. Specify the correct group name &ndash; `IIS_IUSRS`.
1. Update the cookbook's version metadata.
1. Upload the cookbook to Chef server.
1. Run `chef-client` on your node.

First, modify your default recipe to use the correct account name (`IIS_USRS` becomes `IIS_IUSRS`.)

<% code_snippet(page: current_page, path: 'set-web-content-owner/add-web-user-fix-learn_chef_iis') %>

Next, increment your cookbook's version metadata. Because you're making a bug fix, increment the last part of the version, making the version '0.3.1'.

<% code_snippet(page: current_page, path: 'set-web-content-owner/metadata-0-3-1-learn_chef_iis') %>

Next, upload your cookbook to the Chef server.

<% command_snippet(page: current_page, path: 'set-web-content-owner/upload-0-3-1-learn_chef_iis', features: [:stdin, :stderr]) %>

Now run `chef-client` like you did previously. Here's an example.

<% command_snippet(page: current_page, path: 'set-web-content-owner/knife-ccr-node1-windows-3') %>

You see that the `chef-client` run succeeds.

Verify the configuration by running `curl`<% if current_page.parent.data.environment != 'virtualbox' %> or by refreshing your web browser<% end %>.

<% command_snippet(page: current_page, path: 'set-web-content-owner/curl-node1-windows-3', features: [:stdin, :stdout]) %>

<% if ['aws-automate', 'opsworks'].include?(current_page.parent.data.environment) %>

From the **Nodes** tab in the Chef Automate dashboard, you'll also see that the `chef-client` run succeeded and that your node's status returned to successful.

![](manage-a-node/chef_automate_nodes_node1_ccr2.png)

If you examine the details of the `chef-client` run, you'll see that the `directory` resource now succeeds.

![](manage-a-node/chef_automate_nodes_node1_windows_details_directory.png)

<% end %>

Great work! In practice, you'll want to run your cookbook on a test instance before you upload your work to the Chef server. That way, you'll catch errors like the one you saw here earlier in the process. You learn more about local development in the next tutorial.

Even when you develop your code locally, errors do occur in production. In this part, you were able to quickly fix the error and validate the configuration.

[END_BOX]

<% next_page(current_page) do %>

Next, you'll use the `chef-client` cookbook from Chef Supermarket to set up your node to run `chef-client` periodically.

<% end %>
