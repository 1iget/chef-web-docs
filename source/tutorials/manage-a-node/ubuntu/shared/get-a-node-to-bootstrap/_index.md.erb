[HEADLINE] Any computer that's managed by Chef is called a _node_.

Now it's time to bring up an Ubuntu 14.04 instance and prepare it for the bootstrap process.

[COMMENT] Although Chef supports [multiple versions of Ubuntu](https://docs.chef.io/platforms.html#chef-client-title-foundational-platforms), for this tutorial we recommend you use Ubuntu 14.04. Doing so helps ensure that the output you see matches the sample output that's shown.

In [Learn the Chef basics](/tutorials/learn-the-basics/), you installed the Chef DK on a server and configured it directly. Here you'll set up an Ubuntu server, called a _node_, and prepare your node to be configured by Chef remotely from your workstation.

[START_BOX]

## 1. Get an Ubuntu 14.04 node to bootstrap

Like before, we suggest that you work in a disposable environment such as an Ubuntu 14.04 virtual machine or cloud instance.

Ensure that your system:

* provides `root` or `sudo` access.
* has a resolvable IP address.
* can access the Internet.
* provides network access on ports 22 (SSH), 80 (HTTP), and 443 (HTTPS).

[COMMENT] The easiest way to get started is to use a system that can access the Internet over ports 22, 80 and 443. If your firewall or network environment doesn't provide this access, [check out this blog post](https://www.chef.io/blog/2014/10/28/working-with-chef-behind-your-firewall/) and [this video](https://youtu.be/iD859HMm9XI?list=PL11cZfNdwNyPo_EEgCGDe9mrUlMtTf361).

If you still have the system that you used in the first tutorial, _Learn the Chef basics_, you can continue to use that system for this tutorial. However, the [free trial virtual machine](/tutorials/learn-the-basics/ubuntu/free/) option that we provide in the first tutorial does not have a public IP address. If you used the free trial VM, you'll need to bring up your own system.

The system requirements for your node are the same as the ones you used in the first tutorial. Use these links if you need a refresher on how to bring up a node in your preferred runtime environment.

* [Amazon Web Services (step 2)](/tutorials/learn-the-basics/ubuntu/aws/set-up-a-machine-to-manage/#step2)
* [Microsoft Azure (step 2)](/tutorials/learn-the-basics/ubuntu/azure/set-up-a-machine-to-manage/#step2)
* [Google Compute Platform (step 2)](/tutorials/learn-the-basics/ubuntu/gcp/set-up-a-machine-to-manage/#step2)
* [Vagrant and VirtualBox (step 5)](/tutorials/learn-the-basics/ubuntu/virtualbox/set-up-a-machine-to-manage/#step5)
* [Bring your own system (step 1)](/tutorials/learn-the-basics/ubuntu/bring-your-own-system/set-up-a-machine-to-manage/#step1)

[END_BOX]

[START_BOX]

## 2. Gather some details about your machine

[COMMENT] All you need is for your virtual machine to be running &ndash; don't connect to it just yet.

Now, gather this information about your machine:

* Its hostname or public IP address.
* A user name that has root or `sudo` access and its password. If you use key-based authentication to connect to your instance, note the location of your private key file.

<% markdown do %>

If you're bootstrapping a local virtual machine, such as a Vagrant instance, you'll also need to know which [forwarded port](https://docs.vagrantup.com/v2/networking/forwarded_ports.html) Vagrant chose for routing SSH traffic. Forwarded ports enable the host (your workstation) to receive and forward network traffic to the guest (the virtual machine.)

If you're using virtualization software other than Vagrant and VirtualBox, check the documentation for that software to learn how to get the SSH connection details to the virtual machine, including the SSH forwarded port. Here's how to get the connection details for Vagrant.

<% accordion('vagrant-details', "Show details") do %>

<%= partial 'layouts/partials/vagrant_ssh_config_ubuntu' %>

<% end %>

<% end %>

[END_BOX]

[START_BOX]

## 3. Create a test SSH connection to your node

The bootstrap process connects to your node over SSH. Now that you have the connection details, let's create a test SSH connection to your node.

You don't have to do this every time you bootstrap a node, but verifying that your node is connectable will help ensure that the bootstrap process succeeds.

Here are examples for the various ways you can connect.

### Connect using key-based authentication

```bash
$ ssh -i ~/.ssh/my.pem root@40.76.28.32
The authenticity of host '40.76.28.32 (40.76.28.32)' can't be established.
RSA key fingerprint is SHA256:YiT1n9QZ64GnXcCeRpYMOLxpJZ9IjCft1Fpf5tvAFuQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '40.76.28.32' (RSA) to the list of known hosts.
```

### Connect using a username and password

```bash
$ ssh root@40.76.28.32
The authenticity of host '40.76.28.32 (40.76.28.32)' can't be established.
RSA key fingerprint is SHA256:YiT1n9QZ64GnXcCeRpYMOLxpJZ9IjCft1Fpf5tvAFuQ.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '40.76.28.32' (RSA) to the list of known hosts.
root@40.76.28.32's password:
```

### Connect to a local virtual machine using a forwarded port

Here's an example for Vagrant. The `-l` option specifies the username `vagrant`. The `-p` option specifies the port on the host (2222) that will forward to port 22 on the guest.

```bash
$ ssh -i /home/user/.vagrant/machines/default/virtualbox/private_key -l vagrant -p 2222 localhost
The authenticity of host '[localhost]:2222 ([127.0.0.1]:2222)' can't be established.
RSA key fingerprint is c4:4d:f9:05:09:31:33:05:cd:99:52:5b:fc:e0:10:b5.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[localhost]:2222' (RSA) to the list of known hosts.
Last login: Thu Dec  3 15:32:08 2015 from 10.0.2.2
```

[END_BOX]

[START_BOX]

## 4. Close your SSH session

Now close the SSH connection to your Ubuntu node.

```bash
[root@40.76.28.32 ~]$ exit
logout
Connection to 40.76.28.32 closed.
```

[END_BOX]

<% next_page(current_page) do %>

In this part, you brought up a node that you'll configure using Chef.

You also created a test connection to your node over SSH. But once you get the hang of things, you'll see that the bootstrap process enables you to configure your servers without the need to connect to them directly. This enables you to further automate the process of provisioning and configuring your infrastructure.

The next step is to bootstrap your node and run the `learn_chef_apache2` cookbook on it. In [Learn the Chef basics](/tutorials/learn-the-basics/), you ran `chef-client` in local mode to configure the server directly. Now you'll see how the bootstrap process triggers `chef-client` to run on your node remotely, from your workstation.

<% end %>
