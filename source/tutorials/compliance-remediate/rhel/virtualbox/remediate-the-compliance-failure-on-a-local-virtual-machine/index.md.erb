---
title: 'Remediate the compliance failure on a local virtual machine'
order: 2
keywords: TODO
layout: tutorials/platforms/environments/overview/lesson/layout
sections: []
time_to_complete: 60 minutes
snippet_path: compliance_scanner/rhel/virtualbox/remediate-the-compliance-failure-locally
snippet_workstation: ubuntu
headings: [
  { label: '1. Understand the failure', href: '#step1' },
  { label: '2. Login through the CLI', href: '#step2' },
  { label: '3. Create the ssh cookbook', href: '#step3' },
  { label: '4. Apply the cookbook locally', href: '#step4' },
  { label: '5. Replicate the failure locally', href: '#step5' },
  { label: '6. Remediate the failure', href: '#step6' }
]
---
Recall that in the previous tutorial you ran the **cis-centos7-level1** compliance profile and that it failed the **Set SSH Protocol to 2** rule.

![](compliance/scan_report_issues_sshv2_centos7.png)

The failure tells us that the node potentially enables [SSH version 1 connections](https://en.wikipedia.org/wiki/Secure_Shell#SSH-1). CIS recommends that you disable access through SSH-1 because it has design flaws that make it vulnerable.

In this part, you'll verify the failure of the **Set SSH Protocol to 2** rule on a local virtual machine and remediate it. By starting with local development, you can verify configuration changes on temporary test instances before you apply the updated configuration to your production servers.

You can configure Test Kitchen to download and run compliance profiles on your test instances. For example, you can pull compliance profiles from [Chef Supermarket](https://docs.chef.io/supermarket.html), a Git repository, or from your Chef compliance scanner. Here, you'll configure Test Kitchen to download the **cis-centos7-level1** profile from your Chef compliance scanner.

[START_BOX]

## 1. Understand the compliance failure

Let's take a closer look at what the **Set SSH Protocol to 2** rule checks for.

From the **Compliance** menu in the Chef compliance scanner web interface, select the **CIS CentOS Linux 7 Benchmark Level 1** profile. Then scroll to the **Set SSH Protocol to 2** rule. You'll see this:

![](compliance/ssh_protocol_2_rule.png)

The code you see is [InSpec](http://inspec.io), an auditing and testing framework that's built on the Ruby programming language. If you're familiar with testing frameworks such as [RSpec](http://rspec.info) and [Serverspec](http://serverspec.org), InSpec code will look familiar to you.

InSpec provides [built-in resource types](http://inspec.io/docs/reference/resources/) that describe the various parts of a system, such as files, users, and services. In this example, you see the [file](http://inspec.io/docs/reference/resources/file) resource used 2 times.

The first `file` resource uses a regular expression to verify whether the SSH configuration file, <% fp '/etc/ssh/sshd_conf' %>, contains at least one occurence of the `Protocol` setting. The regular expression does not match any settings that begin with a comment `#`.

The second `file` resource uses the same regular expression, but uses the [capture group](http://www.regular-expressions.info/refcapture.html) `(\S+)` to verify that each occurence of the `Protocol` setting specifies 2 as its value.

[COMMENT] [Learn more about regular expressions in Ruby](http://www.tutorialspoint.com/ruby/ruby_regular_expressions.htm). Then see the regular expression in action. Go to [rubular.com](http://rubular.com) and enter the regular expression `^\s*Protocol\s+(\S+)\s*(?:#.*)?$`. Then test it against a few strings and note the behavior. Some strings you might test against are `Protocol 2,1`, `# Protocol 2`, and `Protocol 2 # only 2`.

When you scanned your CentOS node, you saw that the first `file` resource failed.

![](compliance/scan_report_issues_sshv2_centos7.png)

This means that the `Protocol` setting is not provided. The recommendation is to explicitly set the `Protocol` to version 2 only.

Let's connect to your node and compare the contents of <% fp '/etc/ssh/sshd_conf' %> to the rule.

You can connect using the private key you created in the previous tutorial. Here's an example.

```bash
$ ssh -i ~/.ssh/node1 root@10.1.1.35
Last login: Fri Apr 15 13:11:09 2016 from 192.168.77.1
```

Now search <% fp '/etc/ssh/sshd_config' %> for the string "Protocol". This example also prints the 3 lines that precede and follow any matches.

```bash
[root@node-1 ~]$ cat /etc/ssh/sshd_config | grep Protocol -B 3 -A 3
#   IdentityFile ~/.ssh/id_rsa
#   IdentityFile ~/.ssh/id_dsa
#   Port 22
#   Protocol 2,1
#   Cipher 3des
#   Ciphers aes128-ctr,aes192-ctr,aes256-ctr,arcfour256,arcfour128,aes128-cbc,3des-cbc
#   MACs hmac-md5,hmac-sha1,umac-64@openssh.com,hmac-ripemd160
```

Your output may differ, but in this example the line `#   Protocol 2,1` appears in the file. However, the line begins with a comment `#` character. Recall that the regular expression does not match commented settings.

Now that you better understand why the rule failed, you can begin to write Chef code to remediate the failure.

[END_BOX]

[START_BOX]

## 2. Login to the Chef compliance scanner through the InSpec CLI

Later in this part, you'll scan a test instance against the CIS profile through Test Kitchen. Test Kitchen uses the [kitchen-inspec](http://inspec.io/docs/reference/plugin_kitchen_inspec.html/) plugin to run InSpec tests. `kitchen-inspec` comes with the Chef DK.

To download compliance profiles from your Chef compliance scanner, `kitchen-inspec` requires login credentials.

To do so, you run the `inspec compliance login` command. The [inspec](http://inspec.io/docs/reference/cli/) command-line interface (CLI) utility comes with the Chef DK.

To login from the CLI, you first need an authorization token. To get that, select **About** from the menu located at the upper-right corner in the web interface.

![](compliance/webui_about.png)

Then copy the contents of the **Refresh token** field to the clipboard.

![](compliance/webui_token.png)

Next, run this command to connect InSpec to your Chef compliance scanner. Replace <% ph 'FQDN' %> with your Chef compliance scanner's FQDN, <% ph 'USER' %> with the username you use to login to the Chef compliance scanner web interface, and <% ph 'TOKEN' %> with your authorization token.

```bash
# ~/learn-chef
$ inspec compliance login https://FQDN --user USER --insecure --refresh_token 'TOKEN'
```

Here's an example:

<% command_snippet(page: current_page, path: 'login-to-compliance-scanner/inspec-compliance-login') %>

[COMMENT] The `--insecure` flag bypasses SSL verification because Chef compliance scanner comes with a self-signed certificate. In a production environment, you can [configure an SSL certificate](https://docs.chef.io/install_compliance.html#configure-ssl) that's rooted by a trusted certificate authority (CA) and omit the `--insecure` flag.

As a verification step, you can run `inspec compliance profiles` to prove that you've successfully authenticated. This command lists all available compliance profiles from your Chef compliance scanner.

<% command_snippet(page: current_page, path: 'login-to-compliance-scanner/inspec-compliance-profiles') %>

[END_BOX]

[START_BOX]

## 3. Create the ssh cookbook

To remediate the failure, you'll write a Chef cookbook named `ssh`. Recall that a cookbook provides structure to your Chef code. A cookbook contains recipes, which in turn contain resources that descibe the desired state of the system.

In this part, you create the `ssh` cookbook. Although initially empty, in the next step you apply the cookbook to a CentOS 7 instance using Test Kitchen to verify that the instance comes up and successfully runs `chef-client`.

To get started, first move to the <% fp('~/learn-chef') %> directory.

<% command_snippet(page: current_page, path: 'create-the-ssh-cookbook/cd-learn-chef-1', features: :stdin) %>

Ensure that you have a directory named <% fp('~/learn-chef/cookbooks') %>.

<% command_snippet(page: current_page, path: 'create-the-ssh-cookbook/mkdir-learn-chef-cookbooks', features: :stdin) %>

Run the following `chef generate cookbook` command to create the `ssh` cookbook.

<% command_snippet(page: current_page, path: 'create-the-ssh-cookbook/chef-generate-cookbook') %>

[END_BOX]

[START_BOX]

## 4. Apply the ssh cookbook on a Test Kitchen instance

Now you'll verify that the empty cookbook runs successfully on a CentOS 7 test instance. Replace the contents of your copy of <% fp('~/learn-chef/cookbooks/ssh/.kitchen.yml') %> with this.

<% code_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-1-yml') %>

This configuration uses the Vagrant driver and brings up a CentOS 7.2 instance. The `verifier` section tells Test Kitchen to look for InSpec tests. More on that later.

[COMMENT] In this tutorial, you use Vagrant and VirtualBox to work with a standard CentOS 7 virtual machine. In practice, you might use a different [Test Kitchen driver](https://docs.chef.io/kitchen.html#drivers) to bring up your instance using your preferred virtualization or cloud provider. For instance, you might use the `kitchen-ec2` driver to bring up a custom, preconfigured AMI in Amazon EC2.

Next, from your terminal, move to the <% fp('~/learn-chef/cookbooks/ssh') %> directory.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/cd-learn-chef-cookbooks-ssh-1', features: :stdin) %>

Run `kitchen list`. You'll see that the instance is not yet created.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-list-1') %>

Now run `kitchen converge`. This command downloads the base CentOS 7.2 box if needed, brings up an instance, installs `chef-client`, and applies the `ssh` cookbook.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-converge-1') %>

As expected, 0 resources were applied because the cookbook is empty. But it's a great first step to verifying that the instance comes up and `chef-client` runs successfully.

[END_BOX]

[START_BOX]

## 5. Replicate the failure on your Test Kitchen instance

In the previous tutorial, you saw the SSH-2 rule fail on your node. It's a good idea to verify that the rule also fails on your Test Kitchen instance before you write remediation code.

Recall that the InSpec code for the rule looks like this. This rule comes from the **cis/cis-centos7-level1** profile.

![](compliance/ssh_protocol_2_rule.png)

Also recall that your <% fp '.kitchen.yml' %> file looks like this.

<% code_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-2-yml') %>

The `inspec_tests` part tells Test Kitchen to download and run the **cis/cis-centos7-level1** profile from Chef compliance scanner when it runs tests. You specified your Chef compliance scanner when you ran `inspec compliance login` earlier.

You're now ready to scan your test instance. Run `kitchen verify` to run the compliance profile.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-verify', features: :stdin) %>

For brevity, we've omitted the sample output. When you scanned your node from the web interface, you likely noticed that many tests fail the CIS recommendations. You see a similar number of failures when you run the same tests against your test instance.

For now, we're only interested in seeing the **Set SSH Protocol to 2** rule fail. We're working to make it easier to pinpoint specific failures in the output. For now, run `kitchen verify` a second time and redirect the output to a text file, like this.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-verify-redirect-1', features: :stdin) %>

You can locate the status of a test by searching for its name. Here's how to locate the status of the **Set SSH Protocol to 2** rule.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/grep-rule-1') %>

Alternatively, you can search for the rule name from a text editor.

You see that the error appears in the output. You can investigate the output further for more details.

Now that you've replicated the failure on a test instance, you can write Chef code to remediate it.

[END_BOX]

[START_BOX]

## 6. Remediate the failure

In practice, you and your team would decide the appropriate way to fix the error. For example, you might use the [file](https://docs.chef.io/resource_file.html), [cookbook_file](https://docs.chef.io/resource_cookbook_file.html), or [template](https://docs.chef.io/resource_template.html) Chef resource in the `ssh` cookbook to provide a complete replacement to <% fp '/etc/ssh/sshd_config' %>.

For learning purposes, you'll use the `cookbook_file` resource to provide an SSH configuration file that contains only the `Protocol` setting.

The first step is to add a file to your cookbook that contains the configuration settings. Start by moving to the <% fp '~/learn-chef' %> directory.

<% command_snippet(page: current_page, path: 'remediate-the-failure/cd-learn-chef-2', features: :stdin) %>

Run this command to add a file named <% fp 'ssh_config' %> to your cookbook.

<% command_snippet(page: current_page, path: 'remediate-the-failure/chef-generate-file') %>

Now write the contents of your configuration file, <% fp '~/learn-chef/cookbooks/ssh/files/default/sshd_config' %>. The new configuration file includes only the `Protocol` setting and uses the recommended value of 2.

<% code_snippet(page: current_page, path: 'remediate-the-failure/sshd_config') %>

Now write your default recipe, <% fp '~/learn-chef/cookbooks/ssh/recipes/default.rb' %>. The default recipe uses the `cookbook_file` resource to copy the contents of the <% fp 'sshd_config' %> file in your cookbook to <% fp '/etc/ssh/sshd_config' %> on your test instance.

<% code_snippet(page: current_page, path: 'remediate-the-failure/default-rb') %>

Next, move back to your cookbook's directory.

<% command_snippet(page: current_page, path: 'remediate-the-failure/cd-learn-chef-cookbooks-ssh-2', features: :stdin) %>

Run `kitchen converge` to apply the configuration.

<% command_snippet(page: current_page, path: 'remediate-the-failure/kitchen-converge-2') %>

You see from the output that the contents of <% fp '/etc/ssh/sshd_config' %> were changed.

Now run `kitchen verify` to run the compliance profile a second time.

<% command_snippet(page: current_page, path: 'apply-the-ssh-cookbook/kitchen-verify-redirect-1', features: :stdin) %>

Repeat the step where you search <% fp 'verify.txt' %> for the profile named "Set SSH Protocol to 2".

<% command_snippet(page: current_page, path: 'remediate-the-failure/grep-rule-2') %>

Success! The output no longer contains the failure. This gives you confidence that the SSH-2 rule would pass after this cookbook is applied to your node.

If the test were to fail, you would examine the failure, modify your cookbook to try something else, and then run `kitchen converge` to apply the change followed by `kitchen verify` to run your compliance scan.

[COMMENT] Test Kitchen instances are meant to be disposable. If you place your test instance in an unrepairable state or want to start over, run `kitchen destroy` to destroy your instance followed by `kitchen converge` to bring up a new one. The copy of your cookbook on your workstation is unaffected.

As a final verification step, you can login to your test instance and verify that the SSH configuration file contains the expected protocol setting.

```bash
# ~/learn-chef/cookbooks/ssh
$ kitchen login
Last login: Wed May 11 15:22:47 2016 from 10.0.2.2
[vagrant@default-centos-72 ~]$ cat /etc/ssh/sshd_config
Protocol 2
[vagrant@default-centos-72 ~]$ logout
Connection to 127.0.0.1 closed.
```

When you're finished, run `kitchen destroy` to tear down your test instance.

<% command_snippet(page: current_page, path: 'remediate-the-failure/kitchen-destroy') %>

[END_BOX]

<% next_page(current_page) do %>

Now that you've verified the remediation on a test instance, you'll upload your `ssh` cookbook to your Chef server and apply the configuration to your CentOS node. After that, you'll rerun the compliance scan on your node to verify the fix.

<% end %>
