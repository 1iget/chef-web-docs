[HEADLINE] A Chef _resource_ describes one part of the system, such as a file, a template, or a package. A Chef _recipe_ is a file that groups related resources, such as everything needed to configure a web server, database server, or a load balancer.

To get started, let's look at a basic configuration management project. You'll learn how to manage the Message of the Day (MOTD) file for your organization. The MOTD file is an example of a resource.

[START_BOX]

## 1. Set up your working directory

From your virtual machine, create the <% fp 'chef-repo' %> directory under your home directory, <% fp '~/' %>.

<% command_snippet(page: current_page, path: 'set-up-your-working-directory/mkdir-chef-repo', features: :stdin) %>

Now `cd` there.

<% command_snippet(page: current_page, path: 'set-up-your-working-directory/cd-chef-repo', features: :stdin) %>

[END_BOX]

[START_BOX]

## 2. Create the MOTD file

In this step, you'll first create the file and set the initial MOTD. To keep things basic, you'll configure the file in the <% fp '/tmp' %> directory.

Next, you'll write what's called a _recipe_ to describe the desired state of the MOTD file. Then you'll run [chef-client](https://docs.chef.io/ctl_chef_client.html), the program that applies your Chef code to place your system in the desired state. Typically, `chef-client` downloads and runs the latest Chef code from the Chef server, but in this lesson, you'll run `chef-client` in what's called _local mode_ to apply Chef code that exists locally on your virtual machine.

From your <% fp '~/chef-repo' %> directory, create a file named <% fp 'hello.rb' %>, add these contents, and then save the file.

<% code_snippet(page: current_page, path: 'create-the-motd-file/hello-1') %>

From your terminal window, run the following `chef-client` command to apply what you've written.

<% command_snippet(page: current_page, path: 'create-the-motd-file/ccr-1') %>

The output tells us that a new file, <% fp '/tmp/motd' %>, was created. (The warnings you see relate to concepts we haven't introduced yet, and can be safely ignored for now.)

Now verify that the file was written. Run the `more` command, which prints a file to the console.

<% command_snippet(page: current_page, path: 'create-the-motd-file/more-tmp-motd') %>

### Run the command a second time

Now, let's see now what happens when you run the same `chef-client` command again.

<% command_snippet(page: current_page, path: 'create-the-motd-file/ccr-2') %>

This time you get a different response &ndash; the file is already up to date. This is because Chef applies the configuration only when it needs to.

Chef looks at the current configuration state and applies the action only if the current state doesn't match the desired state. Here, Chef doesn't create or modify <% fp '/tmp/motd' %> because it already exists and its contents didn't change. We call this approach _test and repair_.

[END_BOX]

[START_BOX]

## 3. Update the MOTD file's contents

Now you're going to change the MOTD.

Modify <% fp 'hello.rb' %> like this ('hello world' becomes 'hello chef'.)

<% code_snippet(page: current_page, path: 'update-the-motd-files-contents/hello-2') %>

Run `chef-client`.

<% command_snippet(page: current_page, path: 'update-the-motd-files-contents/ccr-3') %>

This time Chef applies the action because you've changed the desired state of the file.

[END_BOX]

[START_BOX]

## 4. Ensure the MOTD file's contents are not changed by anyone else

You need to make sure that no other process can change the MOTD.

Imagine that a co-worker manually changes <% fp '/tmp/motd' %> by replacing 'hello chef' with 'hello robots'. Go ahead and change your copy of <% fp '/tmp/motd' %> through your text editor. Or you can change the file from the command line like this.

<% command_snippet(page: current_page, path: 'ensure-the-motd-files-contents-are-not-changed-by-anyone-else/echo-robots', features: :stdin) %>

Now run `chef-client`.

<% command_snippet(page: current_page, path: 'ensure-the-motd-files-contents-are-not-changed-by-anyone-else/ccr-4') %>

Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resource matches what you specify, even if it is altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

[COMMENT] In practice, it's common to configure `chef-client` to act as a service that runs periodically or as part of a continuous delivery system such as [Chef Automate](/automate/). Running Chef through automation helps to ensure that your servers remain configured as you expect and also enables them to be reconfigured when you need them to be.

[END_BOX]

[START_BOX]

## 5. Delete the MOTD file

OK, you're done experimenting with the MOTD, so let's clean up. From your <% fp '~/chef-repo' %> directory, create a new file named <% fp 'goodbye.rb' %> and save the following content to it.

<% code_snippet(page: current_page, path: 'delete-the-motd-file/goodbye') %>

Now apply <% fp 'goodbye.rb' %> to delete the file.

<% command_snippet(page: current_page, path: 'delete-the-motd-file/ccr-5') %>

The output shows that <% fp '/tmp/motd' %> is now gone, but let's prove it.

<% command_snippet(page: current_page, path: 'delete-the-motd-file/more-tmp-motd-2', features: [:stdin, :stderr]) %>

[END_BOX]

[START_BOX]

## Summary

You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state. You worked with a [file](https://docs.chef.io/resource_file.html), which is one kind of resource.

### Resources describe the what, not the how

A recipe is a file that holds one or more resources. Each resource declares _what_ state a part of the system should be in, but not _how_ to get there. Chef handles these complexities for you.

In this lesson, you declared that the file <% fp '/tmp/motd' %> must exist and what its contents are, but you didn't specify how to create or write to the file. This layer of abstraction can not only make you more productive, but it can also make your work more portable across platforms.

### Resources have actions

When you deleted the file, you saw the `:delete` action.

Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's often the most common affirmative one &ndash; for example, _create_ a file, _install_ a package, and _start_ a service.

When we created the file we didn't specify the `:create` action because `:create` is the default. But of course you can specify it if you want.

The documentation for each resource type, [file](https://docs.chef.io/resource_file.html) for example, explains the type's default action.

### Recipes organize resources

In Chef, <% fp 'hello.rb' %> is an example of a [recipe](https://docs.chef.io/recipes.html), or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.

Our recipe states everything we need to manage the MOTD file. You used `chef-client` in local mode to apply that recipe from the command line.

[END_BOX]

[START_BOX]

## Exercises

<%= partial "/layouts/exercises", locals: { path: '/tutorials/learn-the-basics/rhel/shared/configure-a-resource/exercises', questions: [1,2,3,4] } %>

[END_BOX]

<% next_page(current_page) do %>

Of course, your job is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

<% end %>
