---
title: 'Configure a package and service'
type: topic
order: 3
description: 'See why order matters by managing a package and its service.'
keywords: package, service, file, resource, Apache, httpd
layout: tutorials/platforms/environments/overview/lesson/layout
sections: [summary, exercises]
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
snippet_path: learn-the-basics/rhel/vagrant/configure-a-package-and-service
---
[HEADLINE] Like files, packages and services are also types of resources. Chef applies resources in the order you specify.

Let's extend what you learned about file management in the previous lesson to manage the Apache HTTP Server package and its service.

Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.

[START_BOX]

## 1. Install the Apache package

Let's install the Apache package, `httpd`. From your <code class="file-path">~/chef-repo</code> directory, add this recipe to a file named <code class="file-path">webserver.rb</code>.

<% code_snippet(page: current_page, path: 'install-the-apache-package/webserver-1') %>

We don't need to specify an action because `:install` is the default.

Now run `chef-client` in local mode to apply the recipe.

<% command_snippet(page: current_page, path: 'install-the-apache-package/package-ccr-1') %>

[COMMENT] `sudo` is required because this command installs a package and therefore must be run with root privileges. If you're running as root on your own machine, you can omit `sudo` from the command.

Run the recipe a second time.

<% command_snippet(page: current_page, path: 'install-the-apache-package/package-ccr-2') %>

You see that Chef does not apply any changes because there's nothing to do &ndash; the package is already installed.

[END_BOX]

[START_BOX]

## 2. Start and enable the Apache service

Now let's first enable the Apache service when the server boots and then start the service. Modify <code class="file-path">webserver.rb</code> to look like this.

<% code_snippet(page: current_page, path: 'start-and-enable-the-apache-service/webserver-2') %>

This code declares multiple actions.

Now apply it.

<% command_snippet(page: current_page, path: 'start-and-enable-the-apache-service/package-ccr-3') %>

The package is already installed, so there's nothing to do. However, the service is started and enabled.

[END_BOX]

[START_BOX]

## 3. Add a home page

Let's spruce things up and add a custom home page.

You already know how to configure a `file` resource; append one that configures the default home page, <code class="file-path">/var/www/html/index.html</code>, to the end of <code class="file-path">webserver.rb</code>. The entire recipe now looks like this.

<% code_snippet(page: current_page, path: 'add-a-home-page/webserver-3') %>

Now apply it.

<% command_snippet(page: current_page, path: 'add-a-home-page/package-ccr-4') %>

The package and the service are already in the desired state, but you'll see that the home page, <code class="file-path">/var/www/html/index.html</code>, is created.

[END_BOX]

[START_BOX]

## 4. Confirm your web site is running

Run the `curl` command to confirm that your web page is available.

<% command_snippet(page: current_page, path: 'confirm-your-web-site-is-running/curl-localhost') %>

<% if current_page.data.page_variants && current_page.data.page_variants.free_vm %>

Normally, you could also access your web server from a browser on another machine. However, the free trial virtual machine does not have a public IP address.

<% else %>

Assuming your VM's firewall is open for inbound access on port 80, you can access your web server from a browser on another machine. You'll see something like this.

![The basic home page](misc/webserver-basic-remote.png)

<% end %>

[END_BOX]
