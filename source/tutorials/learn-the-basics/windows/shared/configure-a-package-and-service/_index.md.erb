[HEADLINE] Like files, packages and services are also types of resources. Chef applies resources in the order you specify.

Let's extend what you learned about file management in the previous lesson to manage an Internet Information Services (IIS) web server.

Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.

[START_BOX]

## 1. Install IIS

Let's install IIS. From your <code class="file-path">~\chef-repo</code> directory, add this recipe to a file named <code class="file-path">webserver.rb</code>.

<% code_snippet(page: current_page, path: 'install-iis/webserver-1') %>

We don't need to specify an action because `:run` is the default.

Now run `chef-client` in local mode to apply the recipe.

<% command_snippet(page: current_page, path: 'install-iis/package-ccr-1') %>

Run the recipe a second time.

<% command_snippet(page: current_page, path: 'install-iis/package-ccr-2') %>

This time, Chef does not reinstall IIS. That's because the `not_if` attribute skips the resource when the condition is true. In this case, we use the `Get-WindowsFeature` PowerShell cmdlet to check whether the `Web-Server` feature is installed.

[END_BOX]

[START_BOX]

## 2. Start the World Wide Web Publishing Service

Now let's first enable the IIS World Wide Web Publishing Service (W3SVC) service when the server boots and then start the service. Modify <code class="file-path">webserver.rb</code> to look like this.

<% code_snippet(page: current_page, path: 'start-the-world-wide-web-publishing-service/webserver-2') %>

This code declares multiple actions.

Now apply it.

<% command_snippet(page: current_page, path: 'start-the-world-wide-web-publishing-service/package-ccr-3') %>

IIS is already installed, so again there's nothing to do. Similarly, the W3SVC service is already started and enabled. The command would install IIS if it got uninstalled and enable the W3SVC service if it was stopped or disabled. With Chef, this is easy to verify.

[END_BOX]

[START_BOX]

## 3. Configure the home page

Let's spruce things up and add a custom home page.

You already know how to configure a `file` resource; append one that configures the default home page, <code class="file-path">c:\inetpub\wwwroot\Default.htm</code>, to the end of <code class="file-path">webserver.rb</code>. The entire recipe now looks like this.

<% code_snippet(page: current_page, path: 'add-a-home-page/webserver-3') %>

Now apply it.

<% command_snippet(page: current_page, path: 'add-a-home-page/package-ccr-4') %>

IIS and W3SVC are already in the desired state, but you'll see that the home page, <code class="file-path">c:\inetpub\wwwroot\Default.htm</code>, is created.

[END_BOX]

[START_BOX]

## 4. Confirm your web site is running

Run the `Invoke-WebRequest` PowerShell cmdlet to confirm that your web page is available.

<% command_snippet(page: current_page, path: 'confirm-your-web-site-is-running/iwr-localhost') %>

<% if current_page.data.page_variants && current_page.data.page_variants.free_vm %>

Normally, you could also access your web server from a browser on another machine. However, the free trial virtual machine does not have a public IP address.

<% else %>

Assuming your VM's firewall is open for inbound access on port 80, you can access your web server from a browser on another machine. You'll see something like this.

![The basic home page](misc/webserver-basic-remote.png)

<% end %>

[END_BOX]
