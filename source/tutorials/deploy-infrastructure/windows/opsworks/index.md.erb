---
title: 'Deploy infrastructure changes to Windows Server using AWS OpsWorks for Chef Automate'
short_title: 'AWS OpsWorks for Chef Automate'
layout: tutorials/platforms/environments/overview/layout
platform: Windows Server
platform_id: windows
logo: AWSOpsWorks.svg
order: 4
machine_config: snippets/deploy-infrastructure/windows/opsworks/machine_config.md
environment: opsworks
---
In this tutorial, you'll use Chef Automate to push configuration changes to a production-like environment.

Chef Automate gives your operations and development teams a common platform for developing, building, testing, and deploying cookbooks, applications, and more. It enables multiple teams to work together on systems made up of multiple components and services, and promotes the DevOps principles of cross-team collaboration, cooperation, and transparency.

<img src="/assets/images/automate/automate-architecture-2017-outlines.svg" style="width: 100%; box-shadow: none;" />

Chef Automate provides a workflow for managing changes as they flow through its pipeline, beginning with a local workstation, through sets of automated tests, and out into production. If you have many different teams, each delivering software in its own way, you can use Chef Automate to bring a standard, proven approach to all of your organization's deployments.

With Chef Automate, you can, for example:

* upload new and updated cookbooks to the Chef server that manages your infrastructure and applications.
* publish new and updated cookbooks to a Chef Supermarket installation.
* release source code or build artifacts (for example, a Java or PHP application) to a repository such as GitHub or Artifactory.
* run automated tests to identify potential defects or bugs in your code.
* detect cases where a different team's code is incompatible with yours.
* push build artifacts to production servers in real time.
* deploy [Habitat](https://www.habitat.sh) packages to a Habitat depot.

Chef uses Chef Automate to deploy its own software. With it, we have:

* increased the number of features per release by 50%.
* reduced the number of defects per release by 70%.
* gone from 1 release every two days to 12 releases per day.

We are shipping code faster, with less effort, and with higher quality.

[COMMENT] Learn more about how to use the full power of Chef Automate to accomplish your business goals. Go to [www.chef.io/automate](https://www.chef.io/automate) to read the white paper.

In this tutorial, you'll use Chef Automate's _workflow_ capabilities to deliver changes to a basic web configuration cookbook to the Chef server and to verify the cookbook's behavior in a production-like environment. Chef Automate enables multiple teams to work together on systems made up of multiple components and services, and promotes DevOps principles.

Two important parts of Chef Automate are _pipelines_ and _phases_.

[START_BOX]

## Pipelines

A _pipeline_ is a series of automated and manual quality gates that take software changes from development to delivery. Pipelines in Chef Automate have six stages: Verify, Build, Acceptance, Union, Rehearsal, and Delivered.

<img src="/assets/images/delivery/delivery_partial_workflow.svg" style="width: 100%; box-shadow: none;" alt="Chef Automate's six stages" />

Changes progress from one stage to another by passing a suite of automated tests. To advance past the Verify and Acceptance stages, explicit approval by a designated person is required (in addition to completion of the associated tests.)

[Learn more about pipeline stages](https://docs.chef.io/workflow.html#pipeline-stages)

[END_BOX]

[START_BOX]

## Phases

The work within each stage is organized into phases.

Here are the phases for each stage.

<img src="/assets/images/delivery/delivery_full_workflow.svg" style="width: 100%; box-shadow: none;" />

You determine what happens in each phase with a _build cookbook_. Each phase is configured with a recipe in that cookbook. Build cookbooks also control other aspects of the pipeline, such as the types of artifacts you build and where you store them.

[Learn more about build cookbooks](https://docs.chef.io/delivery_build_cookbook.html)

[END_BOX]

[START_BOX]

## What you'll do

This tutorial comes in multiple parts. In the first two parts, you set up an AWS OpsWorks for Chef Automate instance and set up your workstation to work with it. In the third and fourth parts, you set up a job runner and build pipeline that publishes a basic web configuration cookbook to the Chef server. In the last three parts, you use Chef Automate to verify the cookbook's behavior in a production-like environment.

### Part 1: Get set up with AWS OpsWorks for Chef Automate

In this part, you bring up an AWS OpsWorks for Chef Automate installation and configure network settings for use with Chef Automate's workflow feature. We'll point you to the prerequisite resources if you don't yet have an AWS OpsWorks for Chef Automate installation.

### Part 2: Set up your workstation and user profile

Here you set up your workstation to be able to push configuration changes through Chef Automate's integrated pipeline. You also set up your user account and command-line tools to access Chef Automate's integrated Git server.

User accounts enable end users to access Chef Automate through its web interface or from the command line.

### Part 3: Add a runner

Here, you set up a _runner_, which executes jobs scheduled by Chef Automate as a change moves through the Chef Automate pipeline.

### Part 4: Create the project

Chef Automate uses _projects_ to organize work across multiple teams.

You can use Chef Automate to build and deploy almost any kind of software system. For example, you can publish changes to a Chef cookbook to Chef server, Chef Supermarket, or GitHub. Alternatively, you might deploy a service to an application server.

In this tutorial, the project is the `learn_chef_iis` cookbook that you worked with in the [Manage a node](/tutorials/manage-a-node/windows/opsworks/) tutorial. Recall that this cookbook manages a basic Internet Information Services (IIS) configuration.

The project's build cookbook publishes the web configuration cookbook to a Chef server.

### Part 5: Add infrastructure to run your web server

In this part, you bring up infrastructure environments that run the `learn_chef_iis` cookbook during the Acceptance, Union, Rehearsal, and Delivered stages.

By the end of this part, your web configuration looks like this.

![](automate/browser-hello-world.png)

### Part 6: Add a feature to the web configuration

In this part, you integrate a change to the web configuration cookbook to display additional info about your server. You follow the change through each pipeline stage, from your workstation all the way out to your nodes.

You'll also run basic tests locally on your workstation before you submit changes to the Chef Automate pipeline.

By the end of this part, your web configuration looks like this:

<img style="max-width:100%;" src="/assets/images/automate/web_server_info_windows.png"/>

### Part 7: Extend the build cookbook

In this tutorial, you learn about the `delivery-truck` cookbook, which helps perform many common tasks that are needed to deliver Chef cookbooks. However, this cookbook can't do everything.

In this part, you extend your build cookbook to include a smoke test. Smoke testing helps you quickly validate whether your application or service is running and functional.

[END_BOX]

[START_BOX]

## What you'll learn

After completing this tutorial, you should be able to:

* describe each of the stages and phases that make up a Chef Automate pipeline.
* verify the correctness of new features and submit changes to the pipeline.
* approve code changes made by others.
* verify new features and deliver them to your users.

[COMMENT] Chef Automate relies on Git and uses its feature branches for handling changes before they merge, as well as Git's ability to perform merges automatically. You're going to see Git terminology throughout this tutorial. We'll provide all the Git commands that you'll need, but you can also [check out the documentation](https://git-scm.com/doc) to learn more.

[END_BOX]
