---
title: 'Add a feature to the web configuration'
order: 6
layout: tutorials/platforms/environments/overview/lesson/layout
time_to_complete: 25 minutes
snippet_path: deploy-infrastructure/ubuntu/opsworks/set-up-your-chef-server
snippet_workstation: ubuntu
headings: [
  { label: '1. Bring up a system', href: '#step1' },
  { label: '2. Set the hostname', href: '#step2' },
  { label: '3. Configure the runner', href: '#step3' },
  ]
---






how to get the node attributes ^^ check visibility page.



At this point, you've validated that your pipeline works and you've brought up infrastructure to receive build artifacts. You're ready to use Chef Automate for what it was intended &ndash; moving changes quickly and safely all the way from your workstation to production.

In this part, you add a feature to the web configuration by changing the `learn_chef_apache2` cookbook. The feature adds additional sample data and also provides an interactive control that displays where your customers are on a globe. This feature uses [D3](http://d3js.org), a JavaScript library for producing interactive data visualizations.

This feature is provided for you in GitHub (your `origin` remote.) You first create a feature branch that's based off your local `master` branch. Then you integrate the completed feature branch from GitHub with your local feature branch.

You also use `delivery job` to verify your work and resolve test failures before you submit a change to the pipeline.

Here's what you'll do:

1. [Create the feature branch](#step1)
1. [Integrate the remote branch with your local feature branch](#step2)
1. [Run Chef Automate jobs to verify the change](#step3)
1. [Submit your change to the pipeline](#step4)

[START_BOX]

## 1. Create the feature branch

You're already likely on the `master` branch. If you're not, you can run the following commands to switch to `master` and synchronize with the remote Git repo.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ git checkout master
```

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ git pull --prune
Already up-to-date.
```

Next, create a feature branch named `server_info`.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ git checkout -b server_info
Switched to a new branch 'server_info'
```

[END_BOX]

[START_BOX]

## 2. Modify the HTML template

Next, modify the HTML template file, <% fp '~/learn-chef/cookbooks/learn_chef_apache2/templates/default/index.html.erb' %>, like this.

```html
# ~/learn-chef/cookbooks/learn_chef_apache2/templates/default/index.html.erb
<html>
  <body>
    <h1>hello from <= node['fqdn'] %></h1>
    <p>This system is running <= node['hostnamectl']['operating_system'] %> and has
      <= node['cpu']['cores'] %> CPU cores and
      <= node['memory']['total'] %> total memory.
  </body>
</html>
```

TODO: Talk about this.

```bash
$ git add templates/default/index.html.erb
```

```bash
$ git commit -m "Show additional server info"
[server_info 62a6df2] Show additional server info
 1 file changed, 2 insertions(+), 1 deletion(-)
```

```bash
git status
On branch server_info
nothing to commit, working directory clean
```

[END_BOX]

[START_BOX]

## 3. Verify the change locally

Before you submit a change to the Chef Automate pipeline, you want to verify that the change works as expected and passes unit, lint, and syntax checks. Running these checks locally is a good way to be certain that your change is valid before it reaches the pipeline.

For a Chef cookbook, you might run [Test Kitchen](https://docs.chef.io/kitchen.html) as you build your feature to verify that it behaves as you expect on a temporary instance that resembles production. You might also run ChefSpec tests, Foodcritic, and RuboCop on your workstation. For an application or service, you might run a different set of tools to verify your work.

Another approach is to run [delivery local](https://docs.chef.io/ctl_delivery.html#delivery-local). The `delivery local` command runs a phase of Chef Automate locally, based on settings in your <% fp 'project.toml' %> file. (This file is created for you when you run the `chef generate cookbook` command.)

<% fp '.delivery/project.toml' %> looks like this.

```toml
# ~/learn-chef/cookbooks/learn_chef_apache2/.delivery/project.toml
# Delivery Prototype for Local Phases Execution
#
# The purpose of this file is to prototype a new way to execute
# phases locally on your workstation. The delivery-cli will read
# this file and execute the command(s) that are configured for
# each phase. You can customize them by just modifying the phase
# key on this file.
#
# By default these phases are configured for Cookbook Workflow only
#
# As this is still a prototype we are not modifying the current
# config.json file and it will continue working as usual.

[local_phases]
unit = "rspec spec/"
lint = "cookstyle"
syntax = "foodcritic . -f correctness"
provision = "chef exec kitchen create"
deploy = "chef exec kitchen converge"
smoke = "chef exec kitchen verify"
cleanup = "chef exec kitchen destroy"
```

Each variable name &ndash; `unit`, `lint`, `syntax`, and so on &ndash; represents a pipeline phase. Each value represents the command to run that phase. For example, the `unit` phase runs [RSpec](http://rspec.info), a unit test framework for Ruby.

The details of how the various test tools work is beyond the scope of this tutorial. If you're unfamilar with testing tools such as RSpec, Foodcritic, and Test Kitchen, you can later check out [Getting started with automated testing](/skills/get-started-with-testing/) to learn more using automated testing to verify your Chef code.

The `unit`, `lint` and `syntax` phases are part of the Verify and Build stages. The `provision`, `deploy`, and `smoke` phases are part of the Acceptance, Union, Rehearsal, and Delivered stages. The `cleanup` phase is provided as a convenient way to clean up any resources created by the previous phases.

Let's start by running the `unit` phase locally. The `learn_chef_apache2` cookbook's <% fp 'spec' %> directory contains just the default unit test. RSpec examines your source code without actually running it. The default test verifies that the resources in the cookbook's default recipe are properly defined and would converge without error.

From the <% fp '~/learn-chef/cookbooks/learn_chef_apache2' %> directory, run `delivery local unit` to run the unit phase.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ delivery local unit
Chef Delivery
Running Unit Phase
.

Finished in 0.27299 seconds (files took 3.2 seconds to load)
1 example, 0 failures
```

You'll see no errors reported.

Next, run `delivery local lint` to run lint testing.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ delivery local lint
Chef Delivery
Running Lint Phase
Inspecting 6 files
......

6 files inspected, no offenses detected
```

The lint phase also passes.

Finally, run `delivery local syntax` to perform syntax checks.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ delivery local syntax
Chef Delivery
Running Syntax Phase

```

The syntax phase passes.

[END_BOX]

[START_BOX]

## 4. Increment your cookbook's version

When a cookbook changes, it's important to update its version to ensure that a given set of functionality is tied to a given version. You [learned about cookbook versions](/tutorials/manage-a-node/ubuntu/opsworks/update-your-nodes-configuration#step2) in the _Manage a node_ tutorial.

Recall that (show MAJOR MINOR BUG BULLET LIST)

According to [Semantic Versioning](http://semver.org), we should increment the MINOR version because we're adding backwards-compatible functionality.

Update the `version` field from 0.2.0 to 0.3.0 in your `learn_chef_apache2` cookbook's <% fp 'metadata.rb' %> file.

```ruby
# ~/learn-chef/cookbooks/learn_chef_apache2/metadata.rb
name 'learn_chef_apache2'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures learn_chef_apache2'
long_description 'Installs/Configures learn_chef_apache2'
version '0.3.0'
issues_url 'https://github.com/learn-chef/learn_chef_apache2/issues' if respond_to?(:issues_url)
source_url 'https://github.com/learn-chef/learn_chef_apache2' if respond_to?(:source_url)
```

Commit the change to the local `server_info` branch.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ git status
On branch server_info
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   metadata.rb

no changes added to commit (use "git add" and/or "git commit -a")
```

```bash
$ git add metadata.rb
```

```bash
$ git commit -m "Bump cookbook version"
[server_info 81baaff] Bump cookbook version
 1 file changed, 1 insertion(+), 1 deletion(-)
```

[END_BOX]

[START_BOX]

## 5. Submit your change to the pipeline

Before you submit your changes, run `git status` to verify that there are no pending changes.

```ps
# ~/learn-chef/cookbooks/learn_chef_apache2
$ git status
On branch server_info
nothing to commit, working directory clean
```

Now run `delivery review` to submit your changes to the pipeline.

```bash
# ~/learn-chef/cookbooks/learn_chef_apache2
$ delivery review
Chef Delivery
Loading configuration from C:\Users\Administrator\learn_chef_apache2
Review for change server_info targeted for pipeline master
Created new patchset
https://delivery.chordata.biz/e/mammalia/#/organizations/diprotodontia/projects/learn_chef_apache2/changes/2c267
cd4-9bc9-4272-a665-0fbee5ed350b
```

When the Chef Automate UI appears, trace the change's progress through the pipeline.

<img style="max-width:75%;" src="/assets/images/automate/wf-server_info-verify.png"/>

1. Review the changes in the web interface. Click **Approve** when all tests pass. In practice, others would help review and approve your code changes.
1. Watch the change progress through the Build and Acceptance stages.
1. After the Acceptance stage completes, navigate to the web server for your Acceptance environment in a second browser window. You'll see that the updated version of the web configuration shows additional server info.

<img style="max-width:100%;" src="/assets/images/automate/web_server_info_ubuntu.png"/>

After you verify the change in Acceptance, press the **Deliver** button. Watch the change progress through the Union, Rehearsal, and Delivered stages.

<img style="max-width:75%;" src="/assets/images/automate/wf-server_info-delivered.png"/>

As each stage finishes, you can verify that the web application comes up in the associated environment.

Great work! By testing your changes locally, you can discover and fix potential problems before you submit your work. Once you do submit something, Chef Automate's central pipeline lets you and your team review both the code and build artifacts before you move any changes to production.

After your change gets merged into Chef Automate's `master` branch (this happens when you click the **Approve** button at the end of the Verify stage), you may want to integrate the change into your local `master` branch to prepare your copy of the source code for the next feature or bug fix. You'll checkout the `master` branch and run `git pull --prune` in the next part.

[END_BOX]

<% next_page(current_page) do %>

WEE!

<% end %>
