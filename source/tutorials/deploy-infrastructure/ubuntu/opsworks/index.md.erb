---
title: 'Deploy infrastructure changes to Ubuntu using AWS OpsWorks for Chef Automate'
short_title: 'AWS OpsWorks for Chef Automate'
layout: tutorials/platforms/environments/overview/layout
platform: Ubuntu
platform_id: ubuntu
logo: AWSOpsWorks.svg
order: 4
machine_config: snippets/deploy-infrastructure/ubuntu/opsworks/machine_config.md
environment: opsworks
---
Chef Automate gives your operations and development teams a common platform for developing, building, testing, and deploying cookbooks, applications, and more. It enables multiple teams to work together on systems made up of multiple components and services, and promotes the DevOps principles of cross-team collaboration, cooperation, and transparency.

![](automate/automate-architecture.svg)

Chef Automate provides a workflow for managing changes as they flow through its pipeline, beginning with a local workstation, through sets of automated tests, and out into production. If you have many different teams, each delivering software in its own way, you can use Chef Automate to bring a standard, proven approach to all of your organization's deployments.

With Chef Automate, you can, for example:

* upload new and updated cookbooks to the Chef server that manages your infrastructure and applications.
* publish new and updated cookbooks to a Chef Supermarket installation.
* release source code or build artifacts (for example, a Java or PHP application) to a repository such as GitHub or Artifactory.
* run automated tests to identify potential defects or bugs in your code.
* detect cases where a different team's code is incompatible with yours.
* push build artifacts to production servers in real time.
* deploy [Habitat](https://www.habitat.sh) packages to a Habitat depot.

Chef uses Chef Automate to deploy its own software. With it, we have:

* increased the number of features per release by 50%.
* reduced the number of defects per release by 70%.
* went from 1 release every two days to 12 releases per day.

We are shipping code faster, with less effort, and with higher quality.

[COMMENT] Learn more about how to use the full power of Chef Automate to accomplish your business goals. Go to [www.chef.io/automate](https://www.chef.io/automate) to read the white paper.

In this tutorial, you'll use Chef Automate's _workflow_ capabilities to deliver changes to a basic web application cookbook to the Chef server and to verify the cookbook's behavior in a production-like environment. Chef Automate enables multiple teams to work together on systems made up of multiple components and services, and promotes DevOps principles.

Two important parts of Chef Automate are _pipelines_ and _phases_.

[START_BOX]

## Pipelines

A _pipeline_ is a series of automated and manual quality gates that take software changes from development to delivery. Pipelines in Chef Automate have six stages: Verify, Build, Acceptance, Union, Rehearsal, and Delivered.

<img src="/assets/images/delivery/delivery_partial_workflow.svg" style="width: 100%; box-shadow: none;" alt="Chef Automate's six stages" />

Changes progress from one stage to another by passing a suite of automated tests. To advance past the Verify and Acceptance stages, explicit approval by a designated person is required (in addition to completion of the associated tests.)

[Learn more about pipeline stages](https://docs.chef.io/workflow.html#pipeline-stages)

[END_BOX]

[START_BOX]

## Phases

The work within each stage is organized into phases.

Here are the phases for each stage.

<img src="/assets/images/delivery/delivery_full_workflow.svg" style="width: 100%; box-shadow: none;" />

You determine what happens in each phase with a _build cookbook_. Each phase is configured with a recipe in that cookbook. Build cookbooks also control other aspects of the pipeline, such as the types of artifacts you build and where you store them.

[Learn more about build cookbooks](https://docs.chef.io/delivery_build_cookbook.html)

[END_BOX]

[START_BOX]

## What you'll learn

After completing this tutorial, you should be able to:

* describe each of the stages and phases that make up a Chef Automate pipeline.
* verify the correctness of new features and submit changes to the pipeline.
* approve code changes made by others.
* verify new features and deliver them to your users.

[COMMENT] Chef Automate relies on Git and uses its feature branches for handling changes before they merge, as well as Git's ability to perform merges automatically. You're going to see Git terminology throughout this tutorial. We'll provide all the Git commands that you'll need, but you can also [check out the documentation](https://git-scm.com/doc) to learn more.

[END_BOX]

[START_BOX]

## The systems you'll need for this tutorial

The systems that make up Chef Automate reflect the types of software you want to deliver. For example, if you use Chef to manage your infrastructure, your system may include a private [Chef Supermarket](https://docs.chef.io/supermarket.html) server that exists behind your firewall.

The setup you'll need for this tutorial includes the minimum number of systems that are typical for many users. Here's a diagram:

<img src="/assets/images/automate/automate-scenario-architecture.svg" style="width: 100%; box-shadow: none;" alt="An example Chef Automate installation" />

The diagram shows these components:

**AWS OpsWorks for Chef Automate** &ndash; AWS OpsWorks is a managed service that runs on Amazon Web Services that includes a Chef server and Chef Automate.

**Build nodes** &ndash; To use Chef Automate's workflow feature, you'll need one or more build nodes, also called _runners_. As a change moves through the Chef Automate pipeline, build nodes execute jobs scheduled by Chef Automate. Runners typically exist as their own servers. If you set up multiple runners, phases can be run in parallel.

**Acceptance, Union, Rehearsal, and Delivered environments** &ndash; Chef Automate deploys build artifacts, or the pipeline's final output, to these environments. The output of your pipeline informs how you set up your environments.

For example, you might deploy a SQL Server database to a Windows Server environment. Or you might deploy web content and other media to an Amazon S3 bucket. In the this tutorial, you'll publish a cookbook that configures a basic web application on Ubuntu. Therefore, the Ubuntu runtime environment exists for each of these stages because the artifacts produced in the Build stage need to be deployed to each of them.

Each environment is named for the stage in which it is used. For example, the union environment is used in the Union stage of the pipeline. These environments typically resemble your production environment, and can often be part of your production environment. Delivered is the final environment. What "delivered" means for your system is up to you. It could mean deploying the change so that it is live and receiving production traffic, or it might mean deploying the change to a staging or preproduction environment that is later promoted manually or through some other mechanism.

**Your workstation** &ndash; Workstations are typically either a laptop or desktop computer. A workstation can run Windows, Mac OS X, or Linux. From your workstation, you access Chef Automate using either the command line or the web interface. Other common tasks include creating projects, writing build cookbooks, submitting new features to the pipeline, and reviewing and approving others' changes.

### Before you begin

You'll bring up build nodes and infrastructure to run your cookbook later in this tutorial. Before you begin, you'll need an AWS OpsWorks for Chef Automate installation and your workstation set up to use it.

The easiest way to get set up is to go through the [Manage a node](/tutorials/manage-a-node/ubuntu/opsworks/set-up-opsworks/) tutorial, then come back here. In the _Manage a node_ tutorial, you'll bootstrap a node and use Chef Automate's _visibility_ feature to visualize the status of your nodes.

<%= link_to("Start the Manage a node tutorial <i class='fa fa-angle-double-right'></i>", "/tutorials/manage-a-node/ubuntu/opsworks/set-up-opsworks/", class: 'button radius cta cta') %>

[END_BOX]

<% accordion('test-configuration', 'Test configuration') do %>

<% markdown do %>

<% render_machine_config(current_page.data.machine_config) %>

<% end %>

<% end %>
