---
title: 'Build an Ohai plugin'
description: 'Creating an Ohai plugin'
order: 2
keywords: training, tutorials, chef
type: topic
category: extending-chef
layout: lesson
sections: []
logo: ohai.svg
progress_bar: false
headings: [
  { label: 'Prerequisites', href: '#prerequisites' },
  { label: '1. Creating the Ohai Plugin', href: '#step1' },
  { label: '2. Testing the Ohai plugin with ChefSpec', href: '#step2' },
  { label: '3. Deploying the Ohai Plugin', href: '#step3' },
  { label: '4. Testing the Ohai Plugin with InSpec', href: '#step4' },
  { label: '5. Refining Ohai plugin deployment', href: '#step5' },
  { label: 'Outline of remaining work', href: '#outlineofremainingwork' },
  { label: 'Additional resources', href: '#additionalresources' }
]
---
In this tutorial, you'll learn how to create, test, and deploy an Ohai plugin that will be able to execute a system command and collect data about an installed application on a node.

[Ohai](https://docs.chef.io/ohai.html) collects data about your system. This data can be used to make your recipes more dynamic or provide better reporting. Each piece of data is captured through various plugins that are defined and shipped with Ohai. These plugins are defined with a domain-specific language (DSL) that is written in Ruby (similar to defining a recipe or a custom resource).

You can create your own Ohai plugins. These plugins can collect important data about your specialized hardware, virtualization, environment, and software. This data is collected at the start of the chef-client run and then stored as automatic attributes on the node. These node attributes can be used within your recipes or used in reporting when the node object is sent off to the Chef Server.

[COMMENT] This example is specific to Apache running on CentOS 6.7 but nearly all the practices are easily extendable to other applications and platforms.

[START_BOX]

## Prerequisites

### Understand hardware requirements

To successfully complete this tutorial, you'll need a Windows, MacOS, or Linux workstation that has relatively powerful hardware. We recommend that your workstation have at least 15GB of free disk space and at least 4GB of available memory so that you can download the base image and run a few virtual machine instances.

### Set up your workstation for local development

This tutorial builds on top off knowledge gained in [Develop locally](/tutorials/local-development/rhel/) and [Manage a basic web application](/manage-a-web-app/rhel/).

First, you'll need to have the latest version of the Chef Development Kit on your workstation. You'll also need a programmer's text editor that you're comfortable working with and a directory to work from &ndash; the tutorials use <% fp '~/learn-chef' %>. [Follow these steps](/tutorials/manage-a-node/rhel/hosted/set-up-your-workstation/) to get set up.

You'll also need the virtualization software [VirtualBox](https://www.virtualbox.org/) and [Vagrant](https://www.vagrantup.com/). If you don't have VirtualBox and Vagrant installed, [follow steps 1&mdash;3](/tutorials/learn-the-basics/rhel/virtualbox/set-up-a-machine-to-manage) to get set up. Optionally, you can follow steps 4&mdash;7 to verify you can successfully bring up a local virtual machine.

### Build local development skills using Test Kitchen

This tutorial requires familiarity with local development using Test Kitchen.

If you're not familiar with Test Kitchen, work through [Develop locally](/tutorials/local-development/rhel/) before you start this tutorial. This tutorial teaches you the basics of how to apply cookbooks on local test instances, all on your workstation.

The [Manage a basic web application](/manage-a-web-app/rhel/) tutorial provides additional hands-on practice with local development. Working through this tutorial is optional. Here, you configure a basic but complete web application using Test Kitchen. The [quickstart](/manage-a-web-app/rhel/bring-up-the-web-app-using-test-kitchen/) brings up the final configuration on a local test instance in just a few minutes.

[END_BOX]

[START_BOX]

## 1. Creating the Ohai plugin

An Ohai plugin is a Ruby file that needs to exist on the node. We will create a plugin file within our application cookbook and talk more about delivering the plugin to our system in the 'Deploying the plugin' section.

### Create an application cookbook

From your terminal window, begin by moving to the <% fp '~/learn-chef' %> directory.

```bash
# ~
$ cd ~/learn_chef
```

Next, run the following `chef generate cookbook cookbooks/apache` command to create a cookbook named `apache` under the <% fp '~/learn-chef/cookbooks' %> directory.

```bash
# ~/learn-chef
$ chef generate cookbook cookbooks/apache
Generating cookbook apache
- Ensuring correct cookbook file content
- Ensuring delivery configuration
- Ensuring correct delivery build cookbook content

Your cookbook is ready. Type \`cd cookbooks/apache\` to enter it.

There are several commands you can run to get started locally developing and testing your cookbook.
Type \`delivery local --help\` to see a full list.

Why not start by writing a test? Tests for the default recipe are stored at:

test/recipes/default_test.rb

If you\'d prefer to dive right in, the default recipe can be found at:

recipes/default.rb
```

Next, `cd` to your cookbook directory.

```bash
# ~/learn-chef
$ cd ~/learn-chef/cookbooks/apache
```

Install the application and start the service in the default recipe.

```ruby
# ~/learn-chef/cookbooks/apache/recipes/default.rb
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end
```

### Create the Ohai plugin

Run `chef generate file apache_modules.rb` to create a cookbook file named `apache_modules` under the <% fp '~/learn-chef/cookbooks/apache/files/default' %> directory.

```bash
# ~/learn-chef/cookbooks/apache
$ chef generate file apache_modules.rb
```

Write out the plugin using [Ohai's DSL](https://docs.chef.io/ohai_custom.html):

```ruby
# ~/learn-chef/cookbooks/apache/files/default/apache_modules.rb
Ohai.plugin :Apache do
  provides 'apache/modules'

  collect_data :default do
    apache(Mash.new)
    modules_cmd = shell_out('apachectl -t -D DUMP_MODULES')
    apache[:modules] = modules_cmd.stdout
  end
end
```

Let's talk about the [syntax](https://docs.chef.io/ohai_custom.html#syntax) of an Ohai plugin:

* An Ohai plugin name is always a symbol that starts with a capital letter, for example, `:Apache`.
* `provides` specifies where the content can be found on the node object, for example, `node['apache']['modules']`.
* This [collect_data](https://docs.chef.io/ohai_custom.html#collect-data) block is the **default** way we want to collect the information; you can also define platform-specific `collect_data` blocks.
* A [Mash](https://github.com/chef/chef/blob/master/lib/chef/mash.rb) is a [Hash](http://www.rubydoc.info/stdlib/core/Hash) that allows you to use string keys and symbol keys interchangebly to retreive the same value.
* [shell_out](https://github.com/chef/chef/blob/master/lib/chef/mixin/shell_out.rb) is a helper method that executes a command; returning an object that we can query the standard out (`stdout`), standard error (`stderr`), and exit status code (`exitstatus`).

[END_BOX]

[START_BOX]

## 2. Testing the Ohai plugin with ChefSpec

To ensure our plugin works would require us to deliver it to our target node and then execute `ohai` or `chef-client`.

When an Ohai plugin fails it does so silently so that it does not effect the remainder of the `ohai` execution and the `chef-client` run. If you were to make a mistake while creating or changing the plugin it would take a long time to troubleshoot the issue.

[COMMENT] On **success**, we would be able to see the data that our `collect_data` block has captured about our node.

[COMMENT] On **failure**, no data will be captured and no output will tell us what went wrong.

Before we deploy this plugin we will test it locally. This can be done first through ChefSpec with the help of the [chefspec-ohai](https://rubygems.org/gems/chefspec-ohai) gem.

### Install and require the chefspec-ohai gem

An additional gem is needed if we want to test our Ohai plugin through ChefSpec.

```bash
# ~/learn-chef/cookbooks/apache
$ chef gem install chefspec-ohai
Fetching: chefspec-ohai-0.1.0.gem (100%)
Successfully installed chefspec-ohai-0.1.0
1 gem installed
```

With the gem installed, now we need to load it within our test suite:

```ruby
# ~/learn-chef/cookbooks/apache/spec/spec_helper.rb
require 'chefspec'
require 'chefspec/berkshelf'
require 'chefspec/ohai'
```

### Write a ohai plugin test

Create a new directory to store your Ohai plugin tests:

```bash
# ~/learn-chef/cookbooks/apache
$ mkdir -p spec/unit/ohai_plugins
```

Write out the following test:

```ruby
# ~/learn-chef/cookbooks/apache/spec/unit/ohai_plugins/apache_modules_spec.rb
require 'spec_helper'

describe_ohai_plugin :Apache do
  let(:plugin_file) { 'files/default/apache_modules.rb' }

  it 'provides apache/modules' do
    expect(plugin).to provides_attribute('apache/modules')
  end

  let(:command) { double('Fake Command',stdout: 'OUTPUT') }

  it 'correctly captures output' do
    allow(plugin).to receive(:shell_out).with('apachectl -t -D DUMP_MODULES').and_return(command)
    expect(plugin_attribute('apache/modules')).to eq('OUTPUT')
  end
end
```

Let's talk about the [syntax](https://docs.chef.io/ohai_custom.html#syntax) of an Ohai plugin:

* `describe_ohai_plugin` is a new example group alias that allows you to easily test Ohai plugins.
* `let(:plugin_file) { ... }` defines the relative path to the cookbook file that contains the Ohai plugin.
* The first example asserts that the plugin provides the correct attribribute.
* `let(:command) { ... }` returns the test double command object which we use in the next example.
* `double('Fake Command',stdout: 'OUTPUT')` is an RSpec [test double](https://www.relishapp.com/rspec/rspec-mocks/v/3-5/docs/basics/test-doubles) that takes a name and a hash of parameters. These parameters are converted to methods on the double object.
* `allow(plugin).to_receive(:shell_out).with('...')` is RSpec's way of [allowing messages](https://www.relishapp.com/rspec/rspec-mocks/v/3-5/docs/basics/allowing-messages) to override the `shell_out` command when used within the plugin; replace the results of it when given the specified command.
* `plugin_attribute('apache/modules')` retrieves the value stored in the modules key (similar to writing `node['apache']['modules']`).

### Execute the ohai plugin test

Execute `rspec` with the new test to validate that the plugin is defined correctly:

```bash
# ~/learn-chef/cookbooks/apache
$ chef exec rspec spec/ohai_plugins/apache_modules_spec.rb
.[2016-12-02T14:18:59-06:00] WARN: Plugin Definition Error: <files/default>: collect_data already defined on platform default
.

Finished in 0.20469 seconds (files took 1.54 seconds to load)
2 examples, 0 failures
```

[END_BOX]

[START_BOX]

## 3. Deploying the Ohai Plugin

We have the application cookbook with the plugin file defined as a cookbook file (`apache_modules.rb`). To deploy the plugin we need to:

* copy the plugin to the correct file location.
* ask Ohai to load the plugin we delivered.

The [ohai](https://supermarket.chef.io/cookbooks/ohai) community cookbook does both of these things extremely well through a custom resource named `ohai_plugin`.

### Add the ohai community cookbook as a dependency and install dependencies

Append to the end of the cookbook's metadata the dependency on the `ohai` community cookbook.

```ruby
# ~/learn-chef/cookbooks/apache/metadata.rb
# ...
# If you upload to Supermarket you should set this so your cookbook
# gets a `View Source` link
# source_url 'https://github.com/<insert_org_here>/apache' if respond_to?(:source_url)
depends 'ohai'
```

Install the new dependencies:

```bash
# ~/learn-chef/cookbooks/apache
$ berks install
Resolving cookbook dependencies...
Fetching 'apache' from source at .
Using apache (0.1.0) from source at .
Using ohai (4.2.2)
Using compat_resource (12.16.2)
```

### Create and write a new recipe to deploy the plugin

Create a new recipe:

```bash
# ~/learn-chef/cookbooks/apache
$ chef generate recipe ohai_apache_modules
Recipe: code_generator::recipe
...
```

This Ohai plugin requires that the application be installed so we will include the default recipe first. Then we want to use the `ohai_plugin` resource and provide it the name of our Ohai plugin file.

```ruby
# ~/learn-chef/cookbooks/apache/recipes/ohai_apache_modules.rb
#
# Cookbook Name:: apache
# Recipe:: ohai_apache_modules
#
# Copyright (c) 2016 The Authors, All Rights Reserved.
include_recipe 'apache::default'
ohai_plugin 'apache_modules'
```

### Add the recipe to your node's run list

This could be done directly to your node, including this recipe (and the cookbook as a dependency) within another recipe already on the run list, through a role or an environment.

[END_BOX]

[START_BOX]

## 4. Testing the Ohai plugin with InSpec

Testing our plugin with ChefSpec allowed us to ensure the plugin was defined correctly. It does not verify if the command we wrote works correctly on our given platform and platform version. This is where we can use Test Kitchen.

### Add a new Test Kitchen suite that includes our plugin in the run list

To test this new recipe, create a new test suite within the Test Kitchen configuration.

```yaml
# ~/learn-chef/cookbooks/apache/.kitchen.yml
---
driver:
  name: vagrant

provisioner:
  name: chef_zero
  always_update_cookbooks: true

verifier:
  name: inspec

platforms:
  - name: centos-6.7

suites:
  - name: default
    run_list:
      - recipe[apache::default]
    verifier:
      inspec_tests:
        - test/recipes
    attributes:
  # THIS IS THE NEW SUITE TO ADD:
  - name: ohai_apache_modules
    run_list:
      - recipe[apache::ohai_apache_modules]
    attributes:
```

### Create and define a test that executes the plugin

The new suite we defined requires us to define a new location for our InSpec test.

Create the new test directory for the `ohai_apache_modules` test suite:

```bash
# ~/learn-chef/cookbooks/apache
$ mkdir -p test/recipes/ohai_apache_modules
```

Write the test:

```ruby
# test/recipes/ohai_apache_modules/default_test.rb

plugin_directory = '/tmp/kitchen/ohai/plugins'

describe command("ohai -d #{plugin_directory} apache") do
  its(:stdout) { should match(/core_module/) }
end
```

* The ohai cookbook will store plugins in the specified directory within Test Kitchen.
* The `command` resource is invoking the ohai command-line tool with the directory and specifying the plugin we want to view.
* The standard out should displays all the modules; `core_module` is an example of one of those modules.

### Execute this new test suite

Execute `kitchen` to create, converge and verify the new test suite.

```bash
# ~/learn-chef/cookbooks/apache
$ chef exec kitchen verify ohai_apache_modules
```

[END_BOX]

[START_BOX]

## 5. Refining Ohai plugin deployment

When the Test Kitchen converged our recipe a warning appeared:

```bash
# ~/learn-chef/cookbooks/apache
$ chef exec kitchen converge
...
...
Compiling Cookbooks...
Recipe: apache::ohai_httpd_modules
  * ohai_plugin[httpd_modules] action create[2016-12-02T06:00:15+00:00] WARN: The Ohai
  plugin_path does not include /tmp/kitchen/ohai/plugins. Ohai will reload on each
  chef-client run in order to add this directory to the path unless you modify your
  client.rb configuration to add this directory to plugin_path. See 'Ohai Settings' at https://docs.chef.io/config_rb_client.html

  [2016-12-02T06:00:15+00:00] WARN: Adding /tmp/kitchen/ohai/plugins to the Ohai
  plugin path for this chef-client run only
  ...
```

The warning informs us that the `ohai_plugin` resource reloads Ohai during the `chef-client` run. This is inefficient. The warning gives a suggestion to modify the `client.rb` configuration file. This can be done with the **chef-client** community cookbook. This cookbook has a `chef-client::config` recipe which allows you to insert important configuration into the chef-client configuration file. That file is loaded before Ohai is executed during the chef-client run.

[END_BOX]

[START_BOX]

## Outline of remaining work

1. Add the `chef-client` cookbook to your cookbook repository.
2. Add the `chef-client::config` recipe to the node's run-list.
3. Set the node attribute `node['ohai']['plugin_path']` to <% fp '/etc/chef/ohai/plugins' %> in a recipe, role, or environment.

[END_BOX]

[START_BOX]

## Additional resources

* Ohai's [Domain Specific Language](https://docs.chef.io/ohai_custom.html)
* The [chefspec-ohai](https://rubygems.org/gems/chefspec-ohai) gem
* Video: Joy of Automating - [Creating an Ohai Plugin](https://learn.chef.io/skills/joy-of-automating-episode-7/)

[END_BOX]

[START_BOX]

## Conclusion

Hopefully you see the power of creating an Ohai plugin to capture the important data about your node, have an understanding of why you should test the plugin locally with ChefSpec, and have an example cookbook that you can modify to suit your needs.

[END_BOX]
