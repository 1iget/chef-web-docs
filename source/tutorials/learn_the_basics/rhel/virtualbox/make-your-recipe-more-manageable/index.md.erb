---
title: 'Make your recipe more manageable'
order: 4
description: Create a cookbook to make your recipes easier to manage.
keywords: cookbook, recipe
layout: lesson
sections: [summary, exercises]
next: {heading: Conclusion, partial: conclusion}
time_to_complete: 15 minutes
snippet_path: learn-the-basics/rhel/vagrant/make-your-recipe-more-manageable
---
[HEADLINE] A _cookbook_ provides structure to your recipes and enables you to more easily reference external files, such as our web server's home page. In essence, a cookbook helps you stay organized.

Last time, you learned how to manage a package and a service by configuring a web server. You also added a basic web page. But there was one problem &ndash; although it helped you verify that your web server was properly configured, the code for your HTML page was embedded in the Chef recipe.

Let's create a _cookbook_ to make our web server recipe easier to manage.

[START_BOX]

## 1. Create a cookbook

First, from your <code class="file-path">~/chef-repo</code> directory, create a <code class="file-path">cookbooks</code> directory.

```bash
# ~/chef-repo
$ mkdir cookbooks
```

<% command_snippet(page: current_page, path: 'create-a-cookbook/mkdir-cookbooks') %>

Now run the `chef` command to generate a cookbook named `learn_chef_httpd`.

```bash
# ~/chef-repo/cookbooks
$ chef generate cookbook learn_chef_httpd
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/root/chef-repo/cookbooks/learn_chef_httpd] action create
    - create new directory /root/chef-repo/cookbooks/learn_chef_httpd
[...]
    - update content in file /root/chef-repo/cookbooks/learn_chef_httpd/recipes/default.rb from none to 032289
    (diff output suppressed by config)
    - restore selinux security context
```

<% command_snippet(page: current_page, path: 'create-a-cookbook/chef-generate-cookbook') %>

The <% fp 'cookbooks/learn_chef_httpd' %> part tells Chef to create a cookbook named `learn_chef_httpd` under the <% fp 'cookbooks' %> directory.

Here's the directory structure that the command created.

```bash
# ~/chef-repo/cookbooks
$ tree
.
└── learn_chef_httpd
    ├── Berksfile
    ├── chefignore
    ├── metadata.rb
    ├── README.md
    ├── recipes
    │   └── default.rb
    ├── spec
    │   ├── spec_helper.rb
    │   └── unit
    │       └── recipes
    │           └── default_spec.rb
    └── test
        └── integration
            ├── default
            │   └── serverspec
            │       └── default_spec.rb
            └── helpers
                └── serverspec
                    └── spec_helper.rb

11 directories, 9 files
```

[COMMENT] If the `tree` command is not available, run `sudo yum install tree -y` to install the `tree` package.

<% command_snippet(page: current_page, path: 'create-a-cookbook/tree-cookbook') %>

Note the default recipe, named <code class="file-path">default.rb</code>. This is where we'll move our Apache recipe in a moment.

[END_BOX]

[START_BOX]

## 2. Create a template

Now we'll move the home page to an external file. First, run this command to generate the HTML file for our home page.

```bash
# ~/chef-repo/cookbooks
$ chef generate template learn_chef_httpd index.html
Installing Cookbook Gems:
Compiling Cookbooks...
Recipe: code_generator::template
  * directory[./learn_chef_httpd/templates/default] action create
    - create new directory ./learn_chef_httpd/templates/default
    - restore selinux security context
  * template[./learn_chef_httpd/templates/default/index.html.erb] action create
    - create new file ./learn_chef_httpd/templates/default/index.html.erb
    - update content in file ./learn_chef_httpd/templates/default/index.html.erb from none to e3b0c4
    (diff output suppressed by config)
    - restore selinux security context
```

<% command_snippet(page: current_page, path: 'create-a-template/chef-generate-template') %>

The file <code class="file-path">index.html.erb</code> gets created under <code class="file-path">learn\_chef\_httpd/templates/default</code>.

```bash
# ~/chef-repo/cookbooks
$ tree
..
└── learn_chef_httpd
    ├── Berksfile
    ├── chefignore
    ├── metadata.rb
    ├── README.md
    ├── recipes
    │   └── default.rb
    ├── spec
    │   ├── spec_helper.rb
    │   └── unit
    │       └── recipes
    │           └── default_spec.rb
    ├── templates
    │   └── default
    │       └── index.html.erb
    └── test
        └── integration
            ├── default
            │   └── serverspec
            │       └── default_spec.rb
            └── helpers
                └── serverspec
                    └── spec_helper.rb

13 directories, 10 files
```

<% command_snippet(page: current_page, path: 'create-a-template/tree-template') %>

The .erb extension simply means that the file can have placeholders. More on that later.

Now copy the contents of the HTML file from your recipe to the new HTML file, <code class="file-path">index.html.erb</code>.

```html
<!-- ~/chef-repo/cookbooks/learn_chef_httpd/templates/default/index.html.erb -->
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

<% code_snippet(page: current_page, path: 'create-a-template/index-1') %>

[COMMENT] Here, you're adding the web site content directly to your cookbook for learning purposes. In practice, your web site content would more likely be some build artifact, for example a .zip file on your build server. With Chef, you could pull updated web content from your build server and deploy it to your web server.

[END_BOX]

[START_BOX]

## 3. Update the recipe to reference the HTML template

Write out the recipe, <code class="file-path">default.rb</code>, like this.

```ruby
# ~/chef-repo/cookbooks/learn_chef_httpd/recipes/default.rb
package 'httpd'

service 'httpd' do
  action [:enable, :start]
end

template '/var/www/html/index.html' do
  source 'index.html.erb'
end
```

<% code_snippet(page: current_page, path: 'update-the-recipe-to-reference-the-html-template/default-1') %>

[END_BOX]

[START_BOX]

## 4. Run the cookbook

Now run the cookbook. To do so, we use the `chef-client` command and specify what's called the _run-list_.

```bash
# ~/chef-repo
$ sudo chef-client --local-mode --runlist 'recipe[learn_chef_httpd]'
[2016-03-24T18:25:16+00:00] WARN: No config file found or specified on command line, using command line options.
Starting Chef Client, version 12.8.1
resolving cookbooks for run list: ["learn_chef_httpd"]
Synchronizing Cookbooks:
  - learn_chef_httpd (0.1.0)
Installing Cookbook Gems:
Compiling Cookbooks...
Converging 3 resources
Recipe: learn_chef_httpd::default
  * yum_package[httpd] action install (up to date)
  * service[httpd] action enable (up to date)
  * service[httpd] action start (up to date)
  * template[/var/www/html/index.html] action create
    - update content in file /var/www/html/index.html from 2914aa to ef4ffd
    (no diff)
    - restore selinux security context

Running handlers:
Running handlers complete
Chef Client finished, 1/4 resources updated in 02 seconds
```

<% command_snippet(page: current_page, path: 'run-the-cookbook/cookbook-ccr-1') %>

Previously, you ran `chef-client` to run a single recipe from the command line. A run-list specifies each of the individual recipes from your cookbook that you want to apply. Here, you applied just one recipe, but the run-list can contain multiple recipes from multiple cookbooks.<br><br>In this example, `recipe[learn_chef_httpd]` is the same as specifying `recipe[learn_chef_httpd::default]`, meaning we want to run the `learn_chef_httpd` cookbook's default recipe, <code class="file-path">default.rb</code>.

Run `curl` again or refresh your web browser to confirm that your web page is still available.

```bash
# ~/chef-repo
$ curl localhost
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

<% command_snippet(page: current_page, path: 'run-the-cookbook/cookbook-curl-localhost') %>

The result is the same as before, but with a cookbook things are now easier to manage.

[END_BOX]
