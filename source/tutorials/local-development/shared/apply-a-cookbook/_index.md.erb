<%
  metadata = current_page.parent.parent.data
  cookbook = metadata.cookbook
  cookbook_escaped = cookbook.gsub('_', '\_')
  environment = current_page.parent.data.environment
  environment_name = case environment
  when 'ec2'
    'EC2'
  when 'azure'
    'Azure'
  end
  platform = case current_page.parent.parent.data.platform_id
  when 'rhel'
    {
      id: 'rhel',
      name: 'CentOS',
      version: '7.2',
      article: 'a',
      box: 'centos-7.2',
      webserver: 'Apache',
      verify_command: 'curl localhost',
      transport: 'an SSH'
    }
  when 'ubuntu'
    {
      id: 'ubuntu',
      name: 'Ubuntu',
      version: '14.04',
      article: 'an',
      box: 'ubuntu-14.04',
      webserver: 'Apache',
      verify_command: 'curl localhost',
      transport: 'an SSH'
    }
  when 'windows'
      {
        id: 'windows',
        name: 'Windows Server',
        version: '2012 R2',
        article: 'a',
        box: 'windows-2012r2',
        webserver: 'IIS',
        verify_command: 'Invoke-WebRequest localhost',
        transport: 'a WinRM'
      }
  end
  def windows?
    current_page.parent.parent.data.platform_id == 'windows'
  end
%>
<% key_point "Test Kitchen enables you to run your cookbooks in a temporary environment that resembles production. With Test Kitchen, you confirm that things are working before you deploy your code to a test, preproduction, or production environment. Many users incorporate this kind of local development as part of their overall Chef workflow." %>

In this part, you'll run through the Test Kitchen workflow to get the hang of things.

<img src="/assets/images/misc/local_dev_workflow.png" style="box-shadow: none;" alt=""/>

<table class="icon-description">
  <tr>
    <td><img src="/assets/images/misc/local_dev_create.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen creates an instance of your virtual environment, for example, <%= platform[:article] %> <%= platform[:name] %> virtual machine.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_converge.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen applies your cookbook to the virtual environment.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_login.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>
      <% if windows? %>
      In this step, you connect to your virtual environment, typically over Remote Desktop or WinRM.
      <% else %>
      In this step, Test Kitchen creates an SSH session into your virtual environment.
      <% end %>
    </td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_verify.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, you manually verify that your virtual environment is configured as you expect.</td>
  </tr>
  <tr>
    <td><img src="/assets/images/misc/local_dev_destroy.png" style="display: inline; width: 125px; box-shadow: none;" alt=""/></td>
    <td>In this step, Test Kitchen shuts down and destroys your virtual environment.</td>
  </tr>
</table>

In this tutorial, you perform the **verify** step manually. In practice, you typically write tests that automatically verify whether your configuration works as you expect. You'll learn about local testing in a future tutorial.

Here, you'll get a copy of the web server cookbook that you created in the earlier tutorials. Then you'll apply that cookbook on <%= platform[:article] %> <%= platform[:name] %> virtual machine. Then you'll verify that everything's working. Finally, you'll destroy the instance.

[START_BOX]

## 1. Get the <%= cookbook_escaped %> cookbook from GitHub

In the previous tutorials, [Learn the Chef basics](/tutorials/learn-the-basics/<%= platform[:id] %>/) and [Manage a node](/tutorials/manage-a-node/<%= platform[:id] %>/), you wrote a cookbook named `<%= cookbook %>` that configures <%= platform[:webserver] %> web server. You'll run that cookbook on your test instance.

If you still have the `<%= cookbook %>` cookbook on your system, you're all set up. Otherwise, follow these steps to get it.

Start by creating the <% fp '~/learn-chef/cookbooks' %> directory.

<% command_snippet(workstation: 'ubuntu', path: "local-development/rhel/vagrant/set-up-your-workstation/set-up-your-working-directory/mkdir-learn-chef-cookbooks", features: :stdin) %>

Now `cd` there.

<% command_snippet(workstation: 'ubuntu', path: "local-development/rhel/vagrant/set-up-your-workstation/set-up-your-working-directory/cd-learn-chef-cookbooks", features: :stdin) %>

Next, clone the `<%= cookbook %>` cookbook from GitHub.

<% command_snippet(page: current_page, path: "get-the-#{cookbook}-cookbook-#{environment}/git-clone-#{cookbook}-#{environment}", features: [:stdin, :stderr]) %>

Now `cd` there.

<% command_snippet(page: current_page, path: "get-the-#{cookbook}-cookbook-#{environment}/cd-cookbooks-#{cookbook}-#{environment}", features: :stdin) %>

The contents of <% fp "~/learn-chef/cookbooks/#{cookbook}" %> is the same as what you built in the previous tutorials. You can examine this directory to familiarize yourself with its contents.

[COMMENT] Remember that [Chef Supermarket](https://supermarket.chef.io/) is also a place for the community to share cookbooks. You'll learn more about community cookbooks in later tutorials.

[END_BOX]

[START_BOX]

## 2. Examine the Test Kitchen configuration file

When you use the `chef generate cookbook` command to create a cookbook, Chef creates a file named <% fp '.kitchen.yml' %> in the root directory of your cookbook. <% fp '.kitchen.yml' %> defines what's needed to run Test Kitchen, including which virtualization provider to use, how to run Chef, and what platforms to run your code on.

<% if environment == 'vagrant' %>
Here's what your <% fp '.kitchen.yml' %> file looks like.
<% else %>
Here's what the initial <% fp '.kitchen.yml' %> file looks like.
<% end %>

<% code_snippet(page: current_page, path: "understand-kitchen-yml-#{cookbook}-#{environment}/kitchen-yml-#{cookbook}-#{environment}") %>

[COMMENT] On Linux and Mac OS, <% fp '.kitchen.yml' %> is a hidden file. Run `ls -a` if you want to see it from your terminal window.

<% if environment != 'vagrant' %>
We provide this configuration for the [Vagrant and VirtualBox version](/tutorials/local-development/<%= platform[:id] %>/virtualbox/) of this tutorial. To configure Test Kitchen to create <%= platform[:name] %> instances on <%= environment_name %>, start by modifying <% fp '.kitchen.yml' %> like this.

<% code_snippet(page: current_page, path: "update-kitchen-yml-#{cookbook}-#{environment}/kitchen-yml-#{cookbook}-#{environment}-2") %>

<% if environment == 'ec2' %>
The values shown here are examples. Replace the following with the values you gathered in the previous part.

| Value                | Description |
|---------------------:|-------------|
| `aws_ssh_key_id`     | The name of your EC2 key pair |
| `region`             | Your AWS region |
| `availability_zone`  | Your AWS availability zone |
| `subnet_id`          | Your subnet ID |
| `image_id`           | Your AMI ID |
| `security_group_ids` | Your security group ID |
| `ssh_key`            | The full path to the private part of your EC2 key pair file |

This configuration uses the `m1.small` [instance type](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html), which is the default. While an `m1.small` or larger instance type can provide better performance, you can use the `t2.micro` instance type if your AWS account provides [free-tier](http://aws.amazon.com/free/) access.
<% elsif environment == 'azure' %>
AZURE
<% end %>

<% end %>

Test Kitchen can manage more than one instance at a time to enable you to test your cookbooks on multiple platforms. The default configuration creates both an Ubuntu and a CentOS virtual machine. Since we want only <%= platform[:name] %>, the `platforms` sections contains only `<%= platform[:box] %>`. <% if windows? && environment == 'vagrant' %>(This is the name you provided for your box in the [previous part](/tutorials/local-development/windows/virtualbox/get-set-up#step3).)<% end %>

Here's how the <% fp '.kitchen.yml' %> file breaks down.

* **driver** specifies the software that manages the machine. We're using <%= environment_name %> ([complete list](https://docs.chef.io/config_yml_kitchen.html#drivers)). <% if environment == 'vagrant' %> The Vagrant driver works with VirtualBox by default.<% end %>
* **provisioner** specifies how to run Chef. We use `chef_zero` because it enables you to mimic a Chef server environment on your local machine. This allows us to work with node attributes and other Chef server features.
<% if windows? %>
* **transport** specifies how to execute commands remotely on the test instance. WinRM is the default transport on Windows; SSH is the default on all other operating systems.
<% end %>
* **platforms** specifies the target operating systems. We're targeting just one &ndash; <%= platform[:name] %> <%= platform[:version] %>.
* **verifier** specifies which application to use when running automated tests.  You'll learn more about automated testing in a future tutorial.
* **suites** specifies what we want to apply to the virtual environment. You can have more than one suite. We define just one, named `default`. This is where we provide the run-list, which defines which recipes to run and in the order to run them. Our run-list contains one recipe &ndash; our `<%= cookbook %>` cookbook's default recipe.

<% if current_page.parent.parent.data.platform_id != 'windows' %>
Recall that when Test Kitchen runs, it downloads the base virtual machine image, called a _box_, if the image does not already exist locally. Test Kitchen can [infer the location](https://github.com/test-kitchen/kitchen-vagrant#-default-configuration) for a set number of common configurations. For these common configurations, Test Kitchen downloads the [Bento](http://chef.github.io/bento/) box from [HashiCorp Atlas](https://atlas.hashicorp.com/bento/). Bento is a Chef project that provides Vagrant boxes for many common platforms. In this example, `<%= platform[:box] %>` is the same as specifying `bento/<%= platform[:box] %>`.
<% end %>

The [Chef documentation](http://docs.chef.io/config_yml_kitchen.html) explains the structure of the <% fp '.kitchen.yml' %> file in greater detail, and also explains more about the available settings.

[END_BOX]

[START_BOX]

## 3. Create the Test Kitchen instance

Now you'll provision a virtual machine to serve as your test environment. This is the `kitchen create` step in our workflow.

<img src="/assets/images/misc/local_dev_workflow1.png" style="box-shadow: none;" alt=""/>

We often call the set of virtual environments that's created by Test Kitchen simply a _kitchen_.

From the <% fp "~/learn-chef/cookbooks/#{cookbook}" %> directory, run `kitchen list` to see what's in the kitchen.

<% command_snippet(page: current_page, path: "create-#{cookbook}-#{environment}/kitchen-list-#{cookbook}-#{environment}-1") %>

Our kitchen includes just one instance &ndash; <%= platform[:article] %> <%= platform[:name] %> <%= platform[:version] %> virtual machine that's configured to run the `default` suite. The `Last Action` column shows that the virtual machine is not yet created.

Create the instance now by running `kitchen create`.

<% command_snippet(page: current_page, path: "create-#{cookbook}-#{environment}/kitchen-create-#{cookbook}-#{environment}-1") %>

[COMMENT] If you need to destroy your instance before you complete this tutorial, run `kitchen destroy`. You can later run `kitchen create` to pick back up where you left off.

<% if environment == 'vagrant' %>

[WINDOWS] [Due to an issue with newer versions of Vagrant](https://github.com/mitchellh/vagrant/issues/6852), if you're using a Windows workstation and the command fails with a blank error message, [you may need to install the Microsoft Visual C++ 2010 SP1 Redistributable Package](https://www.microsoft.com/en-us/download/details.aspx?id=8328). Then try the command again.

This command will take longer the first time you run it because Vagrant needs to download the base image, or box. After the base box is downloaded, `kitchen create` will complete much more quickly.

<% end %>

Now run `kitchen list` again.

<% command_snippet(page: current_page, path: "create-#{cookbook}-#{environment}/kitchen-list-#{cookbook}-#{environment}-2") %>

The `Last Action` column now shows that the virtual machine has been created.

[END_BOX]

[START_BOX]

## 4. Apply the <%= cookbook_escaped %> cookbook to your Test Kitchen instance

Now run `kitchen converge` to apply the cookbook to the <%= platform[:name] %> virtual machine.

<img src="/assets/images/misc/local_dev_workflow2.png" style="box-shadow: none;" alt=""/>

<% command_snippet(page: current_page, path: "apply-#{cookbook}-#{environment}/kitchen-converge-#{cookbook}-#{environment}-1") %>

[TIP] We use the term _converge_ to describe the process of bringing a system closer to its desired state. When you see the word converge, think _test and repair_.

Test Kitchen runs `chef-client` on the instance. When the `chef-client` run completes successfully, Test Kitchen exits with exit code `0`. Run the following to check the exit code.

<% command_snippet(page: current_page, path: "apply-#{cookbook}-#{environment}/echo-money-#{cookbook}-#{environment}-1") %>

If you receive a result other than `0`, fix the errors that were reported. Then run `kitchen converge` to apply the changes and again check the exit code.

Run `kitchen list` to see the latest status.

<% command_snippet(page: current_page, path: "apply-#{cookbook}-#{environment}/kitchen-list-#{cookbook}-#{environment}-3") %>

`kitchen converge` takes longer the first time you run it on a new instance because Test Kitchen needs to install the Chef tools. Run `kitchen converge` a second time to see how much faster it is.

<% command_snippet(page: current_page, path: "apply-#{cookbook}-#{environment}/kitchen-converge-#{cookbook}-#{environment}-2") %>

This run was faster not only because the instance already had the Chef tools installed, but also because it was already in the desired state, so Chef had no work to do.

[END_BOX]

[START_BOX]

## 5. Verify that your Test Kitchen instance is configured as expected

The next step in the Test Kitchen workflow is to verify the configuration.

<img src="/assets/images/misc/local_dev_workflow3_4.png" style="box-shadow: none;" alt=""/>

In practice, you typically write automated tests that verify whether your instance is configured as you expect. Having automated tests enables you to quickly verify that your configuration works as you add features to your cookbook. In fact, many Chef users take a _test-driven_ approach, where you write your tests first before you write any Chef code.

You'll learn more about automated testing in a future tutorial. For now, let's verify the configuration manually. Recall that the `<%= cookbook %>` cookbook configures <%= platform[:webserver] %> and sets the home page to display "hello world". An easy way to verify this is to log into your test instance and run ``<%= platform[:verify_command] %>``.

The [kitchen login](https://docs.chef.io/ctl_kitchen.html#kitchen-login) command is the most common way to access your test instance. This command creates <%= platform[:transport] %> connection into your instance and enables you to explore your test instance and verify its configuration.

Because you only want to run `<%= platform[:verify_command] %>`, you can run [kitchen exec](https://docs.chef.io/ctl_kitchen.html#kitchen-exec) to run a single command.

Run the following command to verify the contents of your web server's home page.

<% command_snippet(page: current_page, path: "verify-#{cookbook}-#{environment}/kitchen-exec-#{cookbook}-#{environment}-1") %>

You see that the web page contains "hello world" as expected.

<% if environment == 'vagrant' %>

[COMMENT] When you use the Vagrant driver, you can also assign a static IP address to your instance. This enables you to verify the configuration externally, such as from your workstation's web browser. You'll do so in the next tutorial.

<% end %>

[END_BOX]

[START_BOX]

## 6. Delete the Test Kitchen instance

We're all done with our virtual machine, so now run the `kitchen destroy` command to delete it.

<img src="/assets/images/misc/local_dev_workflow5.png" style="box-shadow: none;" alt=""/>

<% command_snippet(page: current_page, path: "delete-#{cookbook}-#{environment}/kitchen-destroy-#{cookbook}-#{environment}-1") %>

Run `kitchen list` and you'll see that the `Last Action` column shows that the virtual machine no longer exists.

<% command_snippet(page: current_page, path: "delete-#{cookbook}-#{environment}/kitchen-list-#{cookbook}-#{environment}-4") %>

[END_BOX]

<% next_page(current_page) do %>

Next, you'll see how Test Kitchen can help you diagnose and resolve failures _before_ your changes reach production.

<% end %>
