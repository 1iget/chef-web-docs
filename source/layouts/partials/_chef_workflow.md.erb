A typical Chef setup is comprised of three elements &ndash; your workstation, a Chef server, and nodes.

<img src="/assets/images/networks/workstation-server-node.png" style="width: 100%; box-shadow: none;" alt="Your workstation, a Chef server, and nodes" />

Chef server acts as a central repository for your Chef code as well as for information about every node it manages.

A node is any computer that is managed by a Chef server.

In practice, you use Chef to manage your servers remotely, typically from a Windows, Mac OS, or Linux workstation. Although you're configuring <%= server_name %> in this tutorial, your workstation can be any OS you choose.

The normal Chef workflow starts from your workstation. There you use the [Chef Development Kit](https://downloads.chef.io/chef-dk/), or Chef DK, to write and verify your configuration policy by writing Chef code.

From there, you upload your Chef code to the Chef server and then run [Chef client](https://downloads.chef.io/chef-client/) on your node. Your node downloads the latest code from the Chef server and runs that code to bring your node's configuration up to date. You might set up your node to check in periodically with the Chef server or update your node on demand when your configuration policy changes.

In this tutorial, we'll break from the normal Chef workflow to get a feel for how Chef works. You'll bring up <%= %w(a e i o u).include?(server_name[0].downcase) ? 'an' : 'a' %> <%= server_name %> instance, install the Chef DK on that server, and write and apply a basic configuration policy. The Chef DK provides everything that's needed to write Chef code and apply it all from the same system.