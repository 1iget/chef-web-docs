---
title: 'Resolve a failed chef-client run'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Summary and what's next, partial: next}
time_to_complete: 30 minutes
show_disqus: false
---
In the last part, you bootstrapped nodes to your demo environment's Chef server. You also learned how push jobs enable you to run `chef-client` on all nodes that share a common run-list.

In this part, you'll use Chef Automate to detect a failed `chef-client` run. You'll use Chef Automate to investigate the failure, remedy the failure, and then verify that `chef-client` succeeds.

Here's what you'll do:

1. [Modify the awesome\_customers_delivery cookbook to fail](#step1)
1. [Upload the awesome\_customers_delivery cookbook to Chef server](#step2)
1. [Run chef-client on your nodes](#step3)
1. [Investigate the failure](#step4)
1. [Resolve the failure](#step5)
1. [Restore your local environment](#step6)

[START_BOX]

## 1. Modify the awesome\_customers_delivery cookbook to fail

Here you'll modify the `awesome_customers_delivery` cookbook to fail so that you can see the failure in the web interface.

First, ensure you're in the <% fp 'awesome_customers_delivery' %> directory.

```ps
# C:\Users\Administrator
$ cd C:\Users\Administrator\cookbooks\awesome_customers_delivery
```

Next, open a text editor. The Windows workstation comes with [Atom](https://atom.io). An easy way to open Atom is from your PowerShell session, like this.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ atom .
```

Next, modify your cookbook's default recipe, <% fp 'recipes\default.rb' %>, like this.

```ruby
# C:\Users\Administrator\cookbooks\awesome_customers_delivery\recipes\default.rb
raise 'A fatal error has occurred.' if node.name == 'acceptance'

include_recipe 'awesome_customers_delivery::package_cache'
include_recipe 'awesome_customers_delivery::firewall'
include_recipe 'awesome_customers_delivery::user'
include_recipe 'awesome_customers_delivery::web'
```

This example [raises an exception](http://ruby-doc.org/core-2.1.1/Exception.html) to cause the `chef-client` run to fail if the node's name is "acceptance". In practice, you wouldn't likely write code that does this. We use this example to illustrate an error condition that occurs in a specific environment.

You should always [update your cookbook's version metadata](/manage-a-web-app/rhel/updating-your-nodes-configuration#updateyourcookbook39sversionmetadata) to ensure that each version is tied to a specific set of functionality.

Update the `version` field in your your cookbook's metadata file, <% fp 'metadata.rb' %>,  to `0.1.1`, making the entire file look like this.

```ruby
# C:\Users\Administrator\cookbooks\awesome_customers_delivery\metadata.rb
name 'awesome_customers_delivery'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures awesome_customers_delivery'
long_description 'Installs/Configures awesome_customers_delivery'
version '0.1.1'

depends 'chef-sugar'
depends 'firewall', '~> 2.5'
depends 'httpd', '~> 0.4'
```

[END_BOX]

[START_BOX]

## 2. Upload the awesome\_customers_delivery cookbook to Chef server

In this step, you upload your updated cookbook to the Chef server.

First, run `berks update` to update the dependency tree. You want the dependency tree to include version 0.1.1 of the `awesome_customers_delivery` cookbook.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ berks update
Resolving cookbook dependencies...
Fetching 'awesome_customers_delivery' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Using awesome_customers_delivery (0.1.1) from source at .
Using chef-sugar (3.3.0)
Using firewall (2.5.2)
Using httpd (0.4.4)
Using compat_resource (12.10.6)
```

Now upload your updated cookbook to Chef server.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ berks upload --no-ssl-verify
Uploaded awesome_customers_delivery (0.1.1) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Skipping chef-sugar (3.3.0) (frozen)
Skipping compat_resource (12.10.6) (frozen)
Skipping firewall (2.5.2) (frozen)
Skipping httpd (0.4.4) (frozen)
```

[END_BOX]

[START_BOX]

## 3. Run chef-client on your nodes

As you did in the previous part, use push jobs to run `chef-client` on each node that includes the  `awesome_customers_delivery` cookbook's default recipe in its run-list.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife job start 'chef-client' --search 'recipe:awesome_customers_delivery'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6a59a297886aace19d78da
.Running (1/4 in progress) ...
...Complete.
command:     chef-client
created_at:  Wed, 06 Jul 2016 00:43:30 GMT
id:          9a1f1e1d7e6a59a297886aace19d78da
nodes:
  failed:    acceptance
  succeeded:
    delivered
    rehearsal
    union
run_timeout: 3600
status:      complete
updated_at:  Wed, 06 Jul 2016 00:43:34 GMT
```

Note from the output that `chef-client` failed on the `acceptance` node, and succeeded on the other 3 nodes.

[END_BOX]

[START_BOX]

## 4. Investigate the failure

From Google Chrome, refresh the web interface. You see that out of 4 nodes, 3 succeeded and 1 failed its last `chef-client` run.

![](automate/vis-failed-run-summary.png)

You already understand the failure because you made the change, uploaded the cookbook to Chef server, and triggered `chef-client` to run. But say `chef-client` ran as part of some automated process. How would you know what caused the failure?

To understand the failure, first click **Failed Nodes** to filter the list to only those nodes that recently failed. Then click **acceptance** to see additional details.

![](automate/vis-dashboard-filter-failed-acceptance.png)

From the details page, click **view error log**.

![](automate/vis-acceptance-details-summary.png)

You see the error message "A fatal error has occurred."

![](automate/vis-acceptance-failed-run-log.png)

You also see the backtrace, which lists which function calls are active and can help you understand how your program got where it is. You see that the error occurred on line 6 of the default recipe, <% fp 'default.rb' %>. You can verify the source code location in your text editor.

![](automate/atom-raise-exception.png)

[END_BOX]

[START_BOX]

## 5. Resolve the failure

In practice, you and your team would decide the appropriate way to fix the error. The fix might involve modifying the `awesome_customers_delivery` cookbook to remedy the error, verifying the fix locally,  uploading the cookbook to Chef server, and running `chef-client` on your nodes.

[SKILL] After you complete this tutorial, you can [learn more](/local-development) about how to develop and test your cookbooks in temporary environments using Test Kitchen.

In this case, let's simply roll back the `awesome_customers_delivery` cookbook to the previous version, 0.1.0. One way to do that is to remove version 0.1.1 from the Chef server.

Run this command to list what cookbook versions are available.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife cookbook show awesome_customers_delivery
awesome_customers_delivery   0.1.1  0.1.0
```

Now run this command to delete version 0.1.1 from the Chef server.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife cookbook delete awesome_customers_delivery 0.1.1 --yes
Deleted cookbook[awesome_customers_delivery version 0.1.1]
```

Verify that only version 0.1.0 exists on the Chef server.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife cookbook show awesome_customers_delivery
awesome_customers_delivery   0.1.0
```

Rerun `chef-client` on your nodes.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife job start 'chef-client' --search 'recipe:awesome_customers_delivery'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6ac3b3bad56440d894a9ff
.Running (1/4 in progress) ...
...Complete.
command:     chef-client
created_at:  Wed, 06 Jul 2016 01:01:20 GMT
id:          9a1f1e1d7e6ac3b3bad56440d894a9ff
nodes:
  succeeded:
    acceptance
    delivered
    rehearsal
    union
run_timeout: 3600
status:      complete
updated_at:  Wed, 06 Jul 2016 01:01:23 GMT
```

You see that `chef-client` succeeded on all 4 nodes. As a final verification step, return to the web interface. From the **Nodes** tab, you see that all nodes report successful `chef-client` runs.

![](automate/vis-dashboard-4-nodes-resolved.png)

[END_BOX]

[START_BOX]

## 6. Restore your local environment

The next tutorial also uses the `awesome_customers_delivery` cookbook. So let's restore it to its original state.

Run `git status`. You see the changes you made to the default recipe and the metadata file are modfifed, but not staged for commit.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   metadata.rb
        modified:   recipes/default.rb

no changes added to commit (use "git add" and/or "git commit -a")
```

Run this command to revert the `master` branch back to its original state.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ git reset --hard HEAD
HEAD is now at c0d2305 Merge pull request #2 from learn-chef/tp/rename1
```

Run `git status` to verify that your branch is clean.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
```

If you're new to Git, you may also verify that the default recipe and metadata file are restored. From Atom, you'll see that both files contain their original contents.

Now run `berks update` to ensure your dependency tree is up to date. You want the dependency tree to include version 0.1.0 of the `awesome_customers_delivery` cookbook.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ berks update
Resolving cookbook dependencies...
Fetching 'awesome_customers_delivery' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Using awesome_customers_delivery (0.1.0) from source at .
Using chef-sugar (3.3.0)
Using compat_resource (12.10.6)
Using firewall (2.5.2)
Using httpd (0.4.4)
```

[END_BOX]
