---
title: 'Bootstrap nodes in your demo environment'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
show_disqus: false
---
Recall that the demo environment [comes with infrastructure](/automate/install/install-chef-automate#step1) that can receive build artifacts produced from Chef Automate's build pipeline. These environments are labeled **Acceptance**, **Union**, **Rehearsal**, and **Delivered** in this diagram.

<img src="/assets/images/delivery/delivery-scenario-architecture.svg" style="width: 100%; box-shadow: none;" alt="An example Chef Automate installation" />

[PRODNOTE] Use updated diagram from install tutorial. Perhaps highlight only AURD.

In this part, you'll bootstrap these environments to your demo environment's Chef server. During the bootstrap process, each node will run the `awesome_customers_delivery` cookbook to configure the Customers web application.

You'll also learn how to use _push jobs_ to trigger `chef-client` to run on all 4 of your nodes at the same time. The bootstrap process prepares your environment for the next tutorial, [Deploy a cookbook with Chef Automate](/automate/deploy-cookbook/), where you'll walk through delivering the web application cookbook using Chef Automate's workflow feature.

Here's what you'll do:

1. [Set up your Windows workstation](#step1)
1. [Clone the awesome\_customers_delivery repo from GitHub](#step2)
1. [Upload the awesome\_customers_delivery cookbook to the Chef server](#step3)
1. [Bootstrap your nodes](#step4)
1. [Use push jobs to run chef-client a second time](#step5)

[START_BOX]

## 1. Set up your Windows workstation

If you closed the connection to the demo environment's Windows workstation, [connect to it now](/automate/install/install-chef-automate#step5) and [open up PowerShell](/automate/install/install-chef-automate#step6).

Next, open Google Chrome. Then navigate to [https://delivery.chordata.biz/insights/](https://delivery.chordata.biz/insights/). A bookmark is also available from the **Demo** folder in Google Chrome.

[PRODNOTE] Be on the lookout for the URL and "Insights" logo to change.

[PRODNOTE] Where/when should we introduce what this chordata.biz stuff is all about? Likely in the install tutorial...

Notice that the dashboard is empty. During the bootstrap process, your nodes You'll populate the dashboard shortly.

[PRODNOTE] Show screenshot.

Next, from PowerShell, create a working directory.

```ps
# ~
$ mkdir ~\delivery-demo

    Directory: C:\Users\Administrator


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----         6/23/2016   9:58 AM            delivery-demo

```

[PRODNOTE] Perhaps change "delivery-demo" to "cookbooks". Global.

[END_BOX]

[START_BOX]

## 2. Clone the awesome\_customers_delivery repo from GitHub

[PRODNOTE] Should we rename `awesome_customers_delivery` to something else? Perhaps `awesome_customers_workflow` or `awesome_customers_automate`? The reason it's not just `awesome_customers` is beacuse there are other versions of this project used in different tutorials - the name serves as a way to distinguish them.

In this step, you clone the repository from GitHub to your local repository directory. The GitHub repository contains the `awesome_customers_delivery` cookbook, which configures the Customers web application.

From a PowerShell prompt, move to your working directory, <% fp '~\delivery-demo' %>.

```ps
#
$ cd ~\delivery-demo
```

Clone the `awesome_customers_delivery` repo from GitHub.

```ps
# ~\delivery-demo
$ git clone https://github.com/learn-chef/awesome_customers_delivery.git
Cloning into 'awesome_customers_delivery'...
remote: Counting objects: 110, done.
remote: Total 110 (delta 0), reused 0 (delta 0), pack-reused 110
Receiving objects: 100% (110/110), 51.34 KiB | 0 bytes/s, done.
Resolving deltas: 100% (23/23), done.
Checking connectivity... done.
```

Remember, for the tutorial, you're cloning an existing Git project to obtain starter code. You can configure Chef Automate to connect directly with your existing Git projects, import code from another source control system, or create a new repository.

[COMMENT] The workstation comes with [posh-git](https://github.com/dahlbyk/posh-git), which integrates Git with PowerShell. posh-git provides useful features such as tab completion and the ability to show the current branch and the state of files.

[END_BOX]

[START_BOX]

## 3. Upload the awesome\_customers_delivery cookbook to the Chef server

Move to the <% fp 'awesome_customers_delivery' %> directory.

```ps
# ~\delivery-demo
$ cd awesome_customers_delivery
```

```ps
# ~\delivery-demo\awesome_customers_delivery
$ berks install
Resolving cookbook dependencies...
Fetching 'awesome_customers_delivery' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Using awesome_customers_delivery (0.1.0) from source at .
Installing chef-sugar (3.3.0)
Installing compat_resource (12.10.6)
Installing firewall (2.4.0)
Installing httpd (0.3.6)
```

```ps
# ~\delivery-demo\awesome_customers_delivery
$ berks upload --no-ssl-verify
Uploaded awesome_customers_delivery (0.1.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded chef-sugar (3.3.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded compat_resource (12.10.6) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded firewall (2.4.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded httpd (0.3.6) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
```

[TODO: Go back to visibility dashboard and see the cookbook upload events]

[END_BOX]

[START_BOX]

## 4. Bootstrap your nodes

Recall that the demo environment comes with infrastructure for each of the Acceptance, Union, Rehearsal, and Delivered stages. Each infrastructure environment is an Ubuntu 14.04 server.

You'll learn more about the purpose of each of these infrastructure environments in the next tutorial. For now, you'll bootstrap each instance to the Chef server and run the `awesome_customers_delivery` cookbook.

The Windows workstation comes preconfigured to communicate to your nodes [using fictitious hostnames](/automate/install/managing-your-aws-instances#connectingtoyourawsinstancesfromthewindowsworkstation). The hostnames for the infrastructure environments are:

| Stage      | Hostname |
|-----------:|----------|
| Acceptance | acceptance.chordata.biz |
| Union      | union.chordata.biz |
| Rehearsal  | rehearsal.chordata.biz |
| Delivered  | delivered.chordata.biz |

Start by bootstrapping the infrastructure environment for the Acceptance stage, like this.

```ps
# ~\delivery-demo\awesome_customers_delivery
$ knife bootstrap acceptance.chordata.biz --ssh-user ubuntu --sudo --node-name acceptance --run-list 'recipe[awesome_customers_delivery]' --yes
Creating new client for acceptance
Creating new node for acceptance
Connecting to acceptance.chordata.biz
acceptance.chordata.biz -----> Existing Chef installation detected
acceptance.chordata.biz Starting the first Chef Client run...
acceptance.chordata.biz Starting Chef Client, version 12.11.18
acceptance.chordata.biz resolving cookbooks for run list: ["awesome_customers_delivery"]
acceptance.chordata.biz Synchronizing Cookbooks:
acceptance.chordata.biz   - awesome_customers_delivery (0.1.0)
acceptance.chordata.biz   - chef-sugar (3.3.0)
acceptance.chordata.biz   - firewall (2.4.0)
acceptance.chordata.biz   - httpd (0.3.6)
acceptance.chordata.biz   - compat_resource (12.10.6)
acceptance.chordata.biz Installing Cookbook Gems:
acceptance.chordata.biz Compiling Cookbooks...
acceptance.chordata.biz Recipe: chef-sugar::default
acceptance.chordata.biz   * chef_gem[chef-sugar] action install
acceptance.chordata.biz     - install version 3.3.0 of package chef-sugar
acceptance.chordata.biz   Converging 16 resources
acceptance.chordata.biz Recipe: awesome_customers_delivery::package_cache
acceptance.chordata.biz   * apt_update[Update the apt cache daily] action periodic
acceptance.chordata.biz     - update new lists of packages
[...]
acceptance.chordata.biz Recipe: awesome_customers_delivery::web
acceptance.chordata.biz   * httpd_service_debian_sysvinit[customers] action restart
acceptance.chordata.biz     * service[apache2-customers] action restart
acceptance.chordata.biz       - restart service service[apache2-customers]
acceptance.chordata.biz
acceptance.chordata.biz
acceptance.chordata.biz Running handlers:
acceptance.chordata.biz Running handlers complete
acceptance.chordata.biz Chef Client finished, 108/187 resources updated in 43 seconds
```

[TODO: Go back to visibility dashboard and see that the node appears]

Next, repeat the bootstrap process for the Union, Rehearsal, and Delivered environments.

```ps
# ~\delivery-demo\awesome_customers_delivery
$ knife bootstrap union.chordata.biz --ssh-user ubuntu --sudo --node-name union --run-list 'recipe[awesome_customers_delivery]' --yes
$ knife bootstrap rehearsal.chordata.biz --ssh-user ubuntu --sudo --node-name rehearsal --run-list 'recipe[awesome_customers_delivery]' --yes
$ knife bootstrap delivered.chordata.biz --ssh-user ubuntu --sudo --node-name delivered --run-list 'recipe[awesome_customers_delivery]' --yes
```

[TODO: Go back to visibility dashboard and see that the nodes appear]


[END_BOX]

[START_BOX]

## 5. Use push jobs to run chef-client a second time

The bootstrap process performed an initial `chef-client` run on your nodes. In previous tutorials, such as [Manage a node](/manage-a-node/rhel/update-your-nodes-configuration#step3), you ran `knife ssh` from your workstation to run `chef-client` remotely on your node.

Here's an example of how to run `knife ssh` to run `chef-client` on the `acceptance` node.

```ps
# C:\Users\Administrator
$ knife ssh acceptance.chordata.biz 'sudo chef-client' --manual-list
acceptance.chordata.biz Starting Chef Client, version 12.11.18
acceptance.chordata.biz resolving cookbooks for run list: ["awesome_customers_delivery"]
acceptance.chordata.biz Synchronizing Cookbooks:
acceptance.chordata.biz   - chef-sugar (3.3.0)
acceptance.chordata.biz   - awesome_customers_delivery (0.1.0)
acceptance.chordata.biz   - firewall (2.4.0)
acceptance.chordata.biz   - httpd (0.3.6)
acceptance.chordata.biz   - compat_resource (12.10.6)
acceptance.chordata.biz Installing Cookbook Gems:
acceptance.chordata.biz Compiling Cookbooks...
[...]
acceptance.chordata.biz * file[/etc/default/ufw-chef.rules] action create (up to date)
acceptance.chordata.biz  (up to date)
acceptance.chordata.biz
acceptance.chordata.biz Running handlers:
acceptance.chordata.biz Running handlers complete
acceptance.chordata.biz Chef Client finished, 3/181 resources updated in 02 seconds
```

There are other ways to run `chef-client` on a node. You can log in directly over SSH and run `sudo chef-client`. Or you can run `chef-client` on a regular interval as a daemon, cron job, service, or scheduled task.

You can also use [push jobs](https://docs.chef.io/push_jobs.html) to run `chef-client`. A push job is a way to submit a task to a node, such as running `chef-client`. Chef push jobs client runs on a node and listens for job requests.

Chef push jobs server runs on the Chef server. The push jobs server sends a heartbeat message to tell nodes that the push jobs server is available. The push jobs server in turn listens for heartbeat messages from each push jobs client to know which clients are available to accept jobs.

To know which nodes are available to accept jobs, you run the `knife node status` command.

```ps
# C:\Users\Administrator
$ knife node status
acceptance      available
delivered       available
rehearsal       available
union   available
```

This feature is provided by the [knife push](https://github.com/chef/knife-push) plugin, and comes preinstalled on the Windows workstation.

To start a job on a node, you run the [knife job start](https://docs.chef.io/push_jobs.html#job-start) command. To specify the node to submit the job to, you either specify the node name or search criteria.

To illustrate the use of search criteria, run the `knife node show acceptance` command to display information about the `acceptance` node.

```ps
# C:\Users\Administrator
$ knife node show acceptance
Node Name:   acceptance
Environment: _default
FQDN:        acceptance.chordata.biz
IP:          52.41.234.114
Run List:    recipe[awesome_customers_delivery]
Roles:
Recipes:     awesome_customers_delivery, awesome_customers_delivery::default, awesome_customers_delivery::package_cache,
 awesome_customers_delivery::firewall, firewall::default, chef-sugar::default, awesome_customers_delivery::user, awesome
_customers_delivery::web
Platform:    ubuntu 14.04
Tags:
```

You see that it contains the `awesome_customers_delivery` cookbook's default recipe in its run-list. You can use this fact to run `chef-client` on each node that contains the `awesome_customers_delivery` cookbook in its run-list.

(TODO: All 4)

```ps
# C:\Users\Administrator
$ knife job start 'chef-client' --search 'recipe:awesome_customers_delivery'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 2192bd742017a63aeaa32f6e02cea17e
.Running (1/1 in progress) ...
...Complete.
command:     chef-client
created_at:  Fri, 24 Jun 2016 14:40:32 GMT
id:          2192bd742017a63aeaa32f6e02cea17e
nodes:
  succeeded: acceptance
run_timeout: 3600
status:      complete
updated_at:  Fri, 24 Jun 2016 14:40:35 GMT
```

* How --search won't make the build nodes run.
* Search is an important part of the pipeline you'll see in the next tutorial.

(TODO: Then see from the web ui how it just ran...)

[END_BOX]
