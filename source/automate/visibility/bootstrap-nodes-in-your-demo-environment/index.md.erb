---
title: 'Bootstrap nodes in your environment'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 30 minutes
show_disqus: false
---
Recall that the preconfigured environment [comes with infrastructure](/automate/install/install-chef-automate#step1) that can receive build artifacts produced from Chef Automate's build pipeline. These environments are labeled **Acceptance**, **Union**, **Rehearsal**, and **Delivered** in this diagram.

<img src="/assets/images/automate/automate-scenario-architecture.svg" style="width: 100%; box-shadow: none;" alt="An example Chef Automate installation" />

In this part, you'll bootstrap these environments to your Chef server. During the bootstrap process, each node will run the `awesome_customers_delivery` cookbook to configure the Customers web application.

You'll also learn how to use _push jobs_ to trigger `chef-client` to run on all 4 of your nodes at the same time. The bootstrap process prepares your environment for the next tutorial, [Deploy a cookbook with Chef Automate](/automate/deploy-cookbook/), where you'll walk through delivering the web application cookbook using Chef Automate's workflow features.

Here's what you'll do:

1. [Set up your Windows workstation](#step1)
1. [Clone the awesome\_customers_delivery repo from GitHub](#step2)
1. [Upload the awesome\_customers_delivery cookbook to the Chef server](#step3)
1. [Bootstrap your nodes](#step4)
1. [Use push jobs to run chef-client a second time](#step5)

[START_BOX]

## 1. Set up your Windows workstation

If you closed the connection to the Windows workstation, [connect to it now](/automate/install/install-chef-automate#step5) and [open up PowerShell](/automate/install/install-chef-automate#step6) through the Chef DK desktop shortcut.

Next, open **Google Chrome**. Then navigate to [https://delivery.chordata.biz/insights/](https://delivery.chordata.biz/insights/). Or choose the **Chef Insights** bookmark from the **Demo** folder in Google Chrome.

The username is `admin` and the password is `eval4me!`.

[COMMENT] The Windows workstation is preconfigured to accept Chef Automate's self-signed SSL certificate. In a production environment, you would typically set up a certificate chain that's rooted by a trusted certificate authority (CA) to enable the Chef Automate server to verify its authenticity.

Each system in the preconfigured environment comes with the fictitious **chordata.biz** domain as part of its hostname. The setup [uses hosts files](/automate/install/managing-your-aws-instances#connectingtoyourawsinstancesfromthewindowsworkstation) to associate each server's private IP address with its hostname.

Notice that the dashboard is empty. During the bootstrap process, your nodes will do an initial `chef-client` run and report data back to Chef Automate. You'll do that shortly.

![](automate/vis-dashboard-0-nodes.png)

Next, from PowerShell, move to the <% fp 'C:\Users\Administrator' %> directory and then create a working directory.

```ps
# C:\Users\Administrator\Desktop
$ cd C:\Users\Administrator
```

```ps
# C:\Users\Administrator
$ mkdir cookbooks

    Directory: C:\Users\Administrator


Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----          7/5/2016   7:56 PM            cookbooks
```

[END_BOX]

[START_BOX]

## 2. Clone the awesome\_customers_delivery repo from GitHub

In this step, you clone the repository from GitHub to your local repository directory. The GitHub repository contains the `awesome_customers_delivery` cookbook, which configures the Customers web application.

From a PowerShell prompt, move to your working directory, <% fp 'C:\Users\Administrator\cookbooks' %>.

```ps
# C:\Users\Administrator
$ cd cookbooks
```

Clone the `awesome_customers_delivery` repo from GitHub.

```ps
# C:\Users\Administrator\cookbooks
$ git clone https://github.com/learn-chef/awesome_customers_delivery.git
Cloning into 'awesome_customers_delivery'...
remote: Counting objects: 110, done.
remote: Total 110 (delta 0), reused 0 (delta 0), pack-reused 110
Receiving objects: 100% (110/110), 51.34 KiB | 0 bytes/s, done.
Resolving deltas: 100% (23/23), done.
Checking connectivity... done.
```

<% accordion('powershell-paste', 'How to paste commands into your PowerShell window') do %>

<% markdown do %>

Although we believe typing in the code and commands is a great way to learn, you can also copy the text from the code and terminal boxes and paste them into your session.

Select your PowerShell window and then right click your mouse to paste the contents of your clipboard into your session. If the title of your PowerShell window starts with the text "Select Administrator", first hit escape to exit text selection mode.

You can also use the **Edit** <i class="fa fa-caret-right"></i> **Paste** option from the <img style="box-shadow:none; margin:0; display:inline;" src="/assets/images/delivery/powershell_icon.png"/> menu located in the upper-left of your PowerShell window.

![](/assets/images/delivery/powershell_menu_paste.png)

<% end %>

<% end %>
<br />

Remember, for the tutorial, you're cloning an existing Git project to obtain starter code. You can configure Chef Automate to connect directly with your existing Git projects, import code from another source control system, or create a new repository.

[COMMENT] The workstation comes with [posh-git](https://github.com/dahlbyk/posh-git), which integrates Git with PowerShell. posh-git provides useful features such as tab completion and the ability to show the current branch and the state of files.

[END_BOX]

[START_BOX]

## 3. Upload the awesome\_customers_delivery cookbook to the Chef server

In this step, you upload the `awesome_customers_delivery` cookbook to the Chef server. If you've gone through the [Develop a web app cookbook](/manage-a-web-app/rhel/run-your-web-application-on-a-node#step2) tutorial, you'll be familiar with this process.

First, move to the <% fp 'awesome_customers_delivery' %> directory.

```ps
# C:\Users\Administrator\cookbooks
$ cd awesome_customers_delivery
```

Run `berks install` to download the cookbooks that `awesome_customers_delivery` depends on from Chef Supermarket.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ berks install
Resolving cookbook dependencies...
Fetching 'awesome_customers_delivery' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Using awesome_customers_delivery (0.1.0) from source at .
Installing chef-sugar (3.3.0)
Installing compat_resource (12.10.6)
Installing firewall (2.5.2)
Installing httpd (0.4.4)
```

Next, upload `awesome_customers_delivery` and its dependencies to Chef server.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ berks upload --no-ssl-verify
Uploaded awesome_customers_delivery (0.1.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded chef-sugar (3.3.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded compat_resource (12.10.6) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded firewall (2.5.2) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded httpd (0.4.4) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
```

As a verification step, run `knife cookbook list` to see your cookbooks.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife cookbook list
awesome_customers_delivery   0.1.0
chef-sugar                   3.3.0
compat_resource              12.10.6
firewall                     2.5.2
httpd                        0.4.4
```

[COMMENT] For now, you don't need to know the details of how the `awesome_customers_delivery` or its dependent cookbooks work. What's important is that your Chef server has everything it needs to configure the Customers web application on Ubuntu.

[END_BOX]

[START_BOX]

## 4. Bootstrap your nodes

Recall that the preconfigured environment comes with infrastructure for each of the Acceptance, Union, Rehearsal, and Delivered stages. Each infrastructure environment is an Ubuntu 14.04 server.

You'll learn more about the purpose of each of these infrastructure environments in the next tutorial. For now, you'll bootstrap each instance to the Chef server and run the `awesome_customers_delivery` cookbook.

The Windows workstation comes preconfigured to communicate to your nodes [using fictitious hostnames](/automate/install/managing-your-aws-instances#connectingtoyourawsinstancesfromthewindowsworkstation). The hostnames for the infrastructure environments are:

| Environment | Hostname |
|-----------:|----------|
| Acceptance | acceptance.chordata.biz |
| Union      | union.chordata.biz |
| Rehearsal  | rehearsal.chordata.biz |
| Delivered  | delivered.chordata.biz |

Start by bootstrapping the infrastructure environment for the Acceptance stage, like this.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife bootstrap acceptance.chordata.biz --ssh-user ubuntu --sudo --node-name acceptance --run-list 'recipe[awesome_customers_delivery]' --yes
Creating new client for acceptance
Creating new node for acceptance
Connecting to acceptance.chordata.biz
acceptance.chordata.biz -----> Existing Chef installation detected
acceptance.chordata.biz Starting the first Chef Client run...
acceptance.chordata.biz Starting Chef Client, version 12.12.13
acceptance.chordata.biz resolving cookbooks for run list: ["awesome_customers_delivery"]
acceptance.chordata.biz Synchronizing Cookbooks:
acceptance.chordata.biz   - awesome_customers_delivery (0.1.0)
acceptance.chordata.biz   - chef-sugar (3.3.0)
acceptance.chordata.biz   - firewall (2.5.2)
acceptance.chordata.biz   - httpd (0.4.4)
acceptance.chordata.biz   - compat_resource (12.10.6)
acceptance.chordata.biz Installing Cookbook Gems:
acceptance.chordata.biz Compiling Cookbooks...
acceptance.chordata.biz Recipe: chef-sugar::default
acceptance.chordata.biz   * chef_gem[chef-sugar] action install
acceptance.chordata.biz     - install version 3.3.0 of package chef-sugar
acceptance.chordata.biz   Converging 16 resources
acceptance.chordata.biz Recipe: awesome_customers_delivery::package_cache
acceptance.chordata.biz   * apt_update[Update the apt cache daily] action periodic
acceptance.chordata.biz     - update new lists of packages
[...]
acceptance.chordata.biz Recipe: awesome_customers_delivery::web
acceptance.chordata.biz   * httpd_service_debian_sysvinit[customers] action restart
acceptance.chordata.biz     * service[apache2-customers] action restart
acceptance.chordata.biz       - restart service service[apache2-customers]
acceptance.chordata.biz
acceptance.chordata.biz
acceptance.chordata.biz Running handlers:
acceptance.chordata.biz Running handlers complete
acceptance.chordata.biz Chef Client finished, 108/187 resources updated in 43 seconds
```

The `--node-name` argument specifies `acceptance` as the name of the node.

The output shows that `chef-client` succeeded. To verify the configuration, open a new tab in Google Chrome and navigate to [http://acceptance.chordata.biz](http://acceptance.chordata.biz). You'll see this:

<img style="max-width:100%;" src="/assets/images/automate/acceptance-customers-verify.png"/>

Now go back to the Chef Automate web interface and refresh the page. You see that the `acceptance` node checked in and its initial `chef-client` run completed successfully.

![](automate/vis-dashboard-1-nodes.png)

Next, repeat the bootstrap process for the Union, Rehearsal, and Delivered environments. For brevity, sample output is omitted.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife bootstrap union.chordata.biz --ssh-user ubuntu --sudo --node-name union --run-list 'recipe[awesome_customers_delivery]' --yes
$ knife bootstrap rehearsal.chordata.biz --ssh-user ubuntu --sudo --node-name rehearsal --run-list 'recipe[awesome_customers_delivery]' --yes
$ knife bootstrap delivered.chordata.biz --ssh-user ubuntu --sudo --node-name delivered --run-list 'recipe[awesome_customers_delivery]' --yes
```

Each commmand specifies a node name that corresponds to that node's function.

If you like, you can verify each node's configuration from your web browser as each node completes its initial `chef-client` run.

| Environment | URL |
|-----------:|----------|
| Union      | [http://union.chordata.biz](http://union.chordata.biz)|
| Rehearsal  | [http://rehearsal.chordata.biz](http://rehearsal.chordata.biz) |
| Delivered  | [http://delivered.chordata.biz](http://delivered.chordata.biz) |

Refresh the Chef Automate dashboard. You see that 4 nodes now appear.

![](automate/vis-dashboard-4-nodes.png)

[COMMENT] [Learn more about how nodes report data to Chef Automate.](https://docs.chef.io/ingest_data_chef_automate.html)

[END_BOX]

[START_BOX]

## 5. Use push jobs to run chef-client a second time

The bootstrap process performed an initial `chef-client` run on your nodes. In previous tutorials, such as [Manage a node](/tutorials/manage-a-node/rhel/hosted/update-your-nodes-configuration#step4), you ran `knife ssh` from your workstation to trigger `chef-client` remotely on your node.

Here's an example that uses `knife ssh` to run `chef-client` on the `acceptance` node. (You don't need to run this command.)

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife ssh acceptance.chordata.biz 'sudo chef-client' --manual-list
acceptance.chordata.biz Starting Chef Client, version 12.12.13
acceptance.chordata.biz resolving cookbooks for run list: ["awesome_customers_delivery"]
acceptance.chordata.biz Synchronizing Cookbooks:
acceptance.chordata.biz   - chef-sugar (3.3.0)
acceptance.chordata.biz   - awesome_customers_delivery (0.1.0)
acceptance.chordata.biz   - firewall (2.5.2)
acceptance.chordata.biz   - httpd (0.4.4)
acceptance.chordata.biz   - compat_resource (12.10.6)
acceptance.chordata.biz Installing Cookbook Gems:
acceptance.chordata.biz Compiling Cookbooks...
[...]
acceptance.chordata.biz * file[/etc/default/ufw-chef.rules] action create (up to date)
acceptance.chordata.biz  (up to date)
acceptance.chordata.biz
acceptance.chordata.biz Running handlers:
acceptance.chordata.biz Running handlers complete
acceptance.chordata.biz Chef Client finished, 3/181 resources updated in 02 seconds
```

There are other ways to run `chef-client` on a node. You can log in directly over SSH and run `sudo chef-client`. Or you can run `chef-client` on a regular interval as a daemon, cron job, service, or scheduled task.

You can also use [push jobs](https://docs.chef.io/push_jobs.html) to run `chef-client`. A push job is a way to submit a task to a node, such as running `chef-client`. Chef push jobs client runs on a node and listens for job requests.

Chef push jobs server runs on the Chef server. The push jobs server sends a heartbeat message to tell nodes that the push jobs server is available. The push jobs server in turn listens for heartbeat messages from each push jobs client to know which clients are available to accept jobs.

To know which nodes are available to accept jobs, you run the `knife node status` command.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife node status
acceptance      available
build-node-1    available
build-node-2    available
delivered       available
rehearsal       available
union   available
```

You see `acceptance`, `union`, `rehearsal`, and `delivered` are available to receive push jobs. `build-node-1` and `build-node-2` are build nodes that come with the preconfigured environment. You'll use these nodes to run build tasks in the next tutorial.

The ability to see which nodes are available is provided by the [knife push](https://github.com/chef/knife-push) plugin, which comes preinstalled on the Windows workstation.

To start a job on a node, you run the [knife job start](https://docs.chef.io/push_jobs.html#job-start) command. To specify the node to submit the job to, you either specify the node name or search criteria.

To illustrate the use of search criteria, run the `knife node show acceptance` command to display information about the `acceptance` node.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife node show acceptance
Node Name:   acceptance
Environment: _default
FQDN:        acceptance.chordata.biz
IP:          52.41.231.8
Run List:    recipe[awesome_customers_delivery]
Roles:
Recipes:     awesome_customers_delivery, awesome_customers_delivery::default, awesome_customers_delivery::package_cache,
 awesome_customers_delivery::firewall, firewall::default, chef-sugar::default, awesome_customers_delivery::user, awesome
_customers_delivery::web
Platform:    ubuntu 14.04
Tags:
```

The output shows the `awesome_customers_delivery` cookbook's default recipe in the run-list. You can use this fact to run `chef-client` on each node that contains the `awesome_customers_delivery` cookbook in its run-list.

Run this command to use push jobs to trigger `chef-client` to run on every node that contains the `awesome_customers_delivery` cookbook's default recipe in its run-list.

```ps
# C:\Users\Administrator\cookbooks\awesome_customers_delivery
$ knife job start 'chef-client' --search 'recipe:awesome_customers_delivery'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6ae8647396d92a542f2da4
.Running (1/4 in progress) ...
.Complete.
command:     chef-client
created_at:  Tue, 05 Jul 2016 20:41:28 GMT
id:          9a1f1e1d7e6ae8647396d92a542f2da4
nodes:
  succeeded:
    acceptance
    delivered
    rehearsal
    union
run_timeout: 3600
status:      complete
updated_at:  Tue, 05 Jul 2016 20:41:32 GMT
```

The push job ran `chef-client` on the `acceptance`, `union`, `rehearsal`, and `delivered` nodes. It did not run `chef-client` on the build nodes because those nodes do not contain the `awesome_customers_delivery` cookbook in their run-lists.

Refresh the dashboard and you'll see that each of your nodes reported a recent check-in.

![](automate/vis-dashboard-4-nodes-recent-checkin.png)

You don't need to use push jobs to use Chef Automate to monitor your infrastructure. However, push jobs and search play an important role when you use Chef Automate to deliver cookbooks. You'll see why in the next tutorial.

[END_BOX]
