---
title: 'Prepare your nodes for the Chef Automate pipeline'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
show_disqus: false
---
Recall that each Chef Automate stage breaks down into phases, and that a build cookbook defines the work required to perform each phase. In the next part, you'll create the Chef Automate project and learn more about the `delivery-truck` cookbook, which helps perform many common tasks that are needed to deliver Chef cookbooks.

Using the `delivery-truck` cookbook requires coordination between the Chef server and the infrastructure environments (nodes). In this part, you'll prepare your nodes so that they are ready to run build artifacts (here, the `awesome_customers_delivery` cookbook) during the Acceptance, Union, Rehearsal, and Delivered stages.

Here's what you'll do:

1. [Understand the role of Chef environments](#step1)
1. [Create the Chef environments](#step2)
1. [Associate each Chef environment with an infrastructure environment](#step3)
1. [Add the delivery-base cookbook to each node's run-list](#step4)
1. [Verify the setup through the Chef server web interface](#step5)
1. [Run push jobs to trigger chef-client on your nodes](#step6)

[START_BOX]

## 1. Understand the role of Chef environments

Each of the Acceptance, Union, Rehearsal, and Delivered stages deploys build artifacts, or the pipeline's output, to some environment. For our project, this means running the `awesome_customers_delivery` cookbook on the `acceptance`, `union`, `rehearsal`, and `delivered` nodes.

Recall from the previous tutorial that _push jobs_ enable you to submit tasks, such as running `chef-client`, to your nodes. For example, you ran this command to run `chef-client` on each node that includes the `awesome_customers_delivery` cookbook in its run-list.

```ps
# C:\Users\Administrator
$ knife job start 'chef-client' --search 'recipe:awesome_customers_delivery'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6ae8647396d92a542f2da4
.Running (1/4 in progress) ...
.Complete.
command:     chef-client
created_at:  Tue, 05 Jul 2016 20:41:28 GMT
id:          9a1f1e1d7e6ae8647396d92a542f2da4
nodes:
  succeeded:
    acceptance
    delivered
    rehearsal
    union
run_timeout: 3600
status:      complete
updated_at:  Tue, 05 Jul 2016 20:41:32 GMT
```

This example runs `chef-client` on all 4 nodes. To run `chef-client` in the runtime environment only for a given stage, for example, Acceptance, you would need to provide additional search criteria to the `--search` option.

Chef Automate uses [environments](https://docs.chef.io/environments.html) to provide this additional search criteria. A Chef environment enables you to control how a node behaves given that node's role in the overall lifecycle of your application or service. Think of an environment as a way to tag a node for a specific purpose.

Every pipeline phase is associated with the name of a Chef environment. For the Acceptance stage, the name comes in this form:

<code class='placeholder'>\<STAGE></code>-<code class='placeholder'>\<ENTERPRISE></code>-<code class='placeholder'>\<ORGANIZATION></code>-<code class='placeholder'>\<PROJECT></code>-<code class='placeholder'>\<PIPELINE></code>

For this project, the environment name during the Acceptance stage is:

**acceptance-mammalia-diprotodontia-awesome\_customers_delivery-master**

where:

* **acceptance** is the stage.
* **mammalia** is the enterprise.
* **diprotodontia** is the organization.
* **awesome\_customers\_delivery** is the project.
* **master** is the pipeline.

Similar logic applies to the Union, Rehearsal, and Delivered stages. However, because the Union, Rehearsal, and Delivered stages can be shared among multiple projects, their environment names are fixed to be `union`, `rehearsal`, and `delivered`, respectively.

Because the push job's search mechanism finds all nodes that are associated with the given Chef environment, you can associate multiple nodes with a given stage, for example, to run a cookbook that configures a multi-tiered application.

[END_BOX]

[START_BOX]

## 2. Create the Chef environments

The first step is to create the Chef environments. Run the following [knife environment create](https://docs.chef.io/knife_environment.html#create) command to create the environment for the Acceptance stage.

```ps
# C:\Users\Administrator
$ knife environment create acceptance-mammalia-diprotodontia-awesome_customers_delivery-master -d "The acceptance environment"
Created acceptance-mammalia-diprotodontia-awesome_customers_delivery-master
```

Now repeat the process for the remaining stages.

```ps
# C:\Users\Administrator
$ knife environment create union -d "The union environment"
$ knife environment create rehearsal -d "The rehearsal environment"
$ knife environment create delivered -d "The delivered environment"
```

Run `knife environment list` to verify the environments were properly created.

```ps
# C:\Users\Administrator
$ knife environment list
_default
acceptance-mammalia-diprotodontia-awesome_customers_delivery-master
delivered
rehearsal
union
```

[END_BOX]

[START_BOX]

## 3. Associate each Chef environment with an infrastructure environment

Next, run this command to connect the infrastructure environment, or node, for the Acceptance stage with its corresponding Chef environment.

```ps
# C:\Users\Administrator
$ knife node environment_set acceptance acceptance-mammalia-diprotodontia-awesome_customers_delivery-master
acceptance:
  chef_environment: acceptance-mammalia-diprotodontia-awesome_customers_delivery-master
```

Now repeat the process for the remaining nodes.

```ps
# C:\Users\Administrator
$ knife node environment_set union union
$ knife node environment_set rehearsal rehearsal
$ knife node environment_set delivered delivered
```

[END_BOX]

[START_BOX]

## 4. Add the delivery-base cookbook to each node's run-list

The `delivery-truck` cookbook relies on push jobs to run `chef-client` on nodes as the pipeline runs. It therefore requires each node to include the [push-jobs](https://github.com/chef-cookbooks/push-jobs) cookbook in its run-list.

The recommended way to include the `push-jobs` cookbook is to include the [delivery-base](https://github.com/chef-cookbooks/delivery-base) cookbook. The `delivery-base` cookbook includes the `push-jobs` cookbook and sets additional node attributes that enable nodes to work with Chef Automate.

One way to set up the `push-jobs` cookbook to run on your `acceptance`, `union`, `rehearsal`, and `delivered` nodes is to clone the `delivery-base` cookbook repo from GitHub, upload it and its dependencies to the Chef server, and then add it to each of your node's run-list.

To begin, move to the <% fp 'C:\Users\Administrator\cookbooks' %> directory.

```ps
# C:\Users\Administrator
$ cd C:\Users\Administrator\cookbooks
```

Next, clone the `delivery-base` repo from GitHub.

```ps
# C:\Users\Administrator\cookbooks
$ git clone https://github.com/chef-cookbooks/delivery-base
Cloning into 'delivery-base'...
remote: Counting objects: 103, done.
Receiving objects:  48% (50/103)    0 (delta 0), pack-reused 103
Receiving objects: 100% (103/103), 16.25 KiB | 0 bytes/s, done.
Resolving deltas: 100% (27/27), done.
Checking connectivity... done.
```

Next, move to the <% fp 'delivery-base' %> directory.

```ps
# C:\Users\Administrator\cookbooks
$ cd .\delivery-base\
```

Next, run `berks install` to download the cookbooks that `delivery-base` depends on.

```ps
# C:\Users\Administrator\cookbooks\delivery-base
$ berks install
Resolving cookbook dependencies...
Fetching 'delivery-base' from source at .
Fetching cookbook index from https://supermarket.chef.io...
Using chef-ingredient (0.19.0)
Using chef_handler (1.4.0)
Using compat_resource (12.10.6)
Using delivery-base (0.2.2) from source at .
Using packagecloud (0.2.3)
Using push-jobs (3.2.0)
Using runit (1.7.8)
Using windows (1.44.0)
```

Next, run `berks upload` to upload `delivery-base` and its dependencies to Chef server.

```ps
# C:\Users\Administrator\cookbooks\delivery-base
$ berks upload --no-ssl-verify
Uploaded chef-ingredient (0.19.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded chef_handler (1.4.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Skipping compat_resource (12.10.6) (frozen)
Uploaded delivery-base (0.2.2) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded packagecloud (0.2.3) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded push-jobs (3.2.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded runit (1.7.8) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
Uploaded windows (1.44.0) to: 'https://chef-server.chordata.biz:443/organizations/diprotodontia'
```

Finally, add `delivery-base` to each node's run-list. Start with the `acceptance` node.

```ps
# C:\Users\Administrator\cookbooks\delivery-base
$ knife node run_list add acceptance 'recipe[delivery-base]'
acceptance:
  run_list:
    recipe[awesome_customers_delivery]
    recipe[delivery-base]
```

Repeat the process for `union`, `rehearsal`, and `delivered`.

```ps
# C:\Users\Administrator\cookbooks\delivery-base
$ knife node run_list add union 'recipe[delivery-base]'
$ knife node run_list add rehearsal 'recipe[delivery-base]'
$ knife node run_list add delivered 'recipe[delivery-base]'
```

[END_BOX]

[START_BOX]

## 5. Verify the setup through the Chef server web interface

The output from the `knife node environment_set` and `knife node run_list add` commands confirm that your nodes are configured with the proper Chef environments and run-lists. Although not required, let's log in to the Chef server web interface and see what's there as an extra verification step.

From Google Chrome, navigate to  [https://chef-server.chordata.biz/organizations/diprotodontia/nodes](https://chef-server.chordata.biz/organizations/diprotodontia/nodes). Or choose the **Chef Manage** bookmark from the **Demo** folder in Google Chrome.

Log in as the `delivery` user. The password is `delivery!`.

Click through each of the `acceptance`, `union`, `rehearsal`, and `delivered` nodes. You'll see that each is associated with the required environment and that each has `awesome_customers_delivery` and `delivery-base` in its run-list.

<img style="max-width:100%;" src="/assets/images/automate/chef_server_acceptance_node_details.png"/>

Next, from the **Policy** tab, select **Environments** from the left. You'll see these environments.

<img style="max-width:100%;" src="/assets/images/automate/chef_server_acceptance_environment.png"/>

[END_BOX]

[START_BOX]

## 6. Run push jobs to trigger chef-client on your nodes

With the Chef environments and push jobs set up, your nodes are almost ready to receive push jobs when the pipeline runs. You need to run `chef-client` with each node's updated run-list so that the search index includes all the required information.

The directory you're in doesn't matter, but move back to your home directory since you're finished with the `delivery-base` cookbook.

```ps
# C:\Users\Administrator\cookbooks\delivery-base
$ cd C:\Users\Administrator
```

Run the `knife job start` command you ran previously to run `chef-client` on your `acceptance`, `union`, `rehearsal`, and `delivered` nodes.

```ps
# C:\Users\Administrator
$ knife job start 'chef-client' --search 'recipes:awesome_customers_delivery'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6a7c1a736274c0b02e8113
.Running (1/4 in progress) ...
.........Complete.
command:     chef-client
created_at:  Wed, 06 Jul 2016 16:34:10 GMT
id:          9a1f1e1d7e6a7c1a736274c0b02e8113
nodes:
  succeeded:
    acceptance
    delivered
    rehearsal
    union
run_timeout: 3600
status:      complete
updated_at:  Wed, 06 Jul 2016 16:34:21 GMT
```

Next, run this command to run `chef-client` only on your `acceptance` node. This command resembles the one that your build cookbook will use later. Doing so helps you see the process and verify that the build cookbook will be able to successfully run `chef-client` when the pipeline runs.

```ps
# C:\Users\Administrator
$ knife job start 'chef-client' --search '(recipes:awesome_customers_delivery*) AND chef_environment:acceptance-mammalia-diprotodontia-awesome_customers_delivery-master AND recipes:*push-jobs*'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6abf8c0a4042a358d3e026
.Running (1/1 in progress) ...
.....Complete.
command:     chef-client
created_at:  Wed, 06 Jul 2016 16:34:57 GMT
id:          9a1f1e1d7e6abf8c0a4042a358d3e026
nodes:
  succeeded: acceptance
run_timeout: 3600
status:      complete
updated_at:  Wed, 06 Jul 2016 16:35:03 GMT
```

As an optional exercise, you can run `chef-client` on your `union`, `rehearsal`, and `delivered` nodes. Here's an example for `union`.

```ps
# C:\Users\Administrator
$ knife job start 'chef-client' --search '(recipes:awesome_customers_delivery*) AND chef_environment:union AND recipes:*push-jobs*'
WARNING: Falling back to Push Jobs v1 mode.
Started.  Job ID: 9a1f1e1d7e6a02d989230b8816ec27b2
.Running (1/1 in progress) ...
....Complete.
command:     chef-client
created_at:  Wed, 06 Jul 2016 16:48:01 GMT
id:          9a1f1e1d7e6a02d989230b8816ec27b2
nodes:
  succeeded: union
run_timeout: 3600
status:      complete
updated_at:  Wed, 06 Jul 2016 16:48:07 GMT
```

[END_BOX]
