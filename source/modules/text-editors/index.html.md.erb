---
id: text-editors
title: 'Text editors and other tools'
description: "A powerful text editor is an important asset when it comes to working with Chef. Learn what to look for in a text editor and we'll also talk about a few other tools along the way."
time_to_complete: 10 minutes
quiz_path: quizzes/text-editors.yml
headings: [
  { label: 'Examining a typical workflow', href: '#examiningatypicalworkflow' },
  { label: 'Atom', href: '#atom' },
  { label: 'Visual Studio Code', href: '#visualstudiocode' }
]
---
As you begin to treat your infrastructure as code, you'll need tools to create and maintain that code. Code is text and one of your most valuable tools is your text editor. All text editors provide some set of features and it's difficult to know in advance if the editor you've chosen is the best one for you. To put things in context, lets look at a typical workflow for modifying a cookbook and break it down into a few steps. As we do, we'll point out some tools that can reduce complexity, increase accuracy and make us more efficient.

## Getting ready
First, you navigate to a directory that contains a cookbook. You check to see if there are any changes that have been committed. You request the latest changes from a central source. You check out your branch and merge the changes. You execute the test suite to ensure that all tests still pass.

What you've just done ensures that you have the right environment before you start work on your cookbook. There are a number of tools you can use that will help.

#### Terminal/Prompt and Source Control Command Line Tools

A terminal or command prompt is an incredibly versatile tool that allows you to navigate to the directory and see the contents. Most source control software provides at least a command line interface. However, command line tools require that you know at least a few of the basic commands to get started. Here are some resources to help you learn more.

> SEE: Module - Systems Administrator Essentials

> SEE: Module - Version Control

#### Graphical File Explorer and Source Control Tools

Most of us have computers with a windowing environment that can represent directories and files. Many source control packages also offer a graphical interface. Here's an example.

* [git](https://git-scm.com/downloads/guis/)

#### Integrated Development Environment (IDE)

A third choice is an IDE. An IDE has a graphical interface, allows you to navigate the file system and often has automatic source control integration or provides the same support through plugins. Here are some examples.

* [RubyMine](https://www.jetbrains.com/ruby/)
* [Aptana](http://www.aptana.com/products/studio3.html)

## Writing code

Now that you're set up, you're ready to start writing code. You use a text editor to open a specification file and write some InSpec expectations. You execute the test suite to see the new tests fail. You open a recipe file and write code for some Chef resources. You execute the test suite again to see the new tests succeed. You run linting tools and address any issues they find. You save and commit the changes to source control. Now let's talk about the tools you used.

### Evaluating a text editor
Most of the activity in the last step centered around the text editor, so it's obviously important. Here are a few suggestions about what to look for.

#### Display a project/folder view
A helpful editor lets you open a parent directory and see the entire project structure. This allows you to move quickly between the tests you write in one file and the Chef resources that are in another file.

#### Support syntax highlighting
The difficulty in writing code is that you have to know how to use the syntax. Mistakes can easily go undetected as you create the code and part of the problem is that it can be difficult to read. An editor that understands the syntax of the language you are writing in can colorize different components to make it easier to identify keywords, constants, comments, and expressions.

#### Display line numbers

When you test your code you receive feedback from your test suite. When tests fail, they often display a stack trace. This stack trace shows the final piece of code that was executed before the error occurred. The relevant file name and line number often accompany that error. Line numbers make it easier to find the issue in the code so it's important that the text editor display them.

#### Support code snippets

As you write tests and the resources that match those tests, you'll find that you start repeating yourself. While the details of a resource or a test differ from one project to another, there are similarities that appear over and over again.

Editors should let you define code snippets. A code snippet is a small, reusable piece of code that you can incorporate into your larger file. Code snippets can also help you when you're just learning a language because they can suggest common properties and default values.

#### Integrate with external tools

An editor should let you integrate external tools for faster feedback. In particular, linting tools are very useful.

Linting tools look for potential errors and ensure that the code meets the conventions defined by the community. When the linting tool runs, it evaluates the code against that standard and displays the results.

It's possible for a linting tool to evaluate the code after every line you complete. This gives you fast  feedback and can help you learn what the community standards are. An editor should be able to integrate with this type of tool so that you can immediately see and address any issues as you write your code.

## Rinse and repeat
As you write your code, you find that you are constantly  opening and editing files, running tests, linting your code, and committing your changes. You'd like to perform these repetitive actions as easily as possible.

#### Simplify routine operations
Because writing code involves so many repetitive actions, you want to be able to quickly find and open files, jump to particular line numbers, search for pieces of text and compare files side-by-side.

An editor should support these and other common operations. The essential operations should be available through keyboard shortcuts, which can save you a lot of time.

## Evaluating editors.
In the following sections we'll take a look at two editors and talk about their features and how they can be customized to best suit your workflow.

### Atom

Atom satisfies many of the requirements that we talked about. You can open an entire directory as a project, either through the graphical user interface or with shell commands that you can install. Files and directories appear along the left-hand side of the code window in a tree view that can be toggled in and out of view.

By default, each text file displays line numbers along the right-hand side and there is syntax language support for a number of programming languages. It does not, by default, provide support for Chef, InSpec or Habitat. However, Atom allows you to install packages.

#### Packages

There are packages for Atom that can add syntax highlighting, commands, and code snippets for different languages. The following packages have been developed by the Chef community.

* [Chef Language Package](https://atom.io/packages/language-chef)

You write Chef code in a Domain Specific Language (DSL) that is a subset of Ruby. This package identifies files within a cookbook as Chef files. It automatically applies grammar rules for syntax highlighting and code snippet support for defining resources. Once you install the package, you should change an opened file's language to Chef.

* [RSpec Language Package](https://atom.io/packages/language-rspec)

Tests written in ChefSpec use a DSL called RSpec, which is built on top of Ruby. This package provides grammar rules for syntax highlighting and code snippets that help define example groups, examples, and expectations. Once you install the package, you should change an opened file's language to RSpec.

* [InSpec Language Package](https://atom.io/packages/language-inspec)

Tests written in InSpec use Ruby on top of the RSpec DSL. This package provides grammar rules for syntax highlighting and code snippets that help define controls and resource examples. Once you install the package, you should change an opened file's language to InSpec.

* [Habitat Language Package](https://atom.io/packages/language-habitat)

Habitat plans are written with shell scripts. This package provides grammar rules for syntax highlighting and code snippets for callback functions and variable definitions. Once you install the package, you should change an opened file's language to Habitat.

* [Linter](https://atom.io/packages/linter)

This package is a prerequisite for the Foodcritic and Rubocop linters. It installs visual elements that display lint violations as soon as they are discovered.

* [Foodcritic Linter](https://atom.io/packages/linter-foodcritic)

Foodcritic evaluates Chef cookbooks for errors and convention violations. This package provides the linter interface with the issues it discovers. It requires the Linter package.

* [Rubocop Linter](https://atom.io/packages/linter-rubocop)

Rubocop evaluates your Chef cookbooks for errors and convention violations. This package provides the linter interface with the issues it discovers. It requires the Linter package.

### Atom Keyboard Shortcuts

As you develop your cookbooks, you'll find that you repeat some operations over and over again. Evaluating your workflow to learn how to perform these operations faster can increase your accuracy and efficiency. Let's talk about a few  useful shortcuts that will help you.

> To help describe shortcut keys in a platform agnostic way we'll use `META` to represent either the `CTRL` key on Linux/Windows or the `CMD` key on macOS.

* Opening a directory or file - `$ atom FILEPATH`

Within Atom, you can use `META`+`O`. However, if you install the shell commands, Atom provides a much easier way to open a file or directory with `atom FILEPATH`.

* Saving a file - `META`+`S`

Saving a file before executing tests or committing code happens often enough that a shortcut is very useful.

* Finding a file - `META`+`T` or `META`+`P`

This shortcut launches a fuzzy file search. You can type just a few letters to identify the file you want. However, this may not be helpful when several files share similar names. Instead, specify what's unique to that file, such as portions of the file path.

* Splitting the Window - `META` + `K` followed by either the `left`, `right`, `up`, or `down` arrow.

You often want to display the contents of several files side by side. With Atom, you can think of the current file as being displayed in a pane. This pane can be split multiple times so that you can display exactly what you want in your editor window.

* Command Palette - `META` + `SHIFT` + `P`

Atom implements all actions through commands but not all of them are available through the graphical menus or shortcut keys. All available commands are stored in the command palette. This shortcut launches the palette where you can search for any command you want. However, if you find yourself repeatedly invoking the same command through the command palette it may be more efficient to add a keybinding to this command.

## Visual Studio Code

Visual Studio Code (VS Code) is another text editor that satisfies many of the requirements we talked about.

It can open an entire directory as a project, either with a graphical user interface or with shell commands that you can install. It represents the files and directories along the left-hand side of the code window in a tree view that can be toggled between the project, search, version control, debugging tools, and an extension manager.

By default, each text file displays line numbers along the right-hand side and there is syntax language support for a number of programming languages. It does not, by default, provide support for Chef, InSpec or Habitat. However, VS Code allows you to install extensions.

### Extensions

An extension in VS Code can add syntax highlighting, commands, and code snippets. The following extensions were developed by the Chef community.

* [Chef Extension](https://marketplace.visualstudio.com/items?itemName=Pendrica.Chef)

You write Chef code in a Domain Specific Language (DSL) that is a subset of Ruby. This extension identifies files within a cookbook as Chef files. It automatically applies grammar rules for syntax highlighting and code snippet support for defining resources. It also supports Foodcritic and Rubocop linting. Once you install the extension, you should change an opened file's language to Chef.

* [InSpec Language Package](https://marketplace.visualstudio.com/items?itemName=burtlo.inspec)

Tests written in InSpec use Ruby on top of the RSpec DSL. This extension provides grammar rules for syntax highlighting and code snippets that help define controls and resource examples. Once you install the package, you should change an opened file's language to InSpec.

### VS Code Keyboard Shortcuts

As you develop your cookbooks, you'll find that you repeat some operations over and over again. Evaluating your workflow to learn how to perform these operations faster can increase your accuracy and efficiency. Let's talk about a few  useful shortcuts that will help you.

> To help describe shortcut keys in a platform agnostic way we will use `META` to represent either the `CTRL` key on Linux/Windows or the `CMD` key on macOS.

* Opening a directory or file - `$ code FILEPATH`

Within the editor you can use `META`+`O`. However, if you install the shell commands, VS Code provides a much easier way to open a file or directory with `code FILEPATH`.

* Saving a file - `META`+`S`

Saving a file before executing tests or committing code happens often enough that a shortcut is very useful.

* Finding a file - `META`+`P`

This shortcut launches a fuzzy file search. You can type just a few letters to identify the file you want. However, this may not be helpful when several files share similar names. Instead, specify what's unique to that file, such as portions of the file path.

* Splitting the Window - `META` + `\`

You often want to display the contents of several files side by side. With VS Code, you can think of the current file as being displayed in a pane. This pane can be split multiple times so that you can display exactly what you want in your editor window.

* Command Palette - `META` + `SHIFT` + `P`

VS Code implements all actions through commands but not all of them are available through the graphical menus or shortcut keys. All available commands are stored in the command palette. This shortcut launches the palette where you can search for any command you want. However, if you find yourself repeatedly invoking the same command through the command palette it may be more efficient to add a keybinding (`META`+`K` followed by `META`+`S`) to this command.
