In the previous part, you used `knife` to update your node's configuration. Many Chef users start out by using `knife` to update their servers' configuration on demand. You can then move to a continuous delivery system, such as Chef Automate, to release changes more often and with greater safety. A continuous delivery system might run `chef-client` on your nodes when an explicit change is made to your configuration policy, for example, when a change is committed to your version control system.

In addition to running `chef-client` when your configuration policy changes, you may also want to run `chef-client` periodically. One reason is to help ensure that your servers are free from _configuration drift_.

In this part, you'll use the `chef-client` cookbook to set up your node to run `chef-client` periodically. During the process, you'll learn how to:

* use community cookbooks from Chef Supermarket.
* use Berkshelf to resolve cookbook dependencies.
* use a _role_ to define your node's attributes and its run-list.

This is the final part of this tutorial, so you'll also learn how to optionally [clean up your environment](#howtocleanupyourenvironment) by removing your cookbook and node from the Chef server.

[COMMENT] See the [Deploy infrastructure changes with Chef Automate](/modules/deploy-infrastructure/) tutorial to learn more about using Chef Automate's pipline and workflow capabilities.

[START_BOX]

## 1. Get the chef-client cookbook

In this part, you'll get the `chef-client` cookbook from Chef Supermarket and upload the `chef-client` cookbook and its dependent cookbooks to your Chef server.

There are multiple ways to set up `chef-client` to run on a regular interval. On Linux nodes, you might use a daemon, cron job, or service. On Windows, you might use a scheduled task.

You can of course manually set `chef-client` to run on a regular interval. Another way is to use the [chef-client](https://supermarket.chef.io/cookbooks/chef-client/) cookbook from [Chef Supermarket](https://supermarket.chef.io/). Earlier in this tutorial, you obtained starter code from GitHub. Chef Supermarket is also a place for the community to share cookbooks. You'll work more with community cookbooks in later tutorials.

On Linux, the `chef-client` cookbook sets up `chef-client` to run as a service. On Windows, this cookbook sets up `chef-client` to run as a scheduled task. One benefit to using the `chef-client` cookbook is that it works on multiple platforms.

There are several ways to obtain cookbooks from Chef Supermarket. One way is to use the [knife supermarket](https://docs.chef.io/plugin_knife_supermarket.html) command. However, the `chef-client` cookbook has _dependencies_ on other cookbooks (you'll learn more about cookbook dependencies in a later tutorial), and `knife supermarket` does not resolve these dependencies for you.

[Berkshelf](http://berkshelf.com) is a tool that helps you resolve cookbook dependencies. Berkshelf can retrieve the cookbooks that your cookbook depends on and can upload your cookbooks to your Chef server. Berkshelf comes with the Chef DK.

To get started, first ensure you're in the <% fp '~/learn-chef' %> directory.

<% command_snippet(page: current_page, path: 'get-chef-client-cookbook/cd-learn-chef-node1-centos-2', features: :stdin) %>

Next, you need to create a configuration file that tells Berkshelf which cookbooks you want and where they're located. From your <% fp '~/learn-chef' %> directory, create a file named <% fp 'Berksfile' %> and add these contents.

<% code_snippet(page: current_page, path: 'get-chef-client-cookbook/berksfile-learn_chef_httpd') %>

Chef provides a public Chef Supermarket site at [https://supermarket.chef.io](https://supermarket.chef.io/). You can also manage your own [private Chef Supermarket](https://docs.chef.io/supermarket.html#private-supermarket) server. Your <% fp 'Berksfile' %> specifies that you want the `chef-client` cookbook and to pull cookbooks from the public Chef Supermarket server.

The next step is to run `berks install` to download the `chef-client` cookbook and its dependencies.

<% command_snippet(page: current_page, path: 'get-chef-client-cookbook/berks-install-chef-client-node1-centos') %>

Berkshelf downloads the `chef-client` cookbook and its dependent cookbooks to the <% fp '~/.berkshelf/cookbooks' %> directory.

<% command_snippet(page: current_page, path: 'get-chef-client-cookbook/ls-dot-berkshelf-cookbooks-node1-centos') %>

Next, you need to upload the `chef-client` cookbook and its dependencies to your Chef server.

Previously, you ran `knife cookbook upload` to upload your `learn_chef_httpd` cookbook to the Chef server. Remember that the `chef-client` cookbook has dependencies on other cookbooks, so you need a way to upload everything.

You could run `knife cookbook upload` to manually upload each cookbook. An easier way is to run `berks upload`. Like `berks install`, `berks upload` handles dependencies for you.

<% if ['opsworks', 'virtualbox'].include?(current_page.parent.data.environment) %>

Run `berks upload` to upload the `chef-client` cookbook and its dependencies to Chef server. The syntax varies slightly between Windows and other operating systems. Here are a few examples.

**Linux and Mac OS X**

<% command_snippet(page: current_page, path: 'get-chef-client-cookbook/berks-upload-chef-client-node1-centos') %>

**Windows**

<% if current_page.parent.data.environment == 'opsworks' %>

```ps
# ~/learn-chef
$ $env:SSL_CERT_FILE='.chef/ca_certs/opsworks-cm-ca-2016-root.pem'
$ berks upload
Uploaded chef-client (7.0.0) to: 'https://test-xcdbs22xaaf3cmpz.gamma.opsworks-cm.io:443/organizations/default'
Uploaded compat_resource (12.16.2) to: 'https://test-xcdbs22xaaf3cmpz.gamma.opsworks-cm.io:443/organizations/default'
Uploaded cron (3.0.0) to: 'https://test-xcdbs22xaaf3cmpz.gamma.opsworks-cm.io:443/organizations/default'
Uploaded logrotate (2.1.0) to: 'https://test-xcdbs22xaaf3cmpz.gamma.opsworks-cm.io:443/organizations/default'
Uploaded ohai (4.2.2) to: 'https://test-xcdbs22xaaf3cmpz.gamma.opsworks-cm.io:443/organizations/default'
Uploaded windows (2.1.1) to: 'https://test-xcdbs22xaaf3cmpz.gamma.opsworks-cm.io:443/organizations/default'
```

<% elsif current_page.parent.data.environment == 'virtualbox' %>

```ps
# ~/learn-chef
$ $env:SSL_CERT_FILE='.chef/ca_certs/opsworks-cm-ca-2016-root.pem'
$ berks upload
Uploaded chef-client (7.0.0) to: 'https://chef-server.test:443/organizations/4thcoffee'
Uploaded compat_resource (12.16.2) to: 'https://chef-server.test:443/organizations/4thcoffee'
Uploaded cron (3.0.0) to: 'https://chef-server.test:443/organizations/4thcoffee'
Uploaded logrotate (2.1.0) to: 'https://chef-server.test:443/organizations/4thcoffee'
Uploaded ohai (4.2.2) to: 'https://chef-server.test:443/organizations/4thcoffee'
Uploaded windows (2.1.1) to: 'https://chef-server.test:443/organizations/4thcoffee'
```

<% end %>

The `SSL_CERT_FILE` environment variable tells Berkshelf the location of your Chef server's SSL certificate, which is used to ensure that the connection is trusted.

<% else %>

Run `berks upload` to upload the `chef-client` cookbook and its dependencies to Chef server.

<% command_snippet(page: current_page, path: 'get-chef-client-cookbook/berks-upload-chef-client-node1-centos') %>

<% end %>

<% if ['aws-marketplace', 'azure-marketplace', 'aws-automate'].include?(current_page.parent.data.environment) %>
Berkshelf requires a trusted SSL certificate in order to upload cookbooks. The `--no-ssl-verify` flag disables SSL verification, which is typically fine for testing purposes. Chef server comes with a self-signed SSL certificate. For production, you might use [a trusted SSL certificate](https://osxdominion.wordpress.com/2015/02/25/configuring-chef-server-12-to-use-trusted-ssl-certs/). The [documentation](http://docs.chef.io/server_security.html#ssl-protocols) describes how Chef server works with SSL certificates.

<% end %>

[END_BOX]

[START_BOX]

## 2. Create a role

Now that the `chef-client` cookbook is on your Chef server, you need to update your node's run-list to use it. You also need to specify how often to run `chef-client`. In this part, you'll use a _role_ to define both.

How often `chef-client` is run is controlled by two node attributes ([source code](https://github.com/chef-cookbooks/chef-client/blob/master/attributes/default.rb)):

* `node['chef_client']['interval']` &ndash; _interval_ specifies the number of seconds between `chef-client` runs. The default value is 1,800 (30 minutes).
* `node['chef_client']['splay']` &ndash; _splay_ specifies a maximum random number of seconds that is added to the interval. Splay helps balance the load on the Chef server by ensuring that many `chef-client` runs are not occurring at the same interval. The default value is 300 (5 minutes).

By default, `chef-client` will run every 30&mdash;35 minutes on your node. In practice, the values you choose depend on your requirements. For learning purposes, you'll specify an interval of 5 minutes (300 seconds) and a splay of 1 minute (60 seconds), causing your node to check in every 5&mdash;6 minutes.

To update your node's run-list, you could use the [knife node run_list set](https://docs.chef.io/knife_node.html#run-list-set) command. However, that does not set the appropriate node attributes.

To accomplish both tasks, you'll use a [role](https://docs.chef.io/roles.html). Roles enable you to focus on the _function_ your node performs collectively rather than each of its individual components (its run-list, node attributes, and so on). For example, you might have a _web server_ role, a _database_ role, or a _load balancer_ role. Here, you'll create a role named _web_ to define your node's function as a web server.

Roles are stored as objects on the Chef server. To create a role, you can use the [knife role create](https://docs.chef.io/knife_role.html#create) command. Another common way is to create a file (in JSON format) that describes your role and then run the [knife role from file](https://docs.chef.io/knife_role.html#from-file) command to upload that file to the Chef server. The advantage of creating a file is that you can store that file in a version control system such as Git.

First, ensure you have a directory named <% fp '~/learn-chef/roles' %>.

```bash
# ~/learn-chef
$ mkdir ~/learn-chef/roles
```

Now add the following to a file named <% fp '~/learn-chef/roles/web.json' %>.

<% code_snippet(page: current_page, path: 'create-a-role/web-role-rhel') %>

This file defines the _web_ role. It sets the required interval and splay attributes and sets the run-list to contain the `chef-client` cookbook as well as the `learn_chef_httpd` cookbook.

As a recommended practice, the run-list also contains the `chef-client::delete_validation` recipe ([source code](https://github.com/chef-cookbooks/chef-client/blob/master/recipes/delete_validation.rb)). This recipe deletes the [validation certificate](https://docs.chef.io/chef_private_keys.html#chef-validator) (for example, <% fp '/etc/chef/validation.pem' %>) from your node. This certificate is used during the bootstrap process to authorize the node to connect to the Chef server, and is no longer needed.

Next, run the following `knife role from file` command to upload your role to the Chef server.

<% command_snippet(page: current_page, path: 'create-a-role/knife-role-from-file-node1-centos', features: [:stdin, :stderr]) %>

As a verification step, you can run `knife role list` to view the roles on your Chef server.

<% command_snippet(page: current_page, path: 'create-a-role/knife-role-list-node1-centos') %>

You can also run `knife role show web` to view the role's details.

<% command_snippet(page: current_page, path: 'create-a-role/knife-role-show-web-node1-centos') %>

The final step is to set your node's run-list. Run the following `knife node run_list set` command to do that.

<% command_snippet(page: current_page, path: 'create-a-role/knife-node-run_list-set-node1-centos') %>

As a verification step, you can run the `knife node show` command to view your node's run-list.

<% command_snippet(page: current_page, path: 'create-a-role/knife-node-show-run_list-node1-centos') %>

You're now ready to run `chef-client` on your node.

[END_BOX]

[START_BOX]

## 3. Run chef-client

As before, run `knife ssh` to trigger `chef-client` to run on your node. This time, replace the search query `'name:node1-centos'` with `'role:web'`. If you had multiple nodes with the _web_ role, `chef-client` would run on each of them.

This example shows key-based authentication. <%= link_to("Choose the method you used earlier", current_page.previous_page.previous_page, :anchor => 'step4') %>.

<% command_snippet(page: current_page, path: 'run-chef-client/knife-ccr-node1-centos-4') %>

You can see from the output that the `chef-client` cookbook set up `chef-client` as a service on your node.

<% if ['aws-automate', 'opsworks'].include?(current_page.parent.data.environment) %>

Earlier, you examined your node's details in the Chef Automate web interface. Return to the Chef Automate dashboard, select **Nodes**, and then select your node. From the details page, you'll see over time that your node runs `chef-client` within each 5&mdash;6 minute interval.

![](manage-a-node/chef_automate_run_history_recurring.png)

<% else %>

You can run the [knife status](https://docs.chef.io/knife_status.html) command to display a brief summary of the nodes on your Chef server, including the time of the most recent successful `chef-client` run.

<% command_snippet(page: current_page, path: 'run-chef-client/knife-status-node1-centos') %>

Every 5&ndash;6 minutes you'll see that your node performed a recent check-in with the Chef server and ran `chef-client`.

<% end %>

[END_BOX]

[START_BOX]

## 4. Next steps

Now that `chef-client` is set up to run every 5&mdash;6 minutes, now's a great time to experiment with your node. Here are some ideas to start with.

* Repeat the steps where you make a change to the `learn_chef_httpd` cookbook, bump its version in the metadata, and upload your changes to Chef server. Even a small change to the home page template, <% fp 'index.html.erb' %>, is enough to practice the process. Watch your change appear in your web browser the next time `chef-client` runs.
* Manually log in to your node and stop the Apache service or delete the home page, <% fp '/var/www/html/index.html' %>. Refresh your browser window or run `curl` to see that your web server is down. What do you expect to happen the next time `chef-client` runs?
* Write a cookbook that configures a piece of software that you use. See if there are any cookbooks on [Chef Supermarket](https://supermarket.chef.io/) that you can use to get started.

If you're interested in managing your Chef server, check out the [knife opc](https://docs.chef.io/plugin_knife_opc.html
) command. `knife opc` enables you to manage organizations and users in Chef server from your workstation.

[END_BOX]

[START_BOX]

## How to clean up your environment

You can continue to experiment with your Chef server and your node. When you're done, you can perform these optional steps if you want to clean up your Chef server or you want to repeat the tutorial from the beginning.

[WARN] In practice, use caution when using the `--yes` argument. The `--yes` argument suppresses any prompts for confirmation before performing a destructive operation.

### Delete the node from the Chef server

As you experiment, it's a good idea to delete information about your node from the Chef server when you no longer need it. That way, your Chef server contains only relevant information. In practice, it's up to you whether to delete node information when you retire a production system from service.

From your workstation, run these commands to delete the data about your node from the Chef server.

<% command_snippet(workstation: 'ubuntu', path: "manage-a-node/rhel/#{current_page.parent.data.environment}/cleaning-up/cleaning-up/knife-node-delete-node1-centos") %>

<% command_snippet(workstation: 'ubuntu', path: "manage-a-node/rhel/#{current_page.parent.data.environment}/cleaning-up/cleaning-up/knife-client-delete-node1-centos") %>

Chef makes a distinction between the nodes that are being managed and the clients that are authorized to make API calls to the Chef server. Therefore, you need to run [knife node delete](https://docs.chef.io/knife_node.html#delete) to remove the node's metadata from the Chef server and [knife client delete](https://docs.chef.io/knife_client.html#delete) to delete the entry (including the public part of the RSA key pair) from the Chef server's API client list.

### Delete your cookbook from the Chef server

Here's how to delete the `learn_chef_httpd` cookbook from the Chef server.

<% command_snippet(workstation: 'ubuntu', path: "manage-a-node/rhel/#{current_page.parent.data.environment}/cleaning-up/cleaning-up/knife-cookbook-delete-learn_chef_httpd", features: [:stdin, :stderr]) %>

If you omit the `--all` argument, you'll be prompted to select which version to delete. In practice, you might delete version '0.3.0' of the `learn_chef_httpd` cookbook because you know it contains a configuration policy that will always fail.

### Delete the role from the Chef server

Here's how to delete the `web` role from the Chef server.

<% command_snippet(workstation: 'ubuntu', path: "manage-a-node/rhel/#{current_page.parent.data.environment}/cleaning-up/cleaning-up/knife-role-delete-web-node1-centos") %>

### Delete the RSA private key from your node

During the bootstrap process, an RSA private key is generated on your node to enable your node to make API calls to the Chef server. The default location of this key is <code class="file-path">/etc/chef/client.pem</code> on Linux systems.

If you plan to bootstrap your node a second time, for example, to practice the process, you'll need to log in to your node and delete the RSA private key file, like this.

```bash
$ sudo rm /etc/chef/client.pem
```

<% if current_page.parent.data.environment == 'virtualbox' %>

### Tear down your Vagrant and VirtualBox environment

When you complete this tutorial, or if you need to start over, run [vagrant destroy](https://www.vagrantup.com/docs/cli/destroy.html) to tear down your environment. You can later run `vagrant up` to bring up a new environment.

<% command_snippet(workstation: 'ubuntu', path: "manage-a-node/rhel/virtualbox/resolve-a-failure/cleaning-up/vagrant-destroy-node1-centos") %>

In this example, the `--force` argument does not ask for confirmation before destroying the environment.

<% else %>

### Tear down your instance

Deleting a node from your Chef server removes any data about that node from the server &ndash; it doesn't automatically tear down the instance.

Don't forget to tear down any cloud instances or local virtual machines that you used to complete the tutorial.

<% end %>

[END_BOX]

[START_BOX]

## Conclusion

In this tutorial, you brought up
<% if (current_page.data.environment == 'aws-automate') %>a Chef Automate server, a Chef server,
<% elsif (current_page.data.environment == 'opsworks') %>an AWS OpsWorks for Chef Automate instance,
<% else %>a Chef server,
<% end %>
bootstrapped a node, and applied a basic web server configuration. You also practiced updating your cookbook, uploading it to the Chef server, and seeing the changes appear on your node. As a bonus, you resolved an error in your configuration and set up `chef-client` to run periodically.

To update your cookbook you used a _template_. A [template](https://docs.chef.io/templates.html) enables you to write a single, general recipe that's customized for a particular node as the recipe runs. That means you don’t have to write a custom version of your recipe for every node.

You also ran `knife ssh` to update your node. [knife ssh](https://docs.chef.io/knife_ssh.html) invokes the command you specify over an SSH connection on a node &ndash; in our case `sudo chef-client`. You didn't have to specify the run-list because you already set that up when you bootstrapped the node. <% if (current_page.data.environment != 'virtualbox') %>[Search](https://docs.chef.io/chef_search.html) enables you to run `chef-client` on multiple nodes at once.<% end %> A [role](https://docs.chef.io/roles.html) enables you define your node's behavior and attributes based on its function.

That's it for this tutorial. When you're done experimenting, be sure to [clean up your environment](#howtocleanupyourenvironment).

Also be sure to check out these videos, which go deeper into what happens during the bootstrap process and when `chef-client` runs.

* [What happens during knife bootstrap](/modules/beyond-essentials-1)
* [What happens during a chef-client run](/modules/beyond-essentials-2)
* [What is the security model used by chef-client](/modules/beyond-essentials-3)

If you want to keep working with your Chef Automate installation, you might be interested in the [Deploy infrastructure changes with Chef Automate](/modules/deploy-infrastructure) tutorial. Here, you'll use Chef Automate's _workflow_ feature to move cookbook changes from your workstation all the way out to production-like systems with greater speed and safety.

If you're more interested in writing cookbooks, check out [Get started with Test Kitchen](/modules/local-development/), where you'll learn how _local development_ with Test Kitchen can help you iterate faster and correct mistakes earlier in the development process. With local development, you verify your cookbooks on local test instances that resemble production before you apply your work to a bootstrapped node.

[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).

[END_BOX]
