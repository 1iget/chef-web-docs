[HEADLINE] Any computer that's managed by Chef is called a _node_.

Now it's time to bring up a Windows Server 2012 R2 instance and prepare it for the bootstrap process.

[COMMENT] Although Chef supports [multiple versions of Windows Server](https://docs.chef.io/platforms.html#chef-client-title-foundational-platforms), for this module we recommend you use Windows Server 2012 R2. Doing so helps ensure that the output you see matches the sample output that's shown.

If you did the [Learn the Chef basics](/modules/learn-the-basics/) module, you installed the Chef DK on a server and configured it directly. Here you'll set up a Windows Server instance, called a _node_, and prepare your node to be configured by Chef remotely from your workstation.

[START_BOX]

## 1. Get a Windows Server 2012 R2 node to bootstrap

We suggest that you work in a disposable environment such as a Windows Server 2012 R2 virtual machine or cloud instance.

Ensure that your system:

* provides administrator access.
* has a resolvable IP address.
* can access the Internet.
* provides network access on ports 80 (HTTP), and 443 (HTTPS), 3389 (RDP), and 5985 (WinRM).

[COMMENT] The easiest way to get started is to use a system that can access the Internet over ports 80, 443, 3389, and 5985. If your firewall or network environment doesn't provide this access, [check out this blog post](https://www.chef.io/blog/2014/10/28/working-with-chef-behind-your-firewall/) and [this video](https://youtu.be/iD859HMm9XI?list=PL11cZfNdwNyPo_EEgCGDe9mrUlMtTf361).

If you still have the system that you used in the first module, _Learn the Chef basics_, you can continue to use that system for this module. However, the [free trial virtual machine](/modules/learn-the-basics/windows/free/) option that we provide in the first module does not have a public IP address. If you used the free trial VM, you'll need to bring up your own system.

The system requirements for your node are the same as the ones you used in the first module. Use these links if you need a refresher on how to bring up a node in your preferred runtime environment.

<% if current_page.parent.data.environment == 'opsworks' %>

Because your Chef Automate installation is already running on AWS, you might prefer to bring up your node on AWS as well (option 1 below). However, your node is not required to run on AWS.

<% end %>

* [Amazon Web Services (step 2)](/modules/learn-the-basics/windows/aws/set-up-a-machine-to-manage/#step2)
* [Microsoft Azure (step 2)](/modules/learn-the-basics/windows/azure/set-up-a-machine-to-manage/#step2)
* [Google Compute Platform (step 2)](/modules/learn-the-basics/windows/gcp/set-up-a-machine-to-manage/#step2)
* [Bring your own system (step 1)](/modules/learn-the-basics/windows/bring-your-own-system/set-up-a-machine-to-manage/#step1)

[COMMENT] For now, we recommend that you bootstrap your Windows Server node using the network settings that we show. Later, depending on your requirements, [additional options](https://github.com/chef/knife-windows) are available to set up your node for use with Chef, including how to configure your node to use SSL.

[END_BOX]

[START_BOX]

## 2. Gather some details about your machine

[COMMENT] All you need is for your system to be running &ndash; don't connect to it just yet.

Now, gather this information about your machine:

* Its hostname or public IP address.
* A user name that has administrator access and its password.

If you're bootstrapping an instance under Hyper-V, you can run this PowerShell command to get your instance's IP address on your local network. Here's an example.

```ps
$ Get-VM -Name "WindowsServer2012R2" | select -ExpandProperty NetworkAdapters | select IPAddresses
IPAddresses
-----------
{192.168.1.171, fe80::983c:ebdf:3e87:34db}
```

[END_BOX]

[START_BOX]

## 3. Connect to your node

Next, log in to your node so that you can prepare your node for the bootstrap process.

If you're using physical hardware, you can log in to your system directly. If your node is running remotely, such as in the cloud, create an RDP connection. If your node is a local virtual machine, such as a Hyper-V instance, you can connect through your virtualization software.

The following resources can help you connect if your node is running on Amazon Web Services, Microsoft Azure, Google Cloud Platform, or as a Hyper-V instance.

<% accordion('connect-aws', 'Amazon Web Services') do %>

<% markdown do %>

[Connecting to Your Windows Instance Using RDP](http://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/connecting_to_windows_instance.html)

<% end %>

<% end %>

<% accordion('connect-azure', 'Microsoft Azure') do %>

<% markdown do %>

[How to connect and log on to an Azure virtual machine running Windows](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-connect-logon/)

<% end %>

<% end %>

<% accordion('connect-google', 'Google Cloud Platform') do %>

<% markdown do %>

[Connecting to a Windows Instance](https://cloud.google.com/compute/docs/instances/windows/connecting-to-windows-instance)

<% end %>

<% end %>

<% accordion('connect-hyper-v', 'Hyper-V') do %>

<%= partial 'layouts/partials/hyper-v/connect_vm' %>

<% end %>

[END_BOX]

[START_BOX]

## 4. Configure the firewall to accept remote WinRM connections

In the next part, you'll bootstrap your Windows Server node remotely from your workstation over the WinRM protocol.

By default, the Windows firewall permits inbound traffic on port 5985 (WinRM) only from systems in the same local domain. Let's make sure that the firewall is configured to accept inbound connections from any remote address.

Run this command to change the default rule to enable inbound traffic from any remote address.

```ps
$ Get-NetFirewallPortFilter | ?{$_.LocalPort -eq 5985 } | Get-NetFirewallRule | ?{ $_.Direction –eq "Inbound" -and $_.Profile -eq "Public" -and $_.Action –eq "Allow"} | Set-NetFirewallRule -RemoteAddress "Any"
```

In practice, your firewall settings depend on your environment. For example, if each node in your network is joined to the same domain, you might use the default firewall settings.

[END_BOX]

[START_BOX]

## 5. Verify the configuration

From your workstation, you can verify that your Windows Server node can receive network traffic on port 5985 and through the firewall. You don't have to do this every time you bootstrap a node, but verifying that your node is connectable will help ensure that the bootstrap process succeeds.

To verify the connection, you can use the `knife wsman test` command. This command provides functionality that's similar to PowerShell's
[Test-WSMan](https://technet.microsoft.com/en-us/library/hh849873.aspx) cmdlet, but is available from any operating system that can run Chef DK, including Windows, macOS, and Linux.

From the <% fp '~/learn-chef' %> directory on your workstation, run the following command, replacing <% ph 'HOSTNAME' %> with your node's hostname or IP address.

```bash
# ~/learn-chef
$ knife wsman test HOSTNAME --manual-list
```

Here's an example:

```bash
# ~/learn-chef
$ knife wsman test 52.201.225.210 --manual-list
Connected successfully to 52.201.225.210 at http://52.201.225.210:5985/wsman.
```

To summarize, in this part you brought up a node that you'll configure using Chef. You also created a test connection to your node and verified the firewall enables remote WinRM connections. But once you get the hang of things, you'll see that the bootstrap process enables you to configure your servers without the need to connect to them directly.

[END_BOX]
