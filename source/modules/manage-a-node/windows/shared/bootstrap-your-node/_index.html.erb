Recall that any computer that's managed by a Chef server is called a _node_, and that `chef-client` is the command that applies the policy defined by your cookbooks to a node. We call the process that installs `chef-client` on a node and the initial check-in to the Chef server _bootstrapping_ the node.

In this part you'll bootstrap your node and execute the `learn_chef_iis` cookbook on it.

[START_BOX]

## 1. Run the bootstrap command

[WINDOWS] Remember, if your workstation is running Windows, we recommend that you <%= link_to 'open a Chef DK command prompt', current_page.first_page, anchor: 'step2' %> to ensure your PowerShell session is set up to work with Chef.

[knife bootstrap](https://docs.chef.io/knife_bootstrap.html) is the command you use to bootstrap a node. As part of the `knife bootstrap` command, you specify how to connect to the instance and what cookbooks your node should run.

Run this command to bootstrap your node. Replace <% ph 'ADDRESS' %> with your remote node's external address, <% ph 'USER' %> with your username, and <% ph 'PASSWORD' %> with your password.

<% accordion('azure-node', "If you're bootstrapping a Microsoft Azure instance", true) do %>

<%= partial 'modules/manage-a-node/shared/bootstrap_azure' %>

<% end %>

The `--node-name` argument uniquely identifies the node with the Chef server. Its value can be whatever you want. If you previously used the name `node1-windows` to bootstrap a different node, you can respond with 'Y' to overwrite that node's entry on your Chef server. Alternatively, you can choose a different name or <%= link_to("remove the previous node", current_page.last_page, :anchor => 'deletethenodefromthechefserver') %> from your Chef server.

```bash
# ~/learn-chef
$ knife bootstrap windows winrm ADDRESS --winrm-user USER --winrm-password 'PASSWORD' --node-name node1-windows --run-list 'recipe[learn_chef_iis]'
```

Here's an example:

<% command_snippet(page: current_page, path: 'bootstrap-your-node/bootstrap-node1-windows', features: [:stdin, :stderr, :stdout]) %>

[COMMENT] By default, the bootstrap process uses Negotiate authentication and encryption, which helps protect your password and other sensitive information.

<% accordion('troubleshooting', 'Troubleshooting') do %>

<% markdown do %>

If the operation times out or fails, here are some things to try.

* Ensure that you run `knife` commands from your <code class="file-path">~/learn-chef</code> directory or one of its sub-directories.
* Ensure you have a <code class="file-path">~/learn-chef/.chef</code> directory and that it contains a <code class="file-path">knife.rb</code> file and your RSA private key file.
* Ensure that your node's IP address is accessible from your network.
* Ensure the user name you provide has administrator access on the node.
* Ensure your workstation has outbound access (including firewall) on these ports:
  * 80 (HTTP)
  * 443 (HTTPS)
  * 5985 (WinRM)
* Ensure your node has inbound access (including firewall) on these ports:
  * 80 (HTTP)
  * 5985 (WinRM)
* Ensure your node has outbound access (including firewall) on these ports:
  * 443 (HTTPS)

<% end %>

<% end %>

<% accordion('bootstrap-detail', 'The bootstrap process in detail') do %>

<% markdown do %>

You can [review the documentation](https://docs.chef.io/knife_bootstrap.html#options) to better understand the role of each `knife bootstrap` option. Here are the options that you used:

* `--winrm-user`
* `--winrm-password`
* `--node-name`
* `--run-list`

You can also watch [What happens during knife bootstrap](/modules/beyond-essentials/what-happens-during-knife-bootstrap/) to further understand the process.

<% end %>

<% end %>

[END_BOX]

[START_BOX]

## 2. Confirm the result

Two things just happened.

First, your node was associated with your Chef server. To verify this, run the `knife node list` command.

<% command_snippet(page: current_page, path: 'bootstrap-your-node/knife-node-list-node1-windows', features: [:stdin, :stdout]) %>

You can use the `knife node show` command to view data about your node.

<% command_snippet(page: current_page, path: 'bootstrap-your-node/knife-node-show-node1-windows', features: [:stdin, :stdout]) %>

<% if ['aws-automate', 'opsworks'].include?(current_page.parent.data.environment) %>

You can also view your node from the Chef Automate dashboard. Refresh the page and you see that your node appears and its last `chef-client` run was successful.

![](manage-a-node/chef_automate_nodes_bootstrap_node1.png)

<% end %>

The second thing that happened was that your node did an initial check-in with the Chef server and ran the `learn_chef_iis` cookbook. That's because you specifed `learn_chef_iis` as the `--run-list` argument.

To verify the configuration, run `curl`. Replace the IP address you see here with yours.

<% command_snippet(page: current_page, path: 'bootstrap-your-node/curl-node1-windows-1', features: [:stdin, :stdout]) %>

You can also open a web browser from your workstation and navigate to your web server.

![The basic home page](misc/webserver-basic-remote.png)

<% if ['aws-automate', 'opsworks'].include?(current_page.parent.data.environment) %>

From the Chef Automate dashboard, select your node to view details about the `chef-client` run.

![](manage-a-node/chef_automate_nodes_bootstrap_node1_windows_details.png)

You'll also see details for each resource in your cookbook.

![](manage-a-node/chef_automate_nodes_bootstrap_node1_windows_details_resources.png)

A green checkmark shows that the resource was successfully applied. A blue checkmark means that the resource was already up to date. IIS automatically enables and starts the World Wide Web Publishing Service (W3SVC) service. So here we see that `service` resource is already up to date.

<% end %>

[END_BOX]
