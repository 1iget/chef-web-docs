<%
  os, cookbook = case current_page.parent.data.platform_id
  when 'rhel'
    ['CentOS', 'learn_chef_httpd']
  when 'ubuntu'
    ['Ubuntu', 'learn_chef_apache2']
  end
%>
Recall that any computer that's managed by a Chef server is called a _node_, and that `chef-client` is the command that applies the policy defined by your cookbooks to a node. We call the process that installs `chef-client` on a node and the initial check-in to the Chef server _bootstrapping_ the node.

In this part you'll bootstrap your <%= os %> node and execute the `<%= cookbook %>` cookbook on it.

[START_BOX]

## 1. Get your node's connection details

[knife bootstrap](https://docs.chef.io/knife_bootstrap.html) is the command you use to bootstrap a node. As part of the `knife bootstrap` command, you specify arguments depending on how you would normally connect to your node over SSH. For example, you might connect to your system using key-based authentication or password authentication.

[The other versions of this module](/modules/<%= current_page.parent.parent.parent.data.id %>/rhel/) describe the bootstrap process more generally. But because your <%= os %> node is managed by Vagrant and VirtualBox, you can bootstrap it by providing its SSH [forwarded port](https://www.vagrantup.com/docs/networking/forwarded_ports.html).

From your <% fp '~/learn-chef/chef-server' %> directory, run the following `vagrant ssh-config` command to get connection details for your node.

<% command_snippet(page: current_page, path: "bootstrap-your-node/vagrant-ssh-config-node1-#{os.downcase}") %>

Note the values of `Port` and `IdentityFile`. You'll use them in the next step.

In this example, any network traffic that's sent to port 2200 on your workstation (**localhost** in the next step) will be forwarded to port 22 (the SSH port) on your virtual machine.

[END_BOX]

[START_BOX]

## 2. Run the bootstrap command

[WINDOWS] Remember, if your workstation is running Windows, we recommend that you <%= link_to 'open a Chef DK command prompt', current_page.first_page, anchor: 'step2' %> to ensure your PowerShell session is set up to work with Chef.

From your <% fp '~/learn-chef' %> directory, run the following command to bootstrap your node. Replace the values of `--ssh-port` and `--identity-file` with your values.

<% command_snippet(page: current_page, path: "bootstrap-your-node/bootstrap-node1-#{os.downcase}", features: [:stdin, :stderr, :stdout]) %>

In a more production-like environment, you would replace <% ph 'localhost' %> with your node's IP address or hostname and omit the `--ssh-port` argument.

The `--node-name` argument uniquely identifies the node with the Chef server. Its value can be whatever you want. Here we use `node1-<%= os.downcase %>`.

[END_BOX]

[START_BOX]

## 3. Confirm the result

Two things just happened.

First, your node was associated with your Chef server. To verify this, run the `knife node list` command.

<% command_snippet(page: current_page, path: "bootstrap-your-node/knife-node-list-node1-#{os.downcase}", features: [:stdin, :stdout]) %>

You can use the `knife node show` command to view data about your node.

<% command_snippet(page: current_page, path: "bootstrap-your-node/knife-node-show-node1-#{os.downcase}", features: [:stdin, :stdout]) %>

The second thing that happened was that your node did an initial check-in with the Chef server and ran the `<%= cookbook %>` cookbook. That's because you specifed `<%= cookbook %>` as the `--run-list` argument.

To verify the configuration, run the following `curl` command.

<% command_snippet(page: current_page, path: "bootstrap-your-node/curl-node1-#{os.downcase}-1", features: [:stdin, :stdout]) %>

[END_BOX]
