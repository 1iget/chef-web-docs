---
title: 'Use RuboCop and Foodcritic to verify code style'
short_title: 'Red Hat Enterprise Linux'
platform: Red Hat Enterprise Linux
platform_id: rhel
category: local-development
logo: tests.svg
order: 4
time_to_complete: 60 minutes
snippet_path: test-your-infrastructure-code/rhel/virtualbox/verify-your-code-adheres-to-the-style-guide
snippet_workstation: ubuntu
machine_config: snippets/test-your-infrastructure-code/rhel/virtualbox/machine_config.md
environment: virtualbox
headings: [
  { label: 'Prerequisites', href: '#prerequisites' },
  { label: '1. Use RuboCop to make your code easier to read and maintain', href: '#step1' },
  { label: '2. Use Foodcritic to identify better usage patterns', href: '#step2' }
]
---
[HEADLINE] Lint testing can help you identify potential defects in your code early and also makes your code easier to read and maintain.

In the [Test driven development with InSpec](/modules/tdd-with-inspec/) and [Unit test with ChefSpec](/modules/chefspec/) tutorials, you've learned how to use automated testing to speed up the feedback cycle. Getting feedback early and often can help you release more quickly and with higher quality.

Although your code may behave as you expect, it's also important to ensure your code is easy to read and maintain, and avoids defects that can be difficult to fix later. Lint testing, or _linting_, is one way to help ensure that your code adheres to standard style guidelines and avoids common problems.

Lint testing is a form of [static program analysis](https://en.wikipedia.org/wiki/Static_program_analysis), also called _static code analysis_. A static code analysis tool inspects a program's source code for potential defects without actually running the program.

Lint testing can identify a range of issues, from code that's correct but difficult to read (such as code that uses non-uniform indentation) all the way to code that surely has an error (such as using an invalid character in a variable name).

In this tutorial, you'll use two popular tools that are part of the Chef DK &ndash; [RuboCop](http://batsov.com/rubocop/) and [Foodcritic](http://www.foodcritic.io) &ndash; to identify potential issues in variations of the `webserver_test` cookbook you created previously.

<% accordion('test-configuration', 'Test configuration') do %>

<% markdown do %>

<% render_machine_config(current_page.data.machine_config) %>

<% end %>

<% end %>


[START_BOX]

## Prerequisites

This tutorial builds on the `webserver_test` cookbook that you create in the [Test driven development with InSpec](/modules/tdd-with-inspec/) and [Unit test with ChefSpec](/modules/chefspec/) tutorials. We recommend you work through those tutorials before you begin this one.

If you want to get started right away with this tutorial, or no longer have the code from the previous ones, run this command from the <% fp '~/learn-chef' %> directory to create the `webserver_test` cookbook.

<% command_snippet(workstation: 'ubuntu', path: 'test-your-infrastructure-code/rhel/virtualbox/verify-desired-state/create-the-web-server-cookbook/chef-generate-cookbook') %>

[END_BOX]

[START_BOX]

## 1. Use RuboCop to make your code easier to read and maintain

Let's see how [RuboCop](http://batsov.com/rubocop/), a Ruby static code analyzer that's based on the community [Ruby style guide](https://github.com/bbatsov/ruby-style-guide#the-ruby-style-guide), can help identify inconsistent code formatting.

Start by modifying your `webserver_test` cookbook's default recipe like this. Be sure to copy the code exactly as it appears.

<% code_snippet(page: current_page, path: 'use-rubocop/default-4-rhel') %>

Note how the code is formatted.

* It uses four spaces for indentation.
* The `action` attribute is broken into multiple lines.
* The `file` resource uses two spaces to indent the `end` keyword.

When you run the `rubocop` command with no arguments, RuboCop checks all Ruby source files in the current directory and its subdirectories.

Start by moving to your <% fp 'webserver_test' %> cookbook's directory.

<% command_snippet(page: current_page, path: 'use-rubocop/cd-webserver_test-3', features: :stdin) %>

Run `rubocop` from your <code class="file-path">recipes</code> directory to run RuboCop's rules against your default recipe.

<% command_snippet(page: current_page, path: 'use-rubocop/rubocop-recipes-1') %>

For each file, RuboCop prints to the console a character that indicates the status of that file.

Common statuses include:

| Code | Name       | Description                                                                                                                                                                                                 |
|------|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `.`  |            | RuboCop found no potential issues.                                                                                                                                                                          |
| `C`    | Convention | RuboCop found code that potentially violates standard convention, for example, inconsistent use of indentation.                                                                                             |
| `W`    | Warning    | RuboCop found code that's valid, but potentially isn't what the programmer intended, such as comparing a variable to itself or defining [unreachable code](https://en.wikipedia.org/wiki/Unreachable_code). |
| `E`    | Error      | RuboCop found a potential error, such as using an invalid character in a variable name.                                                                                                                     |
| `F`    | Fatal      | RuboCop found a potential unrecoverable error that would cause the program to crash, such as an [exception](http://ruby-doc.org/core-2.2.0/Exception.html) that is not handled.                             |

When RuboCop finds multiple potential issues, it reports the most severe as the file's status. In this example, RuboCop found both a convention violation and a warning, so our recipe's overall status is `W` (Warning).

### Fix the violations

Let's fix the reported violations. To summarize them:

* Line 6 uses 4 spaces for indentation.
* Line 7 does not properly align the array elements.
* Line 17 indents the `end` keyword.

Modify <code class="file-path">default.rb</code> like this to fix the violations.

<% code_snippet(page: current_page, path: 'use-rubocop/default-5-rhel') %>

Run `rubocop` a second time to check whether the violations are fixed.

<% command_snippet(page: current_page, path: 'use-rubocop/rubocop-recipes-2') %>

This time a new violation is discovered. This violation was not reported originally because the use of indentation was consistent with the indented `end` keyword.

Correct the indentation, making your default recipe look like this.

<% code_snippet(page: current_page, path: 'use-rubocop/default-6-rhel') %>

Run `rubocop` to verify the correction.

<% command_snippet(page: current_page, path: 'use-rubocop/rubocop-recipes-3') %>

Congratulations. RuboCop reported no additional violations.

## Configure RuboCop to follow your preferred style

A RuboCop rule is also called a _cop_. You can modify the behavior of RuboCop's predefined cops or disable one or more cops altogether.

One reason you may want to customize RuboCop's predefined behavior is when your team or organization defines style guidelines that differ from the community standard.

Another reason might be when you have many RuboCop violations in your existing code, and you want to resolve them gradually.

For example, say your existing code uses 4 spaces for indentation and you want to temporarily configure RuboCop to accept this indentation so that you can focus on potentially more severe issues.

Start by modifying your default recipe to look like this. It uses 4 spaces for indentation.

<% code_snippet(page: current_page, path: 'use-rubocop/default-7-rhel') %>

Run `rubocop` to observe the violations.

<% command_snippet(page: current_page, path: 'use-rubocop/rubocop-recipes-4') %>

You customize RuboCop's behavior through a file named <code class="file-path">.rubocop.yml</code>. When RuboCop runs, it loads all predefined rules and then overrides any rules that you specify.

Create a file named <code class="file-path">.rubocop.yml</code> in your cookbook directory, <code class="file-path">~/learn-chef/cookbooks/webserver_test</code>, and add this code to it.

<% code_snippet(page: current_page, path: 'use-rubocop/rubocop-yml') %>

RuboCop searches for a file named <code class="file-path">.rubocop.yml</code> by traversing up the directory tree. So in practice you might add your <code class="file-path">.rubocop.yml</code> file to a directory that's higher in the tree if you want your modified rules to apply to multiple cookbooks.

[TIP] You can use RuboCop's [default rules](https://github.com/bbatsov/rubocop/blob/master/config/default.yml) as a guide. Just copy the rules that you want to modify or disable to your <code class="file-path">.rubocop.yml</code> file and modify its parameters. To disable a rule, add `Enabled: false` to the rule.

Now run `rubocop` to verify that your custom behavior is used.

<% command_snippet(page: current_page, path: 'use-rubocop/rubocop-recipes-5') %>

After you address any other violations, you can remove your custom rule from <code class="file-path">.rubocop.yml</code> and then focus on the indentation violations.

[TIP] If your code produces a large number of violations, you can run RuboCop to [automatically generate a configuration file](https://github.com/bbatsov/rubocop#automatically-generated-configuration) that excludes the violations from a `rubocop` run. As you work through the violations, you can remove each entry from the generated configuration file.<br/>You can also [disable cops directly in your source code](https://github.com/bbatsov/rubocop#disabling-cops-within-source-code) if you have a special case that you want RuboCop to ignore.

[COMMENT] There's also [cookstyle](https://docs.chef.io/release/devkit/cookstyle.html), which limits RuboCop tests to those that are most appropriate for cookbook development.

[END_BOX]

[START_BOX]

## 2. Use Foodcritic to identify better usage patterns

[Foodcritic](https://docs.chef.io/foodcritic.html) is another popular linting tool that comes with the Chef DK.

RuboCop can be run on any Ruby program, and isn't specific to Chef. Foodcritic identifies usage patterns that are specific to Chef code. Many Chef users run both tools as part of their lint testing.

In this part you'll see how Foodcritic can identify usage patterns that improve the quality of your code. You'll also extend Foodcritic by writing a custom rule.

### Identify use of unnecessary string interpolation

In Ruby, [string interpolation](https://en.wikipedia.org/wiki/String_interpolation) enables you to replace placeholders within a string with the values they represent.

Here's an example for a basic web server configuration.

```ruby
# webserver.rb
# Write the home page.
file "#{node['document_root']}/index.html" do
  content '<html>This is a placeholder</html>'
end
```

Here, double quotes `"` indicate the use of string interpolation. This `file` resource combines the document root, stored as a node attribute, with the name of the index file to create a full path to the home page. The `#{}` syntax indicates the placeholder. Its contents can be a variable or block of Ruby code.

The `content` property uses single quotes `'` because it does not require string interpolation &ndash; there are no placeholders to replace.

Double quotes may also be used when the contents of the string contains one or more single quotes. For example:

```ruby
# webserver.rb
# Write the home page.
file "#{node['document_root']}/index.html" do
  content "<html>Welcome to Suzy's web site!</html>"
end
```

You can use double quotes even when string interpolation is not used. However, some people prefer to use double-quotes only when string interpolation is required because it makes the intention of the string clear.

Let's examine a case where lint testing can help identify the use of unnecessary string interpolation. Modify your default recipe to look like this.

<% code_snippet(page: current_page, path: 'use-foodcritic/default-8-rhel') %>

This code resembles the code you wrote in the previous tutorial that configures Apache for both Ubuntu and CentOS.

Notice the use of double quoted strings. Although this program is valid and behaves as you would expect, its intention might not be clear to others. Because string interpolation is not required, it might appear to others that the code intends to use string interpolation but the string is missing additional information.

From your <% fp 'webserver_test' %> cookbook's directory, run `foodcritic ./recipes/*` to run the Foodcritic rules against the default recipe.

<% command_snippet(page: current_page, path: 'use-foodcritic/foodcritic-recipes-1') %>

Foodcritic reports [FC002](http://www.foodcritic.io/#FC002): "Avoid string interpolation where not required".

Now remove the string interpolation to fix the violation. Your recipe should resemble the one you created in the previous tutorial.

<% code_snippet(page: current_page, path: 'use-foodcritic/default-3-2-rhel') %>

Run `foodcritic` a second time to verify that the violation is fixed.

<% command_snippet(page: current_page, path: 'use-foodcritic/foodcritic-recipes-2', features: :stdin) %>

When `foodcritic` produces no output, it indicates that Foodcritic found no violations.

### Use Foodcritic to simplify your code

Say you didn't know about the [service](https://docs.chef.io/resource_service.html) resource, and that you instead use the [execute](https://docs.chef.io/resource_execute.html) resource to manage the Apache service in your `webserver_test` cookbook.

Modify your default recipe like this.

<% code_snippet(page: current_page, path: 'use-foodcritic/default-9-rhel') %>

Although this recipe might work as you expect, it's unnecessarily complex. The `execute` resource requires additional code to ensure that the service is enabled and started only when needed. This code would require additional testing to ensure that it accounts for differences in each version of CentOS and Ubuntu that you support.

Run `foodcritic` to apply Foodcritic's rules to your recipe.

<% command_snippet(page: current_page, path: 'use-foodcritic/foodcritic-recipes-3') %>

Foodcritic reports [FC004](http://www.foodcritic.io/#FC004): "Use a service resource to start and stop services".

The `service` resource takes care of all of the details required to enable and start the service. Modify your recipe to look like the original version, like this.

<% code_snippet(page: current_page, path: 'use-foodcritic/default-3-3-rhel') %>

Run `foodcritic` to verify that the violation is fixed.

<% command_snippet(page: current_page, path: 'use-foodcritic/foodcritic-recipes-4', features: :stdin) %>

By fixing the violations, you've created a recipe that's easier to read, maintain, and verify.

Check out the [Foodcritic documention](http://www.foodcritic.io) to learn more, including how to:

* specify [which rules to run](http://www.foodcritic.io/#choosing-rules-to-run).
* use rules [written by the community](http://www.foodcritic.io/#extra-rules), which you can use as a model for writing your own rules.

[GITHUB] [Get the code for this tutorial](https://github.com/learn-chef/webserver_test/tree/lesson3_rhel) on GitHub.

[END_BOX]

<% next_page(current_page) do %>

In this tutorial, you saw how to use [RuboCop](http://batsov.com/rubocop/) and [Foodcritic](http://www.foodcritic.io) to help ensure that your code adheres to standard style guidelines and avoids common problems. Running lint testing tools such as RuboCop and Foodcritic helps ensure that the code you write adheres to your team's preferred style. They can also help detect code that surely has an error, such as using an invalid character in a variable name.

Like ChefSpec, RuboCop and Foodcritic do not involve the creation of a virtual instance, and are fast ways to validate the correctness of your work. Once you have code that passes lint and unit testing, you can apply that code to virtual instances using tools such as Test Kitchen and InSpec. After you verify your work on virtual instances, you can move on running your changes to real test infrastructure or submit your change to a continuous delivery system such as Chef Automate.

### Next steps

If you haven't gone through the [Test driven development with InSpec](/modules/tdd-with-inspec/) and [Unit test with ChefSpec](/modules/chefspec/) tutorials, now's a great time. You'll learn how to use InSpec to verify your configuration on virtual test instances and how to use ChefSpec to simulate the execution of your resources in memory.

Learn more about how to test and debug your Chef code in our [Joy of Automating](/modules/) video series, hosted by Franklin Webber.

If you're involved in your company's compliance and audit process, you may be interested in the [Chef compliance scanner](/modules/compliance-assess/rhel/), which uses InSpec as its auditing and testing framework.

You may also be interested in [Chef Automate](https://www.chef.io/automate/), which gives your operations and development teams a common platform for developing, building, testing, and deploying cookbooks, applications, and more. Chef Automate reinforces the Chef workflow, where you begin by developing and testing your configuration from your local workstation. Then, you submit your change to Chef Automate's pipeline, where your change goes through sets of automated tests before going out into production. If you have many different teams, each delivering software in its own way, you can use Chef Automate to bring a standard, proven approach to all of your organization's deployments.

[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).

<% end %>
