---
title: 'Set up your workstation and user profile'
short_title: 'Set up your workstation'
order: 2
time_to_complete: 20 minutes
snippet_path: deploy-infrastructure/rhel/automate/set-up-your-chef-server
snippet_workstation: ubuntu
headings: [
  { label: '1. Generate an SSH key', href: '#step1' },
  { label: '2. Update your user profile', href: '#step2' },
  { label: '3. Create a workflow org', href: '#step3' },
  { label: '4. Configure the CLI tools', href: '#step4' },
  { label: '5. Generate an API token', href: '#step5' },
  { label: '6. Set your Git identity', href: '#step6' },
  { label: '7. Authenticate with Git', href: '#step7' },
  ]
---
In the [Manage a node](/tutorials/manage-a-node/rhel/automate/set-up-your-chef-server/) tutorial, you brought up a Chef Automate instance and set up your workstation to communicate with it. In this part, you'll extend this setup to be able to push configuration changes through Chef Automate's integrated pipeline.

Because you're using Chef Automate's integrated Git server for this tutorial, you'll need to generate an SSH keypair and associate the public part of that keypair with your Chef Automate user account. Later, if you choose to integrate with [GitHub](https://docs.chef.io/integrate_delivery_github.html) or [Bitbucket](https://docs.chef.io/integrate_delivery_bitbucket.html), you would set up Chef Automate and your workstation to work with that revision control system.

[WINDOWS] If your workstation is running Windows, remember to run commands from a [Chef Development Kit PowerShell prompt](/tutorials/manage-a-node/rhel/automate/set-up-your-workstation#step2). Doing so will ensure that utilties such as `ssh`, `scp`, and `ssh-keygen` are available.

[START_BOX]

## 1. Generate an SSH key

You need an SSH key to submit changes to Chef Automate from the command line. The private part of your key, <% fp '~/.ssh/id_rsa' %>, stays with you. You associate the public part of your key, <% fp '~/.ssh/id_rsa.pub' %>, with your Chef Automate user profile. The process is similar to how systems such as [GitHub](https://help.github.com/articles/connecting-to-github-with-ssh/) work.

If you don't have an SSH keypair that you want to use, [generate one now](https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2). The syntax varies slightly between Windows and other operating systems. Here are a few examples. The email address is not significant for this tutorial, but you can replace "jsmith@example.com" with yours if you prefer.

**Linux and Mac OS X**

```bash
# ~/learn-chef
$ ssh-keygen -t rsa -b 4096 -C "jsmith@example.com" -f $HOME/.ssh/id_rsa -N ""
Generating public/private rsa key pair.
Your identification has been saved in /home/ubuntu/.ssh/id_rsa.
Your public key has been saved in /home/ubuntu/.ssh/id_rsa.pub.
The key fingerprint is:
a9:2a:a5:9a:63:e9:00:bc:e3:15:eb:c6:cd:00:f7:41 jsmith@example.com
The key's randomart image is:
+--[ RSA 4096]----+
|                 |
|     E           |
|    .            |
|.. . .   .       |
|..o.. . S        |
|. ..+. .         |
|.oo=+ .          |
|++*o +           |
|==.o.            |
+-----------------+
```

**Windows**

```ps
# ~/learn-chef
$ ssh-keygen -t rsa -b 4096 -C "jsmith@example.com" -f $HOME/.ssh/id_rsa -N "''"
Generating public/private rsa key pair.
Your identification has been saved in C:\Users\Administrator/.ssh/id_rsa.
Your public key has been saved in C:\Users\Administrator/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:qmuWw1uXb4tr/xZDPJN7mhuM1MxQAzWPMb7NtU0Ee6A jsmith@example.com
The key's randomart image is:
+---[RSA 4096]----+
|          .oB o..|
|           o O + |
|          ..E.o +|
|           =*+ +o|
|        S ..=+o..|
|       . o o+ .  |
|   . .o o . o*   |
|    *o ..o. +.   |
|   o++ .o+++o.   |
+----[SHA256]-----+
```

-- --

You'll see the private and public key files in your <% fp '~/.ssh' %> directory.

```bash
$ ls ~/.ssh/id_rsa*
/home/ubuntu/.ssh/id_rsa  /home/ubuntu/.ssh/id_rsa.pub
```

Print out the contents of the public part of your keypair, <% fp '~/.ssh/id_rsa.pub' %>, to the console and copy it to the clipboard. You'll paste it in your Chef Automate user profile in the next step.

```bash
$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDhmZKFTdeHBU7i6KvDimR4OnRdSTcHtL+F0mg9acJcF9etn9W0rUSfkLFKeAHQ2yQLG5P/T5oSnrqDfvol+smzmEjQxpTWTQ9ghx1M0bnuRwmPwXbe6PUXVr4D+vKL4y3k3O6uyPwXYVJp3drPDtWdZSk2b/uo3ydLPzgoKN7hv3t3db9VUjtuQlS/RUEiKGQPpNG06GIlLN3yLqM8Bi0MgDaQDYK/TQ3+8T/m3RwESQclRHuRu5sh1iMpcegeSU2G8fFsOc3IzDlujUrMjMLIlYNwhmMY1EeixKtCtGEY7fjiourOzyj36WCPPzBJi+WpaNB6HYB2EhrGkBy2b86GMX0hsnmFAjvebeVmG9+hm1TyNkF8DDS6u0a+Yo884wdxhTgzHqIl17HPf4LkQQPMfJhNIbd7OISCbPjtHpls1SUF6kFbnozzB53PEcDpBeyI7jqQKvma9Zw2gdnB6j+4E2R1aE3t4IBSfLyhAEJXDo9E82LGvVbN1oajWsdkefb/Ob8bhhReRjyjCbTchd7R7Ex0s7u9hKmfAOfgoa9hDC654X92XQD1GvJNt+PbyJBmDXe+LUihNgvDSCN+MGtWe/nj9VsLHc+aqBCm+QEcHr4ybyxNmFaCYVO/JN+95eElDAKaqPar3FjeqZQpzalVcBkJDX1u5SAjAHWTjwJVaQ== jsmith@example.com
```

[END_BOX]

[START_BOX]

## 2. Update your user profile

From the Chef Automate web interface, select **Admin** from the menu at the top of the page. Then select your user account, for example, **user1**.

Fill in the fields, including your name and email address (you can use ficticious values if you prefer.) You do not need to enter your Chef Automate password. In the text box labeled **SSH Key**, paste the contents of the SSH public key you generated in the previous step. Here's an example.

<img src="/assets/images/automate/update_user_profile_1_user1.png" style="width: 60%;" />

Under the section **Roles Within the Enterprise**, ensure the **admin** option is checked. Then click **SAVE & CLOSE**.

<img src="/assets/images/automate/update_user_profile_2.png" style="width: 60%;" />

[COMMENT] Later, you can configure your installation to work with [LDAP](https://docs.chef.io/integrate_delivery_ldap.html) or [SAML](https://docs.chef.io/integrate_chef_automate_saml.html) authentication.

[END_BOX]

[START_BOX]

## 3. Create a workflow organization

The next step is to create a workflow organization. A workflow organization enables you to group related projects and provide scope for authorization rules. You'll use your workflow organization in the next step when you set up the command-line tools on your workstation.

From the Chef Automate web interface, select **Workflow**, then **Workflow Orgs**. Then specify a name for your org, for example, **my-org**. Then click **SAVE &amp; CLOSE**.

![](automate/automate-create-workflow-org.png)

If you use [Slack](https://slack.com), you can later configure Chef Automate to [send Slack notifications](https://docs.chef.io/integrate_delivery_slack.html) for all projects that belong to your workflow organization.

[END_BOX]

[START_BOX]

## 4. Configure the command-line tools

Next, you'll run [delivery setup](https://docs.chef.io/ctl_delivery.html#delivery-setup) to configure the command-line interface (CLI) tools to communicate with the Chef Automate server. The command creates a configuration file named <% fp '.delivery/cli.toml' %>.

The placement of the `.delivery` directory in your file hierarchy is significant. Like Git, the delivery CLI searches the current directory and parent directories for its server settings. Because server settings are unique to an organization, we recommend that you create a directory for each organization you belong to and run the `delivery setup` command from that directory.

From the <% fp '~/learn-chef' %> directory, run the following to configure the CLI to communicate with your Chef Automate server. Replace <% ph 'SERVER' %> with your Chef Automate server's FQDN, <% ph 'ORG' %> with your workflow organization name, and <% ph 'USER' %> with your username.

```bash
# ~/learn-chef
$ delivery setup --server=SERVER --ent=default --org=ORG --user=USER
```

Here's an example.

```bash
# ~/learn-chef
$ delivery setup --server=ec2-54-226-3-109.compute-1.amazonaws.com --ent=default --org=my-org --user=user1
Chef Delivery
Writing configuration to /home/ubuntu/learn-chef/.delivery/cli.toml
New configuration
-----------------
api_protocol = "https"
enterprise = "default"
git_port = "8989"
organization = "my-org"
pipeline = "master"
server = "ec2-54-226-3-109.compute-1.amazonaws.com"
user = "user1"
```

[END_BOX]

[START_BOX]

## 5. Generate an API token

Next, run [delivery token](https://docs.chef.io/ctl_delivery.html#delivery-token) to generate an API token. The API token enables you to authenticate requests without the need to enter your password.

The syntax varies slightly between Windows and other operating systems. Here are a few examples.
Replace <% ph 'YOUR_PASSWORD' %> with the password you use to log in to the Chef Automate web interface.

**Linux and Mac OS X**

```bash
# ~/learn-chef
$ AUTOMATE_PASSWORD=YOUR_PASSWORD delivery token
```

Example:

```bash
# ~/learn-chef
$ AUTOMATE_PASSWORD=P4ssw0rd! delivery token
Chef Delivery
Requesting Token
token: AaxmfihXl2kdUQ5LT3-SZpyw9ZMyJr-vHtKh7Yogu9M
saved API token to: /home/ubuntu/.delivery/api-tokens
```

**Windows**

```ps
# ~/learn-chef
$ $env:AUTOMATE_PASSWORD='YOUR_PASSWORD'
$ delivery token
```

Example:

```ps
# ~/learn-chef
$ $env:AUTOMATE_PASSWORD='P4ssw0rd!'
$ delivery token
Chef Delivery
Loading configuration from C:\Users\Administrator\learn-chef
Requesting Token
token: G+AALDhJ9kWfM7fOdiCNe68zFXmYOdRsPULlaZGk7QI=
saved API token to: C:\Users\Administrator\.delivery\api-tokens
```

[END_BOX]

[START_BOX]

## 6. Set your Git identity

Next, run `git config` to set your [Git identity](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup#Your-Identity). Git includes this information as metadata when you commit changes. You can omit this step if you've already configured Git to work with other projects.

If you have an existing Git account, such as with GitHub, you can use the same information here (changes you make in this tutorial won't be published as public activity on your GitHub account.) You can use fictitious values if you prefer.

Here's an example.

```bash
# ~/learn-chef
$ git config --global user.name "Jane Smith"
$ git config --global user.email jsmith@example.com
```

[END_BOX]

[START_BOX]

## 7. Authenticate with Chef Automate's Git server

Next, verify that you can access your Chef Automate's Git server over SSH on port 8989. Doing so verifies that you are properly configured to submit changes to Chef Automate.

Replace <% ph 'USER' %> with your username and <% ph 'SERVER' %> with your Chef Automate server's FQDN.

```bash
# ~/learn-chef
$ ssh -T -p 8989 -l "USER@default" SERVER
```

Here's an example.

```bash
# ~/learn-chef
$ ssh -T -p 8989 -l "user1@default" ec2-54-85-148-63.compute-1.amazonaws.com
Hi user1@default! You've successfully authenticated, but Chef Delivery does not provide shell access.
```

Your workstation is now set up.

[END_BOX]

<% next_page(current_page) do %>

Next, you'll set up a _runner_, which executes jobs scheduled by Chef Automate as a change moves through the pipeline.

<% end %>
