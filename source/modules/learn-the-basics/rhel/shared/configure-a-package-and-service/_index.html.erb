[HEADLINE] Like files, packages and services are also types of resources. Chef applies resources in the order you specify.

Your job is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

Let's extend what you learned about file management in the previous part to manage the Apache HTTP Server package and its service.

Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.

[START_BOX]

## 1. Install the Apache package

Let's install the Apache package, `httpd`. From your <code class="file-path">~/chef-repo</code> directory, add this recipe to a file named <code class="file-path">webserver.rb</code>.

<% code_snippet(page: current_page, path: 'install-the-apache-package/webserver-1') %>

We don't need to specify an action because `:install` is the default.

Now run `chef-client` in local mode to apply the recipe.

<% command_snippet(page: current_page, path: 'install-the-apache-package/package-ccr-1') %>

[COMMENT] `sudo` is required because this command installs a package and therefore must be run with root privileges.

Run the recipe a second time.

<% command_snippet(page: current_page, path: 'install-the-apache-package/package-ccr-2') %>

You see that Chef does not apply any changes because there's nothing to do &ndash; the package is already installed.

[END_BOX]

[START_BOX]

## 2. Start and enable the Apache service

Now let's first enable the Apache service when the server boots and then start the service. Modify <code class="file-path">webserver.rb</code> to look like this.

<% code_snippet(page: current_page, path: 'start-and-enable-the-apache-service/webserver-2') %>

This code declares multiple actions.

Now apply it.

<% command_snippet(page: current_page, path: 'start-and-enable-the-apache-service/package-ccr-3') %>

The package is already installed, so there's nothing to do. However, the service is started and enabled.

[END_BOX]

[START_BOX]

## 3. Add a home page

Let's spruce things up and add a custom home page.

You already know how to configure a `file` resource; append one that configures the default home page, <code class="file-path">/var/www/html/index.html</code>, to the end of <code class="file-path">webserver.rb</code>. The entire recipe now looks like this.

<% code_snippet(page: current_page, path: 'add-a-home-page/webserver-3') %>

Now apply it.

<% command_snippet(page: current_page, path: 'add-a-home-page/package-ccr-4') %>

The package and the service are already in the desired state, but you'll see that the home page, <code class="file-path">/var/www/html/index.html</code>, is created.

[END_BOX]

[START_BOX]

## 4. Confirm your web site is running

Run the `curl` command to confirm that your web page is available.

<% command_snippet(page: current_page, path: 'confirm-your-web-site-is-running/curl-localhost') %>

<% if current_page.data.page_variants&.free_vm %>

Normally, you could also access your web server from a browser on another machine. However, the free trial virtual machine does not have a public IP address.

<% elsif !current_page.data.page_variants&.virtualbox %>

Assuming your server's firewall is open for inbound access on port 80, you can access your web server from a browser on another machine. You'll see something like this.

![The basic home page](misc/webserver-basic-remote.png)

<% end %>

[END_BOX]

[START_BOX]

## Summary

You saw how to work with the package and service resources. You now know how to work with three types of resources: [file](http://docs.chef.io/resource_file.html), [package](http://docs.chef.io/resource_package.html), and [service](http://docs.chef.io/resource_service.html).

You also saw how to apply multiple actions. But how does Chef know what order to apply resources and actions?

#### Chef works in the order you specify

Let's take another quick look at our web server recipe.

<% code_snippet(page: current_page, path: 'add-a-home-page/webserver-3') %>

The resources are applied in the order they are specified in the recipe. So here the package is installed, then the service is configured, and finally the home page is set. If any resource is already in the desired state, Chef simply moves on to the next one.

The same idea applies to the action list `[:enable, :start]` for configuring the service. The service is enabled when the server boots before the service is started.

It's important to always think about how you order things. For example, the recipe wouldn't work if we tried to configure the Apache service before the package is even installed.

A recipe stops if any step fails (don't worry &ndash; Chef provides info about the error). That's why we ordered the service actions the way we did. If the service can't be enabled on boot then we don't want to start it.

[END_BOX]
