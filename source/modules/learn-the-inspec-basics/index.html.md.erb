---
id: learn-the-inspec-basics
description: "Learn the basics of InSpec including how to write controls, scan remote systems, and more."
name: learn-the-inspec-basics
title: 'Learn the InSpec basics'
short_title: 'Learn the InSpec basics'
type: topic
platform: Ubuntu
platform_id: ubuntu
category: compliance-automation
time_to_complete: 60 minutes
quiz_path: quizzes/learn-the-inspec-basics.yml
headings: [
  { label: 'Prerequisites', href: '#prerequisites' },
  { label: 'Write a basic test', href: '#writeabasicinspectest' },
  { label: 'Add a second test', href: '#addasecondtest' },
  { label: 'Scan a remote system', href: '#scanaremotesystem' },
  { label: 'Create a profile', href: '#createaprofile' },
  { label: 'Scan for compliance', href: '#scanforcompliance' },
  { label: 'Make your profile more reusable', href: '#makeyourprofilemorereusable' },
  { label: 'Conclusion', href: '#conclusion' }
]
---
Compliance is an emerging and exciting area of automation. Compliance means that your systems conform to the standards or regulations that you need to follow in your work. Fortunately, you can use a great Chef product--InSpec--to ensure that your infrastructure operates and follows the rules and regulations of your company and industry. Compliance as code automates auditing processes, saving money, time, and most importantly, your relationships with customers and stakeholders.

InSpec is short for "infrastructure specification", which is exactly what InSpec allows you to do. InSpec allows you to _specify_, or define and automate infrastructure, integration, and compliance testing, ensuring that your systems and processes adhere to government, industry,  and company standards.

## Prerequisites

Before starting this module, you need to have the following installed on your workstation:

* VirtualBox <https://www.virtualbox.org/> is a "hypervisor" program, which means that it manages virtual machine installations. Each running virtual machine is called an "instance".
* Vagrant <https://www.vagrantup.com/downloads.html> makes working with hypervisor programs easier by using a configuration file, called a `Vagrantfile`  that defines a the structure of a virtual machine, such as available memory, host name, and network setting using a sort of template. This template can be re-used for launching as many copies of a vm instance as you need, as many times as you need.
Vagrant also provides access to base virtual machine images, called _boxes_. [HashiCorp's Atlas](https://www.hashicorp.com/atlas.html) is a place where you can access prebuilt boxes or upload new boxes for others to use. [Bento](http://chef.github.io/bento/) is a Chef project that provides ready-to-use Vagrant boxes for many common platforms, including Ubuntu.
* ChefDK (includes InSpec) <https://downloads.chef.io/chefdk> provides tools that enable you to manage your servers remotely from your workstation. But it also provides tools that allow you to configure a machine directly.
* You will need the `tree` utility installed on your workstation. To check if `tree` is installed, enter `which tree` into the command line. If tree is not found, then you will need to install it on your workstation using homebrew <https://brew.sh/>. First, check to see if homebrew is installed on your worksation by entering `which brew` in the command line prompt. If brew is not found,  then install homebrew by copying the following command into at into the command line prompt: `/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"` After successfully loading homebrew, install the `tree` utility by entering `brew install tree`.

This module is written for a macOS or Linux workstation and an Ubuntu 14.04 virtual machine running on Vagrant and VirtualBox. However, it can be adapted to most systems running the ChefDK and connecting to a second machine that also runs the ChefDK.

### Concepts

These are the concepts that you will learn about in this module:

* Audit - Comprehensive review of an organization's adherence to regulator guidelines. Some of the areas that an audit examines are security policies, user access controls, and risk management procedures.
* Compliance - When a system runs according to a defined set of rules it is in compliance. 'Compliance' can be used to describe technological processes as well as organizations that run in accordance with government, industry, or company policies.
* Policy - A policy is the purpose of a set of compliance tests as well as the outline of the tests themselves.
* Control - The expression of practices for auditing settings and processes in code, which are stored within a control file in and InSpec profile.
* Scanning and remote scanning - Running compliance tests against a local or remote computer.
* Profiles -  A collection of tests stored in one or more controls designed to satisfy a compliance policy. In InSpec, the profile is the structure in which controls are coded.

## Write a basic InSpec test

Now that you have the ChefDK, VirtualBox, and Vagrant installed, it is time to write your first control. First, make a directory named `learn-inspec` and navigate into that directory. Your first task will be to write an InSpec control file that contains a single control, testing the existence of a file. You will follow the behavior-driven-development practice of writing a test that fails, and then writing just enough code to make it pass.

```bash
# ~/
$ mkdir learn-inspec
$ cd learn-inspec
```

### Scenario: our “hello world” example
From the `learn-inspec` directory on your workstation you will write your first inspec control file, which contains a single control that tests for the existence of a file.

1. Use the `touch` command to create the `hello_spec.rb` file. Then save the file.

    ```bash
    # ~/learn-inspec
    $ touch hello_spec.rb
    ```

1. With the editor of your choice, open 'hello_spec.rb' and copy the following code into the file:

    ```ruby
    # ~/learn-inspec/hello_spec.rb
    control "world-1.0" do
      impact 1.0
      title "hello world"
      desc "'hello.txt' should be a file"

      describe file( 'hello.txt' ) do
        it { should exist }
      end
    end
    ```

#### What are the elements of a control file?

The control file contains a remarkable amount of information in a very brief format. Let's break it down:

* control - the declaration that this is a control object and a brief unique identifier (in this example, our control ID is 'world-1.0').
* impact - On a scale of 0.0 to 1.0, the severity of consequences should the control fail.
* title - A title for the control that will be displayed in InSpec outputs and other reports.
* desc - A short description what the control tests.
* describe - A single automated test used to ensure the control is satisfied. A control can use multiple 'describes'.

### Test your machine using the control file.

[TIP] If you are running tests within a control but not running an entire InSpec profile, you will need to run the 'exec' command from the same directory as the test.

1. From the `learn-inspec` directory command line prompt, run your control using the `inspec exec` command.

    ```bash
    # ~/learn-inspec
    $ inspec exec hello_spec.rb

    Target:  local://

      ✖  world-1.0: hello world (expected File hello.txt to exist)
         ✖  File hello.txt should exist
         expected File hello.txt to exist

         Profile Summary: 0 successful, 1 failures, 0 skipped
    ```

    The output shows you the name of the control and what the test expected to see happen, citing the specific control that failed. The 'Profile Summary' shows a tally of all the controls in the profile, based on their status as successful, failures, or skipped tests. A failing test will appear in red letters. This particular failing result shows you both that the test ran as it should have and that the `hello.txt` file does not exist in the directory.

    To make the test pass, you will create a `hello.txt` file in this directory and then use `inspec exec` to run the test. The output should show the test passing.

1. Touch the file in order to create it.

    ```bash
    # ~/learn-inspec
    $ touch hello.txt
    $ inspec exec hello_spec.rb
    ```
1. Run the test using `inspec exec`.

    ```bash
    # ~/learn-inspec
    $ inspec exec hello_spec.rb

    Target:  local://

      ✔  world-1.0: hello world
         ✔  File hello.txt should exist

         Profile Summary: 1 successful, 0 failures, 0 skipped
    ```

## Add a second test

An InSpec control may contain more than one test; however, it is advisable that all of the tests in a single control connect to the subject of the control. This flexibility is a feature of InSpec that you will see repeated across its design. For example, a profile can also have more than one control, but all of these controls should relate directly to the purpose of the profile.

In this excercise, you will edit the control file to include a second test to examine the contents of a file. You will run the control file tests using `inspec exec` and see the new test fail. Then, you will write just enough code to make the both tests in the control file pass.

1. Open `~/learn-inspec/hello_spec.rb` and add a test to the control that checks if "hello world" is in the file.

    ```ruby
    # ~/learn-inspec/hello_spec.rb
    control "world-1.0" do
      impact 1.0
      title "hello world"

      desc "'hello.txt' should be a file and have the required content"
      describe file( 'hello.txt' ) do
        it { should exist }
        its ('content') { should match /hello world/ }
      end
    end
    ```

1. Run the test using `inspec exec` from the command line.

    You should show the second test failing because the hello.txt file is currently empty.

    ```bash
     # ~/learn-inspec
     $ inspec exec hello_spec.rb

     Profile: tests from hello_spec.rb
     Version: (not specified)
     Target:  local://

       ×  world-1.0: hello world (1 failed)
          ✔  File hello.txt should exist
          ×  File hello.txt content should match /hello world/
          expected "\n" to match /hello world/
          Diff:
          @@ -1,2 +1 @@
          -/hello world/


     Profile Summary: 0 successful, 1 failures, 0 skipped
     Test Summary: 1 successful, 1 failures, 0 skipped
   ```

1. Add the expected phrase "hello world" into the file and re-run the tests using `inspec exec`.

    This time, you should see both tests pass.

     ```bash
     # ~/learn-inspec
     $ echo "hello world" > hello.txt && inspec exec hello_spec.rb

     Profile: tests from hello_spec.rb
     Version: (not specified)
     Target:  local://

       ✔  world-1.0: hello world
          ✔  File hello.txt should exist
          ✔  File hello.txt content should match /hello world/

     Profile Summary: 1 successful, 0 failures, 0 skipped
     Test Summary: 2 successful, 0 failures, 0 skipped
    ```

## Scan a remote system

While InSpec can be used to verify that your local system conforms to your specifications, you can also use it to test your remote systems. In this exercise, you will create a virtual machine and scan it with your `hello_spec.rb` control, writing just enough code to make the tests pass on the remote virtual machine.

If you have not already done so, download and install both VirtualBox and Vagrant. Once you have VirtualBox and Vagrant installed, you will move to your `learn-inspec` directory and initialize a virtual machine using Vagrant. You will first create a Vagrant configuration file, called a Vagrantfile. Then you will start the virtual machine that you defined in your Vagrantfile.

1. In the learn-inspec directory, create a  Vagrantfile using `touch Vagrantfile`.

2. Using the editor of your choice, open the Vagrantfile and enter the following configuration:

 `~/learn-inspec/Vagrantfile`, in your editor.

    Delete the contents of the Vagrantfile and replace it with the following code:

    ```ruby
    # learn-inspec/Vagrantfile
    # This is the first Vagrantfile ubuntu server needed in the module.

    $script = <<SCRIPT
    sudo apt-get update
    sudo apt-get install -y curl
    curl https://omnitruck.chef.io/install.sh | sudo bash  -s -- -P chefdk
    SCRIPT

    Vagrant.configure(2) do |config|

      config.vm.define "node1" do |cs|
        cs.vm.box = 'bento/ubuntu-14.04'
        cs.vm.hostname = "node1.test"
        cs.vm.provision "shell", inline: $script
      end

    end
    ```

1. Start the machine using the new Vagrantfile.

    ```bash
    #~/learn-inspec
    $ vagrant up
    ```

    Additional commands such as `vagrant halt` command will stop the virtual machine, and `vagrant destroy` will stop and remove a virtual machine from your system.

1. Exploring your new virtual machine.

    By using, `vagrant global-status`, you are able to see all of virtual machines that are running on your system. This command provides the a uniqe id, assigned name, provider(hypervisor), state, and directory for each machine:

    ```bash
    # ~/learn-inspec
    $ vagrant global-status

    id       name   provider   state   directory
    -----------------------------------------------------------------------
    b8548e4  node1    VirtualBox running  /Users/yourname/learn-inspec

    ```

    The virtual machine that you just created should be named "node1".

1. Look up the forwarded port information and make note of it.

    You will need this number later in this exercise.

    Your port information will look like this, but perhaps with different guest and host numbers. Please make note of the four digit host number:

    ```bash
    # ~/learn-inspec
    $ vagrant port node1

    The forwarded ports for the machine are listed below. Please note that these values may differ from values configured in the Vagrantfile if the provider supports automatic port collision detection and resolution.

        22 (guest) => 2222 (host)

    ```

1. Open virtual machine using the `vagrant ssh NAME` command.

    In this case the command will be `vagrant ssh node1`. To close the ssh connection, just type `exit`.

    ```bash
    # ~/learn-inspec
    $ vagrant ssh node1

    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-112-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue May  9 18:41:10 UTC 2017

      System load:  0.22              Processes:           90
      Usage of /:   4.3% of 38.02GB   Users logged in:     0
      Memory usage: 6%                IP address for eth0: 10.0.2.15
      Swap usage:   0%

      Graph this data and manage this system at:
       https://landscape.canonical.com/

       Last login: Mon May  8 17:21:37 2017 from 10.0.2.2

       $ vagrant@node1:~ exit

       ```

1. Now test your virtual machine with the control that you wrote earlier in this module.

    From the `learn-inspec` directory, run the control using `inspec exec` and passing a `target` option, as shown in the following code example. After running the control, you should see both tests fail. The tests failed because neither the "hello.text" file nor its contents exist on the virtual machine.

    ```bash
    # ~/learn-inspec
    $ inspec exec hello_spec.rb --target=ssh://vagrant:vagrant@localhost:2222

    Profile: tests from hello_spec.rb
    Version: (not specified)
    Target:  ssh://vagrant@localhost:2222

      ×  world-1.0: hello world (2 failed)
         ×  File hello.txt should exist
         expected File hello.txt to exist
         ×  File hello.txt content should match /hello world/
         expected nil to match /hello world/

    Profile Summary: 0 successful, 1 failures, 0 skipped
    Test Summary: 0 successful, 2 failures, 0 skipped
    ```

1. To remediate the failing tests, open up your virtual machine and create both the file and its contents.

    Once you are finished, `exit` your virtual machine.

    ```bash
    # ~/learn-inspec
    $ vagrant ssh node1

    Welcome to Ubuntu 14.04.5 LTS (GNU/Linux 3.13.0-112-generic x86_64)

     * Documentation:  https://help.ubuntu.com/

      System information as of Tue May  9 18:58:53 UTC 2017

      System load:  0.0               Processes:           81
      Usage of /:   4.3% of 38.02GB   Users logged in:     0
      Memory usage: 17%               IP address for eth0: 10.0.2.15
      Swap usage:   0%

      Graph this data and manage this system at:
       https://landscape.canonical.com/

    $ vagrant@node1:~$ echo "hello world" > hello.txt
    $ vagrant@node1:~$ exit
    ```

1. In your `learn-inspec` directory, re-run the control targeting your virtual machine.

    Use `inspec exec hello_spec.rb --target=ssh://vagrant:vagrant@localhost:YOUR-PORT-NUM.`

    You should see both of controls succeeding, meaning that the control both found the file specified in the first test and the file contents specified in the second test.


     ```bash
     # ~/learn-inspec
     $ inspec exec hello_spec.rb --target=ssh://vagrant:vagrant@localhost:2222


     Profile: tests from hello_spec.rb
     Version: (not specified)
     Target:  ssh://vagrant@localhost:2222

       ✔  world-1.0: hello world
          ✔  File hello.txt should exist
          ✔  File hello.txt content should match /hello world/

     Profile Summary: 1 successful, 0 failures, 0 skipped
     Test Summary: 2 successful, 0 failures, 0 skipped
     ```

### Testing in Different Environments

InSpec offers you the ability to run your tests in a variety of environments, not only test local machines and remote vagrant machines, but also other sorts of remote machines, such as with SSH or WinRM. Here are a few examples of how to test different remote environments:

**Test Locally:**

```bash
$ inspec exec test.rb
```

**Test a machine remotely via SSH:**

```bash
$ inspec exec test.rb --key-files /path/to/ssh.key --target ssh://root@172.17.0.1
```

**Test a machine remotely via WinRM:**

```bash
$ inspec exec test.rb --target  winrm://Admin@192.168.1.2 --password super
```

**Test a Docker Container:**

```bash
$ inspec exec test.rb --target docker://containerid
```

## Create a Profile

Up until now, your InSpec tests exist in a single file. InSpec profiles allow you to group multiple test files together and provide additional metadata about the profile. Just like controls, profile metadata provide the ability to share additional context about your profile, such as a title and descripton. This context makes it easier for others to understand your profile and its results.

You will start off by creating an InSpec profile for your hello_spec.rb control.  You will then learn to run your tests both locally and remotely by running your new profile.

1. View your working directory with `pwd`.

    ```bash
    # ~/learn-inspec
    $ pwd
    /Users/username/learn-inspec
    ```

1. From the `learn-inspec` directory, enter `inspec init profile hello-world` at the command line prompt to create a profile named "hello-world".

    ```bash
    # ~/learn-inspec
    $ inspec init profile hello-world

    Create new profile at /Users/username/inspec/hello-world
    * Create directory controls
    * Create file controls/example.rb
    * Create file inspec.yml
    * Create directory libraries
    * Create file README.md
    * Create file libraries/.gitkeep
    ```

1. View the contents of your working directory using `ls -l` You will see that the hello-world profile is a directory.

    ```bash
    # ~/learn-inspec
    $ ls -l

    total 24
    -rw-r--r--  1 username  staff  359 Jun 20 15:06 Vagrantfile
    drwxr-xr-x  6 username  staff  204 Jun 20 15:39 hello-world
    -rw-r--r--  1 username  staff   12 Jun 20 14:35 hello.txt
    -rw-r--r--  1 username  staff  323 Jun 20 14:35 hello_spec.rb
    ```

1. Move to the hello-world directory and view its contents with 'tree'.

    ```bash
    # ~/learn-inspec
    $ cd hello-world
    $ tree

    hello-world tree
    .
    ├── README.md
    ├── controls
    │   ├── example.rb
    ├── inspec.yml
    └── libraries

    2 directories, 3 files

    ```

    A profile must have both the inspec.yml, which has metadata describing the profile, and the controls directory, which contains all of the tests. The README.md, which explains the profile, its scope and usage, and its libraries directories, which is where all of the InSpec resource extensions would be located, are optional.

1. Examine the README with `cat README.md`.

    ```bash
    # ~/learn-inspec/hello-world
    $ cat README.md

    # Example InSpec Profile

    This example shows the implementation of an InSpec [profile](../../docs/profiles.rst).
    ```

1. Change into the `controls` directory and examine the contents:

    ```bash
    # ~/learn-inspec/hello-world
    $ cd controls
    $ ls

    example.rb

    $ cat example.rb

    inspec
          encoding: utf-8
         # copyright: 2015, The Authors
         # license: All rights reserved

         title 'sample section'

         # you can also use plain tests
         describe file('/tmp') do
           it { should be_directory }
         end

         # you add controls here
         control 'tmp-1.0' do                        # A unique ID for this control
           impact 0.7                                # The criticality, if this control fails.
           title 'Create /tmp directory'             # A human-readable title
           desc 'An optional description...'
           describe file('/tmp') do                  # The actual test
             it { should be_directory }
           end
         end
    ```

1. You will not use the `example.rb` file in this tutorial, so delete it using `rm example.rb` from the command line.

1. Return to the "hello-world" directory and examine the inspec.yml.

    ```bash
    # ~/learn-inspec/hello-world/controls
    $ cd ..
    $ cat inspec.yml
      name: hello-world
      title: InSpec Profile
      maintainer: The Authors
      copyright: The Authors
      copyright_email: you@example.com
      license: All Rights Reserved
      summary: An InSpec Compliance Profile
      version: 0.1.0
    ```

    The inspec.yml contains the metadata for your profile. Both 'name' and 'version' are required for your profile to run -- you will notice that the content for these fields was automatically generated when you initialized the profile.

    ```bash
    # inspec.yml fields
    - "name": The projects name (REQUIRED).
    - "title": The profile human-readable name.
    - "maintainer": Who is responsible for keeping the profile up-to-date.
    - "copyright": copyright holder.
    - "copyright_email": support contact information for the profile, typically an email address.
    - "license": The kind of license that the profile has.
    - "summary": One line about the profile.
    - "description": Mulitple line description of the profile
    - "version": The profile version. (REQUIRED)
    - "supports": What platforms the profile will target.
       -  os-name ubuntu
          release: 14.04
    - "depends": The list of other profiles on which this profile depends.
       -  name: inspec
          path: /Users/username/inspec
   ```

1. Move the `hello_spec.rb` control that your wrote earlier in this lesson into the `controls` directory.

    You will use the `mv FILE NEW_LOCATION` command.

    ```bash
    # ~/learn-inspec/hello-world
    $ cd controls
    $ mv ~/learn-inspec/hello_spec.rb ~/learn-inspec/hello-world/controls/
    $ tree

    .
    ├── hello_spec.rb
    ```

    Notice that 'hello.txt' is still in the `~/inspec` directory.

1. Learn about the `inspec.yml` by changing it.

    Return to the `hello-world` directory.

    ```bash
    # ~/learn-inspec/hello-world/controls
    $ cd ..
    $ pwd
    ~/Users/yourname/learn-inspec/hello-world
    ```

    Open `inspec.yml` in the editor of your choice and remove the "version" line, so that it looks like:

    ```ruby
    # ~/learn-inspec/hello-world/inspec.yml
    name: hello-world
    title: InSpec Profile
    maintainer: The Authors
    copyright: The Authors
    copyright_email: you@example.com
    license: All Rights Reserved
    summary: An InSpec Compliance Profile
    ```

1. You can run the profile and its tests either from a higher-level directory with `inspec check hello-world`, or from within the profile directory with `inspec check .`, where '.' represents the current directory.

    Change directories back into the `learn-inspec` directory and run `inspec check hello-world` to verify this control.

    Notice that it errors out because the version metadata is missing from the `inspec.yml` file.

    ```bash
    # ~/learn-inspec
    $ cd ..
    $ inspec check hello-world

    Location:    hello-world
    Profile:     hello-world
    Controls:    1
    Timestamp:   2017-03-30T23:33:57+00:00
    Valid:       false

    ✖  hello/inspec.yml:0:0: Missing profile version in inspec.yml

    Summary:     1 errors, 0 warnings

    ```

    The output shows the control failing, but it also provides a lot of important information.

    ```bash
    # InSpec Check Explanation
    The output to the command shows:
       * the location of the tests
       * the name of the profile used
       * the total number of controls in the profile (1)
       * The time the tests in the controls were examined
       * If the profile is valid.
       * The reason that the profile is invalid
       * A summary of the check
    ```

1. Using the editor of your choice, add the version line back into the `inspec.yml` file.

    ```ruby
    # ~/learn-inspec/hello-world/inspec.yml
    name: hello-world
    title: InSpec Profile
    maintainer: The Authors
    copyright: The Authors
    copyright_email: you@example.com
    license: All Rights Reserved
    summary: An InSpec Compliance Profile
    version: 0.1.0
    ```

1. Run `inspec check .` again. This time the hello-world control should be valid.

    ```bash
    # ~/learn-inspec
    $ inspec check hello-world
    Location:    hello-world
    Profile:     hello-world
    Controls:    1
    Timestamp:   2017-04-12T13:55:45-07:00
    Valid:       true

    No errors or warnings
    ```

1. Run the full hello-world profile in the `~/learn-inspec` directory using `inspec exec hello-world`.

    ```bash
    # ~/learn-inspec
    $ cd ~/learn-inspec
    $ inspec exec hello-world --target=ssh://vagrant:vagrant@localhost:2222

    Profile: InSpec Profile (hello-world)
    Version: 0.1.0
    Target:  local://

      ✔  world-1.0: hello world
         ✔  File hello.txt should exist
         ✔  File hello.txt content should match /hello world/

    Profile Summary: 1 successful, 0 failures, 0 skipped
    Test Summary: 2 successful, 0 failures, 0 skipped

    ```

## Scan for compliance

In this exercise, you will add a new control to your profile that tests for SSH version using the `sshd_config` resource. You will then learn to check the validity of your control and how to run it against a remote system.

The sshd_config inspec audit resource tests the configuration data on a your virtual machine for the OpenSSH daemon located at <code class="file-path">/etc/ssh/sshd\_config</code> on Linux and Unix.

1. From your learn-inspec directory, check that your virtual machine is up and running.

    ```bash
    # ~/learn-inspec
    $ vagrant global-status
    ```
    If you virtual machine is not running, please spin it up:

    ```bash
    # ~/learn-inspec
    $ vagrant up
    ```

1. Change directory to `~/learn-inspec/hello-world/controls` and add a control named "sshd.rb".

    ```bash
    # ~/learn-inspec
    $ cd hello-world/controls
    $ touch sshd.rb
    ```

1. Open the file with an editor of your choice.

    Copy this content into the file:

    ```ruby
    control 'ssh-1.0' do
      impact 0.7
      title 'sshd protocol version 2'
      desc 'Verify sshd is using protocol version 2'
      describe sshd_config do
        its('Protocol') { should cmp 2 }
      end
    end
    ```

1. From the learn-inspec directory, run this control with `inspec check`, which will determine if the control is valid.

    This command only checks your profile for required informaton and syntax errors. It does not execute your tests locally or remotely.

    ```bash
    # ~/learn-inspec/hello-world/controls
    $ inspec check hello-world

    Location:    hello-world
    Profile:     hello-world
    Controls:    2
    Timestamp:   2017-06-21T15:33:41-07:00
    Valid:       true

    No errors or warnings
    ```

1. You can run the test on a remote system by passing `inspec exec` with a `--target` option.

    You should see that your tests were successful.

    ```bash
    # ~/learn-inspec

    Profile: InSpec Profile (hello-world)
    Version: 0.1.0
    Target:  ssh://vagrant@localhost:2222

         ✔  File hello.txt should exist
         ✔  File hello.txt content should match /hello world/
      ✔  ssh-1.0: sshd protocol version 2
         ✔  SSHD Configuration Protocol should cmp == 2

      File /tmp
         ✔  should be directory

    Profile Summary: 2 successful, 0 failures, 0 skipped
    Test Summary: 3 successful, 0 failures, 0 skipped
   ```
1. From the learn-chef directory stop and remove your vagrant machine using 'vagrant destroy'. If you do not use this step, you may end up with an orphaned virtual machine running on your system.  You can halt an orphaned machine by re-loading the Vagrantfile that you used to spin it up and then using the 'vagrant destroy' command.

## Make your profile more reusable

What happens if you want to to run the same tests on machines with different content?  Or what if you have information that should not be stored in plain-text, such as user names or passwords?  For these cases, InSpec uses attributes to act in different ways, depending on different conditions.

In this exercise, you will use two virtual machines and put a hello.txt file onto each one--with slightly different content in each file on each machine.  Then you will add an attribute and a test to your InSpec framework, run the test, see it fail, and then modify the content on each machine so that the test will pass in the correct instance, but otherwise it will fail.

1. Create two Ubuntu virtual machines by copying the following code into your Vagrantfile.

    ```ruby
    # ~/learn-inspec/Vagrantfile
    # encoding: utf-8
    # -*- mode: ruby -*-
    # vi: set ft=ruby :

    $script = <<SCRIPT
    sudo apt-get update
    sudo apt-get install -y curl
    curl https://omnitruck.chef.io/install.sh | sudo bash  -s -- -P chefdk
    SCRIPT

    Vagrant.configure(2) do |config|

      config.vm.define "node1" do |cs|
        cs.vm.box = 'bento/ubuntu-14.04'
        cs.vm.hostname = "node1.test"
        cs.vm.provision "shell", inline: $script
      end

      config.vm.define "node2" do |cs|
        cs.vm.box = 'bento/ubuntu-14.04'
        cs.vm.hostname = "node2.test"
        cs.vm.provision "shell", inline: $script
      end
    end
    ```

1. Enter `vagrant up`

1. Find and make note of the forwarded ports for both the **node1** and **node2** virtual machines.

    ```bash
    # ~/learn-inspec
    $ vagrant port node1

    The forwarded ports for the machine are listed below.
    Please note that these values may differ from values configured in the Vagrantfile if the provider supports automatic port collision detection and resolution.

    22 (guest) => 2222 (host)

    $ vagrant port node2

    The forwarded ports for the machine are listed below.
    Please note that these values may differ from values configured in the Vagrantfile if the provider supports automatic port collision detection and resolution.

    22 (guest) => 2200 (host)
    ```

1. Place a file on the virtual machine **node1** containing "hello world" then exit out of the virtual machine.

    ```bash
    # ~/learn-inspec
    $ vagrant ssh node1
    vagrant@node1$ echo "hello world" > hello.txt
    vagrant@node1$ exit
    ```
1. Place a file on the virtual machine **node2** containing "hello universe" then exit out of the virtual machine.

    ```bash
    # ~/learn-inspec
    $ vagrant ssh node2
    vagrant@node2$ echo "hello universe" > hello.txt
    vagrant@node2$ exit
    ```
1. Run `inspec exec` with a `--target` against each virtual machine.

    You will see one test one succeeding and one test failing.

    ```bash
    # ~/learn-inspec
    $ inspec exec hello-world --target=ssh://vagrant:vagrant@localhost:2222

    Profile: InSpec Profile (hello-world)
    Version: 0.1.0
    Target:  ssh://vagrant@localhost:2222

      ✔  world-1.0: hello world
         ✔  File hello.txt should exist
         ✔  File hello.txt content should match /hello world/
      ✔  ssh-1.0: sshd protocol version 2
         ✔  SSHD Configuration Protocol should cmp == 2

    Profile Summary: 2 successful, 0 failures, 0 skipped
    Test Summary: 3 successful, 0 failures, 0 skipped

    $ inspec exec hello-world --target=ssh://vagrant:vagrant@localhost:2200

    Profile: InSpec Profile (hello-world)
    Version: 0.1.0
    Target:  ssh://vagrant@localhost:2200

      ×  world-1.0: hello world (1 failed)
         ✔  File hello.txt should exist
         ×  File hello.txt content should match /hello world/
         expected "hello universe\n" to match /hello world/
         Diff:
         @@ -1,2 +1,2 @@
         -/hello world/
         +hello universe

      ✔  ssh-1.0: sshd protocol version 2
         ✔  SSHD Configuration Protocol should cmp == 2

    Profile Summary: 1 successful, 1 failures, 0 skipped
    Test Summary: 2 successful, 1 failures, 0 skipped

    ```

1. Modify the world-1.0 control in `~/learn-inspec/hello-world/controls/hello_spec.rb` to add a "role" attribute:

    ```ruby
    var_role = attribute('role', default: 'node1', description: "the node's role")

    control "world-1.0" do
      impact 1.0
      title "hello world"

      desc "'hello.txt' should be a file and have the required content"
      describe file( 'hello.txt' ) do
        it { should exist }
        its ('content') { should match /hello_spec/ }
      end
    end
    ```

1. Add in an `if` conditional block to change the expected message based on the role.

    ```ruby
    var_role = attribute('role', default: 'node1', description: "the node's role")

    control "world-1.0" do
      impact 1.0
      title "hello world"

      desc "'hello.txt' should be a file and have the required content"
      describe file( 'hello.txt' ) do
        it { should exist }
        its ('content') { should match /hello_spec/ }
      end

      # ADD IN THIS BLOCK:
      if var_role == 'node1'
        msg = 'hello world'
      else
        msg = 'hello universe'
      end

    end
    ```

1. Modify the control to use `msg` instead of a hard-coded string.

    ```ruby
    var_role = attribute('role', default: 'node1', description: "the node's role")

    control "world-1.0" do
      impact 1.0
      title "hello world"

      desc "'hello.txt' should be a file and have the required content"
      describe file( 'hello.txt' ) do
        it { should exist }
        # CHANGE THIS LINE:
        its ('content') { should match /#{msg}/ }
      end

      # ADD IN THIS BLOCK:
      if var_role == 'node1'
        msg = 'hello world'
      else
        msg = 'hello universe'
      end

    end
    ```

1. You will need to add attribute files into hello-world by adding a file directory and then inserting two attribute files at that location.

1. From the hello-world directory, use `tree` to examine the directory.
    ```bash
    $ tree
    .
    ├── README.md
    ├── controls
    │   ├── hello_spec.rb
    │   ├── profile.rb
    │   └── sshd.rb
    ├── hello.txt
    ├── inspec.lock
    ├── inspec.yml
    └── libraries
    ```
1. From the command line at hello-world make a new directory named "files", using `mkdir files`.

1. Confirm the presence of the files directory using `tree`:
    ```bash
    $ tree
    .
    ├── README.md
    ├── controls
    │   ├── hello_spec.rb
    │   ├── profile.rb
    │   └── sshd.rb
    ├── files
    ├── hello.txt
    ├── inspec.lock
    ├── inspec.yml
    └── libraries
    ```

1. Navigate to the files directory and add attributes files containing the role attribute.

     The profile attributes will be saved in the ".yml" or "yaml" format. Each of these files will be slightly different from the other.

    ```bash
    # ~/learn-inspec/hello-world/files
    $ echo "role: node1" > profile-node1-attribute.yml
    $ echo "role: node2" > profile-node2-attribute.yml
    ```

1. Run `inspec exec` passed with `--attrs` and the name of the attribute file.

    Both commands should succeed on both 'node1' and 'node2'

    ```bash
    # ~/learn-inspec
    $ nspec exec hello-world  --target=ssh://vagrant:vagrant@localhost:2222 --attrs hello-world/files/profile-node1-attribute.yml

    Target:  ssh://vagrant@localhost:2222

    Profile: InSpec Profile (hello-world)
    Version: 0.1.0
    Target:  ssh://vagrant@localhost:2222

      ✔  world-1.0: hello world
         ✔  File hello.txt should exist
         ✔  File hello.txt content should match /hello world/
      ✔  ssh-1.0: sshd protocol version 2
         ✔  SSHD Configuration Protocol should cmp == 2

    Profile Summary: 2 successful, 0 failures, 0 skipped
    Test Summary: 3 successful, 0 failures, 0 skipped

    $ inspec exec hello-world --target=ssh://vagrant:vagrant@localhost:2200 --attrs hello-world/files/profile-node2-attribute.yml

    Profile: InSpec Profile (hello-world)
    Version: 0.1.0
    Target:  ssh://vagrant@localhost:2200

      ✔  world-1.0: hello world
         ✔  File hello.txt should exist
         ✔  File hello.txt content should match /hello universe/
      ✔  ssh-1.0: sshd protocol version 2
         ✔  SSHD Configuration Protocol should cmp == 2

    Profile Summary: 2 successful, 0 failures, 0 skipped
    Test Summary: 3 successful, 0 failures, 0 skipped
    ```

As you can see, InSpec makes testing different environments with a single control pretty simple. The ease of extending controls reduces the inevitable sprawl of controls and profiles that happens when every individual system, such as ones with different operating systems or different node roles, need a suite of similar tests designated for that purpose only.

1. Well done! Before you move on, remember to remove both of your virtual machines using the `vagrant destroy` command.

## Conclusion

In this module, you learned to write a basic InSpec control, integrated your tests into a profile, and used these tools to scan both local and remote systems. You were also introduced to a few of the different environments where you can integrate InSpec into your continuous automation workflow, such as WinRM, Docker, and the cloud. Finally, you learned to use attributes to test a single control in more than one environment, which will make your controls extendable and flexible.

[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).
