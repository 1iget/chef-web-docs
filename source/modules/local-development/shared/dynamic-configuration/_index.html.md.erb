Most Chef users store the <code class="file-path">.kitchen.yml</code> file in source control along with their cookbooks so that other users can also use it to verify their own work. Having the <code class="file-path">.kitchen.yml</code> file readily available can help you add and verify features more quickly, or move to newer platforms.

But you might notice two problems with this approach.

1. Not all users use the same Test Kitchen driver. For example, one user might be using the EC2 driver and another user might be using Hyper-V.
1. The <code class="file-path">.kitchen.yml</code> file can contain sensitive information such as passwords and access credentials. If you share your cookbook on Chef Supermarket or on GitHub, you might not want to share this information.

Here are some recommended ways you can manage your Test Kitchen configuration files so that they are available to others, but also protect access credentials and other sensitive information.

The option you choose depends on your preferences and what's easiest for others. You can document what others need to do to use your configuration in your cookbook's README.

You can find examples of these methods on [Chef Supermarket](http://supermarket.chef.io/).

[START_BOX]

## 1. Provide a configuration for the Vagrant driver

Most Chef cookbooks provide configuration for at least the Vagrant Test Kitchen driver because the Vagrant driver uses free software and doesn't require passwords or other sensitive information to run.

[END_BOX]

[START_BOX]

## 2. Use dynamic configuration

It's also common to use [dynamic configuration](http://kitchen.ci/docs/getting-started/dynamic-configuration). For example, you can create a file named <code class="file-path">.kitchen.local.yml</code>, which you do not check into source control, that overrides the default configuration with your specific details. The <code class="file-path">.gitignore</code> file that's generated when you run the `chef generate cookbook` command automatically excludes <code class="file-path">.kitchen.local.yml</code> from source control management.

Consider this example configuration that uses the Amazon EC2 Test Kitchen driver.

```yaml
# ~/learn-chef/cookbooks/example_cookbook/.kitchen.yml
---
driver:
  name: ec2
  aws_ssh_key_id: learnchef
  region: us-west-2
  availability_zone: a
  subnet_id: subnet-eacb348f
  instance_type: m1.small
  image_id: ami-c3b3b1f3
  security_group_ids: ['sg-2d3b3b48']
  retryable_tries: 120

provisioner:
  name: chef_zero

transport:
  ssh_key: C:\Users\LearnChef\.ssh\learnchef.pem

verifier:
  name: inspec

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[example_cookbook::default]
    attributes:
```

Notice a few potential issues with this configuration. The configuration mentions details that are specific to the user's AWS account, including the user's:

* SSH key name
* region and availability zone
* subnet ID
* security group ID
* AMI ID

These details are not transferrable to users who work with a different AWS account. It's also not clear which details need to be modified in order to run the cookbook.

You can move all of the information that's specific to your AWS account to <code class="file-path">.kitchen.local.yml</code>, like this.

```yaml
# ~/learn-chef/cookbooks/example_cookbook/.kitchen.local.yml
---
driver:
  aws_ssh_key_id: learnchef
  region: us-west-2
  availability_zone: a
  subnet_id: subnet-eacb348f
  image_id: ami-c3b3b1f3
  security_group_ids: ['sg-2d3b3b48']

transport:
  ssh_key: C:\Users\LearnChef\.ssh\learnchef.pem
```

Your <code class="file-path">.kitchen.yml</code> file now contains only the general configuration settings.

```yaml
# ~/learn-chef/cookbooks/example_cookbook/.kitchen.yml
---
driver:
  name: ec2
  instance_type: m1.small
  retryable_tries: 120

provisioner:
  name: chef_zero

verifier:
  name: inspec

platforms:
  - name: windows-2012r2

suites:
  - name: default
    run_list:
      - recipe[example_cookbook::default]
    attributes:
```

Users would be required to create their own <code class="file-path">.kitchen.local.yml</code> file that contains their settings. The cookbook's README should explain which settings are needed.

[END_BOX]

[START_BOX]

## 3. Use environment variables

Alternatively, you can be more explicit about the required settings by using environment variables. <code class="file-path">.kitchen.yml</code> can contain [Embedded Ruby](https://en.wikipedia.org/wiki/ERuby) (ERB) templates. Using this method, your <code class="file-path">.kitchen.yml</code> file might look like this (here, a <code class="file-path">.kitchen.local.yml</code> file is not required.)

<%= partial 'modules/local-development/shared/dynamic-configuration/kitchen-yaml-envvars' %>

Users are required to set these environment variables before running Test Kitchen. The advantage here is that it's clear which settings are required.

[END_BOX]

[START_BOX]

## 4. Provide multiple configuration files

Another common option is to provide the Vagrant configuration in <code class="file-path">.kitchen.yml</code> and other configurations in separate files.

For example, you might provide a configuration that runs in the cloud in a file named <code class="file-path">.kitchen.cloud.yml</code>. This enables you to provide a standard configuration that runs on Vagrant and an option to test your configuration on one or more cloud providers.

To run the cloud configuration, you would set the `KITCHEN_YAML=.kitchen.cloud.yml` environment variable. Here's an example of how to run `kitchen converge` using the cloud configuration on a Linux or macOS workstation.

```bash
# ~/learn-chef/cookbooks/example_cookbook
$ KITCHEN_YAML=.kitchen.cloud.yml kitchen converge
```

[END_BOX]
