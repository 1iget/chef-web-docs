<%
  metadata = current_page.parent.parent.data
  cookbook = metadata.cookbook
  cookbook_escaped = cookbook.gsub('_', '\_')
  environment = current_page.parent.data.environment
  platform = case current_page.parent.parent.data.platform_id
  when 'rhel'
    {
      id: 'rhel',
      name: 'CentOS',
      article: 'a'
    }
  when 'ubuntu'
    {
      id: 'ubuntu',
      name: 'Ubuntu',
      article: 'an'
    }
  when 'windows'
    {
      id: 'windows',
      name: 'Windows Server',
      article: 'a'
    }
  end
  def windows?
    current_page.parent.parent.data.platform_id == 'windows'
  end
%>
<% key_point "Test Kitchen can help you detect and remedy failures before your change reaches production." %>

In the _Manage a node_ tutorial, you applied a configuration change that [failed on your node](/modules/manage-a-node/<%= platform[:id] %>/hosted/resolve-a-failure). Imagine your node represents a piece of your production infrastructure. A failure in production can cause both an interruption to your team as well as reduced access to services for your users.

In this part, you'll repeat the exercise where you apply a change that, although it might appear correct, will actually fail on your test instance. You'll then remedy the failure and verify that `chef-client` succeeds.

In doing so, you'll see how, with Test Kitchen, you can detect and remedy failures _before_ your change reaches production.

[START_BOX]

<% if windows? %>
## 1. Assign read access to the IIS_IUSRS group

Let's make the same change to the web server cookbook that we did [previously](/modules/manage-a-node/<%= platform[:id] %>/hosted/resolve-a-failure#step1). By default, IIS provides access to web content to the `IIS_IUSRS` group. But let's modify our Chef recipe to ensure that this group has read rights to the <% fp 'c:\inetpub\wwwroot' %> directory.
<% else %>
## 1. Assign an owner to the home page

Let's make the same change to the web server cookbook that we did [previously](/modules/manage-a-node/<%= platform[:id] %>/hosted/resolve-a-failure#step1). Here, we want to assign the `web_admin` user as the owner of the home page, <% fp '/var/www/html/index.html' %>. We also want to configure the home page so that the `web_admin` user has read and write access, and everyone else has read-only access.
<% end %>

Recall that your default recipe looks like this.

<% code_snippet(page: current_page, path: "set-web-content-owner/initial-default-recipe-#{cookbook}-#{environment}") %>

<% if windows? %>
To assign read rights to the `IIS_IUSRS` group, you use the `directory` resource's `rights` property.

Modify your default recipe like this. You may notice this recipe has a mistake, but go ahead and copy the recipe exactly as you see it.
<% else %>
Modify your default recipe to look like this. Note the use of the `template` resource's `mode`, `owner`, and `group` properties.
<% end %>

<% code_snippet(page: current_page, path: "set-web-content-owner/add-web-user-err-#{cookbook}-#{environment}") %>

[END_BOX]

[START_BOX]

## 2. Apply the changes to your test instance

Now see what happens when you run `kitchen converge`. Because you destroyed your test instance in the previous part, Test Kitchen creates a new instance for you.

<% command_snippet(page: current_page, path: "set-web-content-owner/kitchen-converge-#{cookbook}-#{environment}-3", features: [:stdin, :stdout, :stderr]) %>

Here you see the same failure that you saw [previously](/modules/manage-a-node/<%= platform[:id] %>/hosted/resolve-a-failure#step2) when you ran this code on your node.

<% if windows? %>
```bash
Chef::Exceptions::Win32APIError
-------------------------------
No mapping between account names and security IDs was done.
```
<% else %>
```bash
Chef::Exceptions::UserIDNotFound
--------------------------------
cannot determine user id for 'web_admin', does the user exist on this system?
```
<% end %>

You also see that Test Kitchen returns with a non-zero exit code.

<% command_snippet(page: current_page, path: "set-web-content-owner/kitchen-converge-#{cookbook}-#{environment}-3", features: :exitstatus) %>

[END_BOX]

[START_BOX]

## 3. Resolve the failure

Now you'll resolve the failure just as you did [previously](/modules/manage-a-node/<%= platform[:id] %>/hosted/resolve-a-failure#step3).

<% if windows? %>
Modify your default recipe to use the correct account name (`IIS_USRS` becomes `IIS_IUSRS`.)
<% else %>
Modify your default recipe by using the [group](https://docs.chef.io/resource_group.html) and [user](https://docs.chef.io/resource_user.html) resources to define the `web_admin` group and user.
<% end %>

<% code_snippet(page: current_page, path: "set-web-content-owner/add-web-user-fix-#{cookbook}-#{environment}") %>

Now run `kitchen converge` to apply the configuration.

<% command_snippet(page: current_page, path: "set-web-content-owner/kitchen-converge-#{cookbook}-#{environment}-4") %>

As before, run `kitchen exec` to verify the contents of your web server's home page.

<% command_snippet(page: current_page, path: "set-web-content-owner/kitchen-exec-#{cookbook}-#{environment}-2") %>

<% if windows? %>
Also verify that `IIS_IUSRS` has read access to the <% fp 'c:\inetpub\wwwroot' %> directory.
<% else %>
Also verify that the `web_admin` user is the owner of the home page and that the home page has the expected file permissions.
<% end %>

<% command_snippet(page: current_page, path: "set-web-content-owner/kitchen-exec-#{cookbook}-#{environment}-3") %>

Success! With local development, you can make changes, experiment, and verify that your configuration does what you expect using local test instances. You now have increased confidence that your change will work in production.

[COMMENT] Unlike in the previous tutorial, you did not modify your cookbook's version in the <% fp 'metadata.rb' %> file. You only need to increment the version number when you upload your cookbook to the Chef server.

Feel free to experiment further with your test instance. When you're done, be sure to run `kitchen destroy` to delete your instance.

[END_BOX]

<% next_page(current_page) do %>

In this tutorial, you used Test Kitchen to configure a basic web server on <%= platform[:article] %> <%= platform[:name] %> virtual machine, all from your workstation. You also saw how with local development, you can detect and resolve failures before your change appears in production.

Local development gives you the time and flexibility to experiment, iterate, and fix problems early in the development cycle. You only upload your cookbooks to the Chef server and apply them to your bootstrapped nodes after you've confirmed from your workstation that your configuration code works as you expect.

In the next tutorial, [Develop a web app cookbook](/manage-a-web-app/<%= platform[:id] %>/), you'll use the skills you've just learned to build a basic but complete web application that uses a web server, a database, and scripting. You'll learn how to leverage cookbooks that are written by the Chef community and resolve cookbook dependencies to create cookbooks that are more reusable.

[TRAINING] Ready to dig deeper? Join us in-person or online at an upcoming instructor-led training event. [Learn more about our course offerings](https://www.chef.io/training/) or [check out our upcoming classes](https://www.chef.io/blog/events/category/training-events/). Use discount code **LEARN-CHEF** to save 10%. Use what you've learned to [gain official Chef certification](https://training.chef.io/certification).

<% end %>
