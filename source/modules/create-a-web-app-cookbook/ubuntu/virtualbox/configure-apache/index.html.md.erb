---
title: 'Configure Apache'
order: 3
keywords: TODO
time_to_complete: 25 minutes
snippet_path: create-a-web-app-cookbook/ubuntu/vagrant/configure-apache-ubuntu-vagrant
snippet_workstation: ubuntu
headings: [
  { label: '1. Reference the cookbook', href: '#step1' },
  { label: '2. Specify the document root', href: '#step2' },
  { label: '3. Create the configuration file', href: '#step3' },
  { label: '4. Create the web recipe', href: '#step4' },
  { label: '5. Set the web recipe to run', href: '#step5' },
  { label: '6. Apply the configuration', href: '#step6' },
  { label: '7. Verify the configuration', href: '#step7' }
]
---
Now let's configure Apache. Here you set up an Apache configuration file and install the Apache package and start its service.

<img src="/assets/images/misc/lamp-stack-a.svg" style="width: 300px; box-shadow: none;"/>

In [Learn the basics](/modules/learn-the-basics/) and [Manage a node](/modules/manage-a-node-chef-server/), you wrote a basic Apache cookbook from scratch. For this project, we want to leverage additional Apache features, which would take some effort to set up.

That's where the [httpd](https://supermarket.chef.io/cookbooks/httpd) cookbook on Chef Supermarket comes in. Chef Supermarket is a place for the community to share cookbooks. The `httpd` cookbook provides common functionality such as setting up virtual hosting so you don't have to reinvent the wheel.

[START_BOX]

## 1. Reference the httpd cookbook

You don't need to manually download cookbooks from Chef Supermarket to use them. You'll learn how to automatically download cookbooks in a bit, but the first step is to reference the cookbooks you want to load.

The way you load one cookbook from inside another is to reference it in your cookbook's metadata file, <% fp('~/learn-chef/cookbooks/lamp/metadata.rb') %>. To use the `httpd` cookbook, append the following `depends` line to <% fp('metadata.rb') %> making the entire file look like this.

<% code_snippet(page: current_page, path: 'reference-the-httpd-cookbook-ubuntu-vagrant/metadata-ubuntu-vagrant-1') %>

Notice you specify the version of the `httpd` cookbook. Specifying, or _pinning_, the cookbook version helps you lock down functionality to a certain point in time. When a newer version of a cookbook is released, you can first verify and test that version before you deploy it to production. That way, you can adopt the latest changes and functionality when you're ready.

How did we know to specify version `0.4`? One way is by reading the latest version from the `httpd` cookbook's [page](https://supermarket.chef.io/cookbooks/httpd) on Supermarket.

![The httpd cookbook version](misc/supermarket_httpd_version.png)

Another way to get version information is through the `knife supermarket show` command. The following command retrieves information for the `apt` cookbook and searches the result for the latest version.

<% command_snippet(page: current_page, path: 'reference-the-httpd-cookbook-ubuntu-vagrant/knife-supermarket-show-httpd-ubuntu-vagrant-1') %>

There are [multiple ways to specify version constraints](http://docs.chef.io/cookbook_versions.html). The `~>` syntax, called the _pessimistic version constraint_, tells Chef that we want the latest version of the `apt` cookbook that is greater than or equal to `0.4` but less than `1.0`.

Most Chef cookbooks follow the [Semantic Versioning](http://semver.org) scheme. Version numbers are typically written as MAJOR.MINOR.PATCH, where:

* MAJOR specifies a change that's incompatible with previous versions.
* MINOR specifies new functionality that's backwards-compatible with previous versions.
* PATCH specifies backwards-compatible bug fixes.

When you pin a cookbook, it's common to specify only the first two digits (omitting PATCH), for example, '0.4'. The second and third digits typically relate to changes that are compatible with prior versions. Therefore, we want the latest version that's less than the next MAJOR version, 1.0.

[Learn more about Semantic Versioning and how it relates to Ruby code](http://guides.rubygems.org/patterns/)

[COMMENT] For this tutorial, just to ensure that what you see matches the output that is shown, we recommend that you use the versions that we specify, even if a newer version is available. We'll periodically update this tutorial to match newer versions of the community cookbooks.

[COMMENT] Keep in mind that for now your goal is to learn how Chef works. It's OK if you don't understand every detail of how the community cookbooks work because you're working in a safe environment. As you gain experience, you'll want to read and understand the code and documentation to ensure that the cookbooks you get from Chef Supermarket do exactly what you expect before you apply them to your production environment.

[END_BOX]

[START_BOX]

## 2. Specify the document root directory

By default, Apache configures the default home page at <% fp '/var/www/html/index.html' %>. For our cookbook, let's say we want this location to be configurable.

In [Manage a node](/modules/manage-a-node-chef-server/), you learned about some of the built-in node attributes that Chef provides, such as the node's IP address. You can also define your own custom attributes that are specific to your policy. Let's create an attributes file that will define all of the custom attributes for your LAMP stack cookbook.

Run the following from the <% fp('~/learn-chef/cookbooks/lamp') %> directory to create an attributes file named <% fp 'default.rb' %>.

<% command_snippet(page: current_page, path: 'specify-the-document-root-ubuntu-vagrant/chef-generate-attribute-ubuntu-vagrant-1') %>

This command adds the <% fp 'default.rb' %> attributes file to the <% fp '~/learn-chef/cookbooks/lamp/attributes' %> directory.

Now add the following to your attributes file, <% fp 'default.rb' %>.

<% code_snippet(page: current_page, path: 'specify-the-document-root-ubuntu-vagrant/attribute-ubuntu-vagrant-1') %>

In the next step, you'll use this node attribute to set up the Apache configuration file, which specifies the document root location.

Later in this tutorial, you'll see how to overwrite this node attribute to specify a different location for your web content.

[END_BOX]

[START_BOX]

## 3. Create the Apache configuration file

Next, let's create the [Apache configuration file](https://httpd.apache.org/docs/2.4/configuring.html).

The configuration file requires information that's specific to your node, such as its hostname, so we'll create a template file that contains placeholders. Then we'll use the [template](https://docs.chef.io/resource_template.html) resource to dynamically fill in those placeholders when Chef runs.

Start by generating a template file, <% fp 'default.conf.erb' %>, like this.

<% command_snippet(page: current_page, path: 'create-apache-config-ubuntu-vagrant/chef-generate-template-ubuntu-vagrant-1') %>

This command adds the template file <% fp 'default.conf.erb' %> to the <% fp '~/learn-chef/cookbooks/lamp/templates' %> directory. The command appends the <% fp '.erb' %> extension for you. Remember, the <% fp '.erb' %> extension means that the file can hold placeholders that are filled in when the recipe runs. That's what makes the file a template.

Add this to <% fp 'default.conf.erb' %>.

<% code_snippet(page: current_page, path: 'create-apache-config-ubuntu-vagrant/template-default-conf-ubuntu-vagrant') %>

The configuration file uses two node attributes &ndash; `node['hostname']` and `node['lamp']['web']['document_root']`.

* `node['hostname']` is one of many [built-in node attributes](https://docs.chef.io/ohai.html#automatic-attributes) that Chef provides for you. This attribute defines the node's hostname.
* `node['lamp']['web']['document_root']` defines the site's document root, and is the node attribute that you used in the previous step to specify the home page.

The `AddType` and `DirectoryIndex` directives help prepare us to serve PHP files.

[END_BOX]

[START_BOX]

## 4. Create the web recipe

So far, the `lamp` cookbook contains the default recipe. For our LAMP configuration cookbook, we'll use what's called the _application cookbook pattern_. An application cookbook typically contains multiple recipes, where each recipe configures one part of the system. The default recipe, <% fp 'default.rb' %>, lists these recipes in the order needed to build your application or service.

To configure Apache, create a recipe named `web`. Run this command to create it.

<% command_snippet(page: current_page, path: 'create-web-recipe-ubuntu-vagrant/chef-generate-recipe-web-ubuntu-vagrant') %>

The first thing you need to do in the `web` recipe is to ensure that the document root directory exists. To do that, add the following [directory](https://docs.chef.io/resource_directory.html) resource to your `web` recipe, <% fp '~/learn-chef/cookbooks/lamp/recipes/web.rb' %>.

<% code_snippet(page: current_page, path: 'create-web-recipe-ubuntu-vagrant/recipe-web-ubuntu-vagrant-1') %>

The `recursive` property ensures that any parent directories are also created.

Next, let's configure Apache. We'll use the `httpd` cookbook's `httpd_config` and `httpd_service` resources to do that.

* The `httpd_config` resource copies the configuration file for the site to the appropriate location.
* The `httpd_service` resource ensures that the Apache package is installed and gets the service up and running.

Write out <% fp 'web.rb' %> like this.

<% code_snippet(page: current_page, path: 'create-web-recipe-ubuntu-vagrant/recipe-web-ubuntu-vagrant-2') %>

The `httpd_service` resource supports multiple simultaneous Apache instances that you can identify and manage. The name `default` will produce a service named `apache2-default`.

PHP [must be run](http://www.php.net/manual/en/faq.installation.php#faq.installation.apache2) in a single-threaded [Multi-Processing Module](http://httpd.apache.org/docs/2.2/mpm.html), or MPM. Therefore, we set the `mpm` property to use the [prefork](http://httpd.apache.org/docs/2.2/mod/prefork.html) module.

[END_BOX]

[START_BOX]

## 5. Set the web recipe to run

To run the `web` recipe, append an `include_recipe` line to your cookbook's default recipe, making the entire file look like this.

<% code_snippet(page: current_page, path: 'run-web-recipe-ubuntu-vagrant/run-web-recipe-ubuntu-vagrant') %>

[END_BOX]

[START_BOX]

## 6. Apply the configuration

You are now ready to try out the configuration. Run `kitchen converge` to apply the `lamp` cookbook.

<% command_snippet(page: current_page, path: 'apply-the-apache-configuration-ubuntu-vagrant/kitchen-converge-ubuntu-vagrant-2') %>

You'll see from the output that:

* the Apache package, `apache2` on Ubuntu, was installed.
* the Apache configuration template was applied, replacing the specified node attributes with their values.
* the `apache2-default` service was started and enabled.

Now let's verify the web server configuration. Recall that your Test Kitchen configuration file specifies an IP address of 192.168.34.34 for the instance.

<% code_snippet(page: current_page, path: 'apply-the-apache-configuration-ubuntu-vagrant/review-kitchen-yml-ubuntu-vagrant-1') %>

From a web browser on your workstation, navigate to http://192.168.34.34. You'll see something like this.

![](misc/manage_customers_placeholder_34.png)

You see that your web configuration lists the directory index. That's because we haven't yet added any site content.

You can also run this `kitchen exec` command to run `wget` on your instance.

<% command_snippet(page: current_page, path: 'apply-the-apache-configuration-ubuntu-vagrant/kitchen-exec-wget-ubuntu-vagrant-1') %>

[END_BOX]

[START_BOX]

## 7. Write InSpec tests that verify the configuration

So far, you've verified the configuration manually. It's completely reasonable to perform some sort of manual verification as you add new features. Manual testing should happen quickly, for example, verifying that your service is running or that the home page loads.

However, say you later make a change or add a new feature and your configuration no longer works as you expect. It would become tedious to manually track down how your change broke your configuration. Most Chef users incorporate some sort of automated testing to help ensure that new features don't break existing functionality, and to help pinpoint the source of failure when things do break.

In [Test driven development with InSpec](/modules/tdd-with-inspec/), we propose a _test-driven_ approach to infrastructure testing, where you write your tests first before you write any Chef code. You can also write tests after you get your configuration working, once you have a more complete understanding of what end state to expect.

If you're new to automated testing, you can later read [Getting started with automated testing](/modules/get-started-with-testing/) to get started. For now, let's write a few tests that help automatically verify the web configuration.

When you run the `chef generate recipe` command, Chef creates a default test for you in the <% fp 'test/smoke/default' %> directory.

Modify your copy of <% fp '~/learn-chef/cookbooks/lamp/test/smoke/default/web_test.rb' %> like this.

<% code_snippet(page: current_page, path: 'verify-the-apache-configuration-ubuntu-vagrant/inspec-web-ubuntu-vagrant-1') %>

These tests verify that:

1. the `apache2` package is installed.
1. the `apache2-default` service is enabled and running.
1. Apache returns a 200 OK response.
1. port 80 is listening to external traffic.

A more complete implementation might contain additional tests. This code uses the InSpec [package](http://inspec.io/docs/reference/resources/package/), [service](http://inspec.io/docs/reference/resources/service/), [command](http://inspec.io/docs/reference/resources/command/), and [port](http://inspec.io/docs/reference/resources/port/) resources. Many InSpec resources resemble their corresponding Chef resources, for example, [package](https://docs.chef.io/resource_package.html).

We don't need the default tests, located in <% fp 'default_test.rb' %>, so remove them now.

<% code_snippet(page: current_page, path: 'verify-the-apache-configuration-ubuntu-vagrant/inspec-default-ubuntu-vagrant-1') %>

Recall that your <% fp '.kitchen.yml' %> file looks like this.

<% code_snippet(page: current_page, path: 'verify-the-apache-configuration-ubuntu-vagrant/review-kitchen-yml-ubuntu-vagrant-2') %>

The `verifier` section specifies that the cookbook contains InSpec tests. The `inspec_tests` part specifies where the tests are located.

Run `kitchen verify` to run the tests.

<% command_snippet(page: current_page, path: 'verify-the-apache-configuration-ubuntu-vagrant/kitchen-verify-apache-ubuntu-vagrant-1') %>

You see that all tests pass. If any test fails, InSpec shows you the actual result compared to the expected result. This gives you a starting point for investigating the failure.

You've now successfully set up the Linux and Apache portions of your LAMP stack.

<img src="/assets/images/misc/lamp-stack-la.svg" style="width: 300px; box-shadow: none;"/>

[END_BOX]

<% next_page(current_page) do %>

Great work! You now have a working Apache configuration. Now that we have confidence that things are working, we can move on to setting up MySQL.

<% end %>
