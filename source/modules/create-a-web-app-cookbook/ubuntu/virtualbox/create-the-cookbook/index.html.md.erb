---
title: 'Create the cookbook'
order: 2
keywords: TODO
time_to_complete: 15 minutes
snippet_path: create-a-web-app-cookbook/ubuntu/vagrant/create-the-cookbook-ubuntu-vagrant
snippet_workstation: ubuntu
quiz_path: quizzes/create-a-web-app-cookbook/ubuntu/create-the-cookbook.yml
headings: [
  { label: '1. Create the lamp cookbook', href: '#step1' },
  { label: '2. Ensure the apt cache is updated', href: '#step2' },
  { label: '3. Apply the lamp cookbook', href: '#step3' }
]
---
In this part, you create the `lamp` cookbook. Recall that a cookbook provides structure to your Chef code. A cookbook contains things such as recipes and templates.

You also ensure that the `apt` cache is up to date and then run the cookbook on an Ubuntu 14.04 instance using Test Kitchen. Having an Ubuntu system to work with satisfies the Linux requirement for our LAMP stack configuration.

<img src="/assets/images/misc/lamp-stack-l.svg" style="width: 300px; box-shadow: none;"/>

[START_BOX]

## 1. Create the lamp cookbook

To get started, first move to the <% fp('~/learn-chef') %> directory.

<% command_snippet(page: current_page, path: 'create-the-cookbook-ubuntu-vagrant/cd-learn-chef-ubuntu-vagrant-1', features: :stdin) %>

Ensure that you have a directory named <% fp('~/learn-chef/cookbooks') %>.

<% command_snippet(page: current_page, path: 'create-the-cookbook-ubuntu-vagrant/mkdir-cookbooks-ubuntu-vagrant', features: :stdin) %>

Run the following `chef generate cookbook` command to create the `lamp` cookbook.

<% command_snippet(page: current_page, path: 'create-the-cookbook-ubuntu-vagrant/chef-generate-cookbook-lamp-ubuntu-vagrant') %>

The purpose of the `lamp` cookbook is to provide a general-purpose LAMP stack configuration that's not specific to any web application. Later, you'll write a _wrapper cookbook_ that runs the `lamp` cookbook and then configures the Customers web application.

[END_BOX]

[START_BOX]

## 2. Ensure the apt cache is up to date

A common requirement is to ensure that the package manager cache &ndash; Ubuntu's built-in package manager is named `apt` &ndash; is up to date before installing Apache, MySQL, or any other packages. This step synchronizes the system's package index to the latest list of what packages are available. In _Learn the basics_, you [used the apt_update resource](/modules/learn-the-basics/ubuntu/free/configure-a-package-and-service/) to ensure that the `apt` cache is updated once every 24 hours.

Recall that the run-list can contain multiple recipes, and that each receipe can come from a different cookbook. In practice, you might build a base cookbook that defines common requirements for all of your systems &ndash; for example, updating the `apt` cache and configuring the firewall and other security settings. You might place this cookbook at the start of the run-list or define a base [role](https://docs.chef.io/roles.html) that you apply to each of your systems.

For learning purposes, let's configure the `apt` cache directly from our `lamp` cookbook. Start by modifying <% fp '~/learn-chef/cookbooks/lamp/recipes/default.rb' %> like this.

<% code_snippet(page: current_page, path: 'apt-cache-ubuntu-vagrant/update-apt-cache-ubuntu-vagrant') %>

[END_BOX]

[START_BOX]

## 3. Apply the lamp cookbook on a Test Kitchen instance

Now let's verify that the basic configuration runs successfully on an Ubuntu 14.04 instance. Replace the contents of your copy of <% fp('~/learn-chef/cookbooks/lamp/.kitchen.yml') %> with this.

<% code_snippet(page: current_page, path: 'apply-cookbook-ubuntu-vagrant/kitchen-yml-ubuntu-vagrant-1') %>

This configuration resembles the one you created for the `learn_chef_apache2` cookbook in the _Get started with Test Kitchen_ module.

It also assigns the IP address 192.168.34.34 to the instance. You'll later use that address to access your web application from your workstation. We use an address that's in the 192.168.0.0 &mdash; 192.168.255.255 range because that range is defined as part of the [private IPv4 address space](https://en.wikipedia.org/wiki/Private_network), and is not accessible to the public Internet.

Next, from your terminal, move to the <% fp('~/learn-chef/cookbooks/lamp') %> directory.

<% command_snippet(page: current_page, path: 'apply-cookbook-ubuntu-vagrant/cd-learn-chef-cookbooks-lamp-ubuntu-vagrant-1', features: :stdin) %>

Now run `kitchen list`. You'll see that the instance was not yet created.

<% command_snippet(page: current_page, path: 'apply-cookbook-ubuntu-vagrant/kitchen-list-ubuntu-vagrant-1') %>

Next, run `kitchen converge`. This command downloads the base Ubuntu 14.04 box if needed, brings up an instance, installs `chef-client`, and applies the cookbook.

<% command_snippet(page: current_page, path: 'apply-cookbook-ubuntu-vagrant/kitchen-converge-ubuntu-vagrant-1') %>

As expected, the `apt` cache was updated and `chef-client` completed successfully. This is a great first step to verifying that you can successfully bring up a system and run `chef-client`.

[TIP] Remember, if you need a break, you can run `kitchen destroy` to terminate your instance. Doing so is especially important when working with cloud instances, where you pay hourly for usage. Cleaning up your instance when you don't need it can also help you free up compute resources on your workstation if you're working with a local virtual machine. When you return, just run `kitchen converge` to pick up where you left off.

Finally, verify that you can successfully connect to your instance over SSH. The [kitchen login](https://docs.chef.io/ctl_kitchen.html#kitchen-login) command is a common way to connect to and explore your instances. Here, run the following [kitchen exec](https://docs.chef.io/ctl_kitchen.html#kitchen-exec) to print the name of the current user.

<% command_snippet(page: current_page, path: 'apply-cookbook-ubuntu-vagrant/kitchen-exec-whoami-ubuntu-vagrant') %>

[WINDOWS] If you're working from a Windows workstation and receive an error, it may be because you don't have an SSH client set up. Ensure you're [running from a Chef DK prompt](/modules/manage-a-node-chef-server/ubuntu/hosted/set-up-your-workstation/#step2) and then [verify your SSH client](/modules/manage-a-node-chef-server/ubuntu/hosted/set-up-your-workstation/#step6).

This part satisfies the initial requirement for our LAMP stack configuration &ndash; having a Linux instance to work with.

<img src="/assets/images/misc/lamp-stack-l.svg" style="width: 300px; box-shadow: none;"/>

[END_BOX]
