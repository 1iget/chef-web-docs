---
title: 'Examine a component of an application in more detail'
description: 'Applications are the coordinated effort of a lot of systems. Understanding the challenges in configuring a system is essential.'
order: 2
time_to_complete: 5 minutes
quiz_path: quizzes/web-operations-essentials/application-component.yml
headings: [
  { label: 'Story', href: '#story' }
]
---
After completing this unit, youâ€™ll be able to:

* Describe what is an application, service, and a file.
* Describe what Chef can configure on a system.

## Story

As we learned in the last section the complexity of creating a restaurant and a modern application have quite a few similiarities because of the overral goal of handling requests from our users, processing those requests, and in return give them what it is they need to be satisfied.

To satisfy more customers within a restaurant or an application it became important to define multiple, distinct roles. Each role performs a specialized operation that is important to the entire process. The work that each role is important to accomplish our goal.

If we think again about us setting up a restaurant we think about the entire experience from when the customer comes through the door until they leave out that same door. To ensure we create the right experience we define roles to ensure that individuals are greeted, their orders are taken, their drinks and additional requests are handled, their food is made, and that they can pay us for that food or service.

As the restaurant owner we have to define for each role:

* the work they perform
* their required tools
* how they communicate information to others in the system
* their required qualifications
* the skills they will need to learn
* how many will perform in this role


This is similar to a web application as it is also the coordinated effort of a large number of roles. For each role we have to define:

* the required computing power
* the software that is installed
* how the software is configured
* its ability to be accessed (externally by customers or internally by other systems)
* its ability to access other systems

But lets leave the idea of restaurants and web applications behind and talk about something a little more tangible. You are reading this document on your computer and

When you are in the market for a new smart phone you first need to make an assessment about the size of the screen, the amount of on-board memory,

A system with an operating system comes pre-installed with software. Sometimes this software is adequate but often you need additional software installed on the system.

As a desktop user software is often installed through copying an application or running an installation script. Sometimes it requires you download source code, download and install all of its dependencies, compile it, and then run the installer. In either case, the software requires a number of manual steps where the files are retreived from a remote location and then installed.

Some applications work the way you want them right after installation. Quite a few require a few modifications to their configuration to be effective. For most desktop applications the configuration is available through a preferences panel. In other applications, particularly application that run in the background, without a user interface are powered through configuration files or initially launched with different flags.

This system, when completing work in the larger contenxt, needs to be able to reach and be reached by other systems. This usually means configuring these systems so that they are visible to each other on the same network. That the applications and services running on the system are able to connect to the other systems.

This system should be available to systems that need to come in contact with it and have access only the systems that it must communicate. This isolation protects the system from unintended and malicious hard.

All of this criteria represents a lot of changes that convert a system into one able to perform its role within the larger application. For a single system, like a new computer that you want to personalize this work is often something you are willing to do once. Performing all of this work manually for a single system is useful to explore requirements and the process. During that process often you capture each step required to install an application, configure a service, or modify a file.

This often takes the form of a document that you include in a shared location that you can find later or provide to others. Even better if this document is instead a script that can execute on a new system. A good is one that is exercisable on new systems and old systems. Identifying the work that it needs to accomplish from its current state and its desired state.

Setting up systems initially is only a part of the experience of managing a web application. As security exploits are discovered in existing software, new features are released, performance improvements are found, each of the systems that you have running are going to need to be replaced or updated. In an environment with near limitless compute resources it may be possible to create new systems with a new configuration and safely move them into application. For some resources, like a data resource, it may not be so easy to replace the system and instead require upgrades.

When defining a web application that abillity to separate into roles allows you to define the purpose of each system. These systems then need to have their requirements met, the software installed and configured, services running, and given access and provide access to the correct machines. This is an easy task to accomplish manually when working with a single system but does not scale when when thinking about disaster recovery, managing similar systems, and updating these systems.

Documentation helps articulate the requirements of a system but is not exercisable making it prone to contain errors or fail to evolve as the requirements of the application evolve.

Traditional system scripting work to create automated ways to configure new systems but they may not take into consideration the state of existing systems. They may also not be as clear as documentation because they are focused on updating the system.

Chef and InSpec provides a language that allows you to express the desired state of the system in a language which can lend itself to being readable and executable.
