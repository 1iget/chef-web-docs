---
title: 'Configure a resource'
order: 2
layout: tutorial
---
# Configure a resource

**Time to complete: 15 minutes**

Let's look at a basic configuration management project to get oriented to how Chef works. You'll learn how to manage a file, which is an example of a _resource_. A resource describes some piece of infrastructure, such as a file, a template, or a package.

## <i class="icon-question-sign blueiconcolor" style="margin-right:3px;"></i> All set up?

Verify you have:

<i class="icon-check" style="margin-right:5px;"></i>a CentOS or Red Hat Enterprise Linux (RHEL) instance with sudo / root access.<br>
<i class="icon-check" style="margin-right:5px;"></i>Chef DK installed.<br>
<i class="icon-check" style="margin-right:5px;"></i>a terminal window open to a directory to work in.<br>
<i class="icon-check" style="margin-right:5px;"></i>your favorite text editor open.<br>

Missing something on that list? [Get set up](/rhel/get-set-up).

## <i class="icon-wrench greeniconcolor" style="margin-right:3px;"></i> Your job

Welcome to Widget Corp! Maya, your benevolent comrade, has asked you to take over the arduous task of updating the Message of the Day. Everyone keeps talking about how much a pain it is to update the MOTD. And now, they are so happy to give it to you.

Like those before you, you could try to remember to update it every day &ndash; but good luck taking a vacation. You could write a script &ndash; but even managing a file has its complexities. There must be a better way to solve it. Your boss always tells you to think creatively!

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:395px;">
<span style="line-height:2.0;">**As you read, be on the lookout for:**</span><br>
  <i class="icon-check-empty" style="margin-right:5px;"></i>what a resource is.<br>
  <i class="icon-check-empty" style="margin-right:5px;"></i>how a recipe works.<br>
  <i class="icon-check-empty" style="margin-right:5px;"></i>what default actions Chef takes.<br>
  <i class="icon-check-empty" style="margin-right:5px;"></i>how and when Chef applies configuration state.<br>
</sidebar>

## <i class="icon-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Create the file](#1createthefile)
  1. [Update the file's contents](#2updatethefile39scontents)
  1. [Ensure the file's contents are not changed by anyone else](#3ensurethefile39scontentsarenotchangedbyanyoneelse)
  1. [Delete the file](#4deletethefile)

## 1. Create the file

You need to create the file and set its contents. To keep things basic, let's install the MOTD to <filepath>/tmp/motd</filepath>.

In your working directory, create a file named <filepath>hello.rb</filepath>, add these contents, and then save the file.

```ruby
file '/tmp/motd' do
  content 'hello world'
end
```

From your terminal window, run <codeinline>chef-apply</codeinline> to apply what you've written.

```bash
$ chef-apply hello.rb
```

[COMMENT] crushtime-4: &uarr; Perhaps all commands should center around 'chef'. For example, 'chef apply' instead of 'chef-apply'. Exceptions to this are chef-client and knife.

The output tells us that a new file was created at <filepath>/tmp/motd</filepath>.

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/motd] action create
    - create new file /tmp/motd
    - update content in file /tmp/motd from none to de031d
        --- /tmp/motd  2014-05-13 14:52:54.025253948 -0700
        +++ /tmp/.motd20140513-3474-5263n1 2014-05-13 14:52:54.025253948 -0700
        @@ -1 +1,2 @@
        +hello world
    - restore selinux security context
```

Now verify that the file was written. Run the <codeinline>head</codeinline> command, which prints the first few lines of the file you give it.

```bash
$ head /tmp/motd
```
```bash
hello world
```

### Run the command a second time

Let's see now what happens when you run the same command again.

```bash
$ chef-apply hello.rb
```

This time you get a different response.

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/motd] action create (up to date)
```

This is because Chef does work only when it needs to.

Chef looks at the current configuration state and applies action only if it doesn't match the desired state. Here, Chef doesn't create or modify <filepath>/tmp/motd</filepath> because it already exists and its contents didn't change.

## 2. Update the file's contents

As we know, the MOTD frequently changes.

Modify <filepath>hello.rb</filepath> like this ('hello world' becomes 'hello chef'.)

```ruby
file '/tmp/motd' do
  content 'hello chef'
end
```

And run <codeinline>chef-apply</codeinline>.

```bash
$ sudo chef-apply hello.rb
```

This time Chef does work because we've changed the desired state of the file and need to update the installed version to match it.

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from de031d to b1522f
        --- /tmp/motd  2014-05-13 14:52:54.025253948 -0700
        +++ /tmp/.motd20140513-4015-13xpiup  2014-05-13 15:00:07.284522132 -0700
        @@ -1,2 +1,2 @@
        -hello world
        +hello chef
    - restore selinux security context
```

## 3. Ensure the file's contents are not changed by anyone else

You need to make sure that no other process can change the MOTD.

Imagine that a co-worker manually changes <filepath>/tmp/motd</filepath> by replacing 'hello chef' with 'hello robots'. Go ahead and change your copy like this.

```
hello robots
```

Now run <codeinline>chef-apply</codeinline>.

```bash
$ sudo chef-apply hello.rb
```

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/motd] action create
    - update content in file /tmp/motd from 9b0c18 to b1522f
        --- /tmp/motd  2014-05-13 15:03:47.638770524 -0700
        +++ /tmp/.motd20140513-4170-130uqxh  2014-05-13 15:04:43.874771326 -0700
        @@ -1,2 +1,2 @@
        -hello robots
        +hello chef
    - restore selinux security context
```

[COMMENT] Need sudo for this. Go back when the sudo/backup issue resolved...

Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resources matches what you specify, even if they are altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

[COMMENT] crushtime-1: ^ I cut the part about backups due to overwhelming feedback, but saving backups to /var/chef/backup requires root access, when the recipe otherwise might not need it. Consider moving backups to home directory, perhaps only when running in --local-mode. That way, you don't need to run with sudo by default.

[COMMENT] crushtime-1: ^ tangental comment, but if a recipe fails, the error log gets written to a location that requires sudo access to read. This might cause chef-[command] to require sudo when it normally wouldn't.

## 4. Delete the file

OK, you're done experimenting with the MOTD, so let's clean up. From your working directory, create a new recipe file named <filepath>goodbye.rb</filepath> and save this content to it.

```ruby
file '/tmp/motd' do
  action :delete
end
```

Now apply <filepath>goodbye.rb</filepath> to delete the file.

```bash
$ sudo chef-apply goodbye.rb
```

[COMMENT] Need sudo for this. Go back when the sudo issue resolved...

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[/tmp/motd] action delete
    - delete file /tmp/motd
```

The output shows that <filepath>/tmp/motd</filepath> is now gone, but let's prove it.

```bash
$ ls /tmp/motd
```
```bash
ls: cannot access /tmp/motd: No such file or directory
```

## <i class="icon-comments greeniconcolor" style="margin-right:3px;"></i> What happened?

You ran a few basic Chef commands and got a flavor of what Chef can do. Here are a few details you should know about.

In Chef, <filepath>hello.rb</filepath> is an example of a _recipe_, which is an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer. Our recipe here states everything we need to manage the MOTD file.

When you deleted the file, you saw the <codeinline>delete</codeinline> action. Think of an _action_ as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's the most common affirmative one &ndash; for example, _create_ a file, _install_ a package, and _start_ a service. When we created the file we didn't specify the <codeinline>create</codeinline> action when we created the file because <codeinline>create</codeinline> is the default. But of course you can specify it if you want.

### To summarize

<ul class="icons">
<li><i class="icon-check"></i>A <i>resource</i> describes one part of the system and its desired state. A file is an example of a resource.</li>
<li><i class="icon-check"></i>A <i>recipe</i> is an ordered series of configuration states. You might have one recipe to configure your web server and another for your database server.</li>
<li><i class="icon-check"></i>An <i>action</i> is the part of a resource that achieves the desired configuration state. The default action is the most common affirmative one, such as creating a file.</li>
<li><i class="icon-check"></i>Chef applies configuration state only when it needs to.</li>
</ul>

## <i class="icon-road blueiconcolor" style="margin-right:3px;"></i> What's next?

Of course, Chef is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

<%= link_to 'Configure a package and service &rarr;', '/rhel/configure-a-package-and-service/', class: 'button radius' %>
