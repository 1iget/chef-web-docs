---
title: 'Configure a resource'
order: 2
layout: tutorial
---
[TIMETOCOMPLETE] 15

# Configure a resource

Let's look at a basic configuration management project to get oriented to how Chef works. You'll learn how to manage a file, which is an example of a _resource_. A resource describes some piece of infrastructure, such as a file, a template, or a package.

Remember, you'll be configuring your CentOS VM locally to get the hang of things. Later you'll learn how to manage one remotely.

## <i class="fa fa-question-circle blueiconcolor" style="margin-right:3px;"></i> All set up?

  * Do you have a CentOS VM with the Chef tools installed? If not, [get a virtual machine](/rhel/get-a-virtual-machine).
  * Make sure you have a command prompt open to the <filepath>~/chef-repo</filepath> directory. We'll refer to this as your working directory.

## <i class="fa fa-wrench greeniconcolor" style="margin-right:3px;"></i> Your job

Welcome to Widget Corp! Your boss Jerry has asked you to take over the arduous task of updating the Message of the Day. Like those before you, you could try to remember to update it every day &ndash; but good luck taking a vacation. You could write a script &ndash; but even managing a file has its complexities.

There must be a better way to solve it. Let's see how Chef can make things easier.

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:400px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, be on the lookout for:**</span><br>
  <i class="fa fa-check"></i>&nbsp; what resources and recipes are.<br>
  <i class="fa fa-check"></i>&nbsp; what happens when you run <codeinline>chef-apply</codeinline>.<br>
</sidebar>

## <i class="fa fa-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Create the file](#1createthefile)
  1. [Update the file's contents](#2updatethefile39scontents)
  1. [Ensure the file's contents are not changed by anyone else](#3ensurethefile39scontentsarenotchangedbyanyoneelse)
  1. [Delete the file](#4deletethefile)

<hr>

## 1. Create the file

First you need to create the file and set the initial MOTD. To keep things basic, let's configure the file in the working directory.

From your working directory, create a file named <filepath>hello.rb</filepath>, add these contents, and then save the file.

```ruby
# hello.rb
file 'motd' do
  content 'hello world'
end
```

From your terminal window, run <codeinline>chef-apply</codeinline> to apply what you've written.

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create
    - create new file motd
    - update content in file motd from none to de031d
        --- motd  2014-05-13 14:52:54.025253948 -0700
        +++ .motd20140513-3474-5263n1 2014-05-13 14:52:54.025253948 -0700
        @@ -1 +1,2 @@
        +hello world
    - restore selinux security context
```

[COMMENT] crushtime-4: 'chef-apply' should be 'chef apply'.

The output tells us that a new file, <filepath>motd</filepath>, was created.

Now verify that the file was written. Run the <codeinline>head</codeinline> command, which prints the first few lines of the file you give it.

```bash
# ~/chef-repo
$ head motd
hello world
```

### Run the command a second time

Let's see now what happens when you run the same command again.

```bash
# ~/chef-repo
$ chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create (up to date)
```

This time you get a different response. This is because Chef does work only when it needs to.

Chef looks at the current configuration state and applies action only if it doesn't match the desired state. Here, Chef doesn't create or modify <filepath>motd</filepath> because it already exists and its contents didn't change.

## 2. Update the file's contents

Now you need to change the MOTD.

Modify <filepath>hello.rb</filepath> like this ('hello world' becomes 'hello chef'.)

```ruby
# hello.rb
file 'motd' do
  content 'hello chef'
end
```

And run <codeinline>chef-apply</codeinline>.

```bash
# ~/chef-repo
$ sudo chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create
    - update content in file motd from de031d to b1522f
        --- motd  2014-05-13 14:52:54.025253948 -0700
        +++ .motd20140513-4015-13xpiup  2014-05-13 15:00:07.284522132 -0700
        @@ -1,2 +1,2 @@
        -hello world
        +hello chef
    - restore selinux security context
```

This time Chef does work because we've changed the desired state of the file and need to update the installed version to match it.

## 3. Ensure the file's contents are not changed by anyone else

You need to make sure that no other process can change the MOTD.

Imagine that a co-worker manually changes <filepath>motd</filepath> by replacing 'hello chef' with 'hello robots'. Go ahead and change your copy through your text editor or like this.

```bash
# ~/chef-repo
echo 'hello robots' >> motd
```

Now run <codeinline>chef-apply</codeinline>.

```bash
# ~/chef-repo
$ sudo chef-apply hello.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action create
    - update content in file motd from 9b0c18 to b1522f
        --- motd  2014-05-13 15:03:47.638770524 -0700
        +++ .motd20140513-4170-130uqxh  2014-05-13 15:04:43.874771326 -0700
        @@ -1,2 +1,2 @@
        -hello robots
        +hello chef
    - restore selinux security context
```

[COMMENT] Need sudo for this. Go back when the sudo/backup issue resolved...

Chef restored the original configuration. This is actually a really good thing because Chef ensures that the actual state of your resources matches what you specify, even if they are altered by some outside process. Chef enables you to both apply a new configuration state as well as ensure that the current state stays how you want it.

[COMMENT] crushtime-1: ^ I cut the part about backups due to overwhelming feedback, but saving backups to /var/chef/backup requires root access, when the recipe otherwise might not need it. Consider moving backups to home directory, perhaps only when running in --local-mode. That way, you don't need to run with sudo by default.

[COMMENT] crushtime-1: ^ tangental comment, but if a recipe fails, the error log gets written to a location that requires sudo access to read. This might cause chef-[command] to require sudo when it normally wouldn't.

## 4. Delete the file

OK, you're done experimenting with the MOTD, so let's clean up. From your working directory, create a new recipe file named <filepath>goodbye.rb</filepath> and save this content to it.

```ruby
# goodbye.rb
file 'motd' do
  action :delete
end
```

Now apply <filepath>goodbye.rb</filepath> to delete the file.

```bash
# ~/chef-repo
$ sudo chef-apply goodbye.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * file[motd] action delete
    - delete file motd
```

[COMMENT] Need sudo for this. Go back when the sudo issue resolved...

The output shows that <filepath>motd</filepath> is now gone, but let's prove it.

```bash
# ~/chef-repo
$ ls motd
ls: cannot access motd: No such file or directory
```

<hr>

## <i class="fa fa-question blueiconcolor" style="margin-right:3px;"></i> What did we see here?

You ran a few basic Chef commands and got a flavor of what Chef can do. You learned that a resource describes one part of the system and its desired state and worked with a [file][file] resource.

### <i class="fa fa-file-text greeniconcolor" style="margin-right:3px;"></i> Recipes organize resources

In Chef, <filepath>hello.rb</filepath> is an example of a [recipe](http://docs.opscode.com/essentials_cookbook_recipes.html), or an ordered series of configuration states. A recipe typically contains related states, such as everything needed to configure a web server, database server, or a load balancer.

Our recipe states everything we need to manage the MOTD file. You used [chef-apply][chef-apply] to apply that recipe from the command line.

### <i class="fa fa-bolt greeniconcolor" style="margin-right:3px;"></i> Resources have actions

When you deleted the file, you saw the <codeinline>delete</codeinline> action.

Think of an action as the process that achieves the desired configuration state. Every resource in Chef has a default action, and it's the most common affirmative one &ndash; for example, _create_ a file, _install_ a package, and _start_ a service.

When we created the file we didn't specify the <codeinline>create</codeinline> action when we created the file because <codeinline>create</codeinline> is the default. But of course you can specify it if you want.

The documentation for each resource type, [file](http://docs.opscode.com/resource_file.html) for example, explains the type's default action.

### <i class="fa fa-cog greeniconcolor" style="margin-right:3px;"></i> Resources have attributes

When you created the file, you didn't specify its mode or group &ndash; you specified only its contents. That's because Chef provides defaults for those. We'll look at resource attributes such as these later.

<hr>

## <i class="fa fa-road blueiconcolor" style="margin-right:3px;"></i> What's next

Of course, your job is about more than just setting up files. Next you'll apply what you've learned to install and configure a package and service.

<%= link_to 'Configure a package and service &rarr;', '/rhel/configure-a-package-and-service/', class: 'button radius' %>


[file]: http://docs.opscode.com/resource_file.html
[chef-apply]: http://docs.opscode.com/ctl_chef_apply.html
