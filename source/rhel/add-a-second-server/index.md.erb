---
title: 'Add a second server'
order: 3
layout: tutorial
description: TODO
keywords: TODO
---
# Add a second server

[Last time](/rhel/configure-a-package-and-service/) you learned how to use Chef to bring up a web server and serve up a home page that displays some basic info about the server.
So far you've configured your local laptop or desktop computer, which is a great way to experiment with Chef.

<i class="icon-cogs icon-2x" style="float:left; margin-right:10px;"></i> But now you want to scale out your web service by adding a second server that's configured just like the first server. You'll start by manually transferring your webserver cookbook to a second server and running it. Then you'll learn how to easy it is to let Chef do this for you.

## Setup

For this tutorial, you'll need a second RHEL or CentOS server to which you have root access. You can grab a spare laptop or spin up a virtual machine. Remember, if you don't have access to a RHEL or CentOS server, we offer the [CentOS Training Lab](http://opscode-cheflab.herokuapp.com/labs/learnchef/centos/attend) that you can use for free.

Install Chef DK on your second server once it's up and running.

<a class='button radius' href='http://www.getchef.com/downloads/chef-dk/linux/' target='_blank'>Install ChefDK&nbsp;&nbsp;<i class='icon-external-link'></i></a>

From each server, open a terminal window and <codeinline>cd</codeinline> to the directory you used in the previous tutorial. We've suggested ~/chef-tutorials/.

```bash
$ cd ~/chef-tutorials
```

## Set up your second web server manually

Let's set up a second web server by transferring the cookbook we created in the previous tutorial to the second server and running <codeinline>chef-client</codeinline> on the second server. 

1. On your first server, from the cookbooks/ directory, run this command to archive your webserver cookbook.

   ```bash
   $ tar -cvf webserver.tar webserver
   ```

2. Copy the .tar file to the working directory (for example, ~/chef-tutorials) on your second server - either through a shared folder, USB drive, cloud storage, or however you prefer. Or grab a copy [here](/assets/files/rhel/add-a-second-server/webserver.tar).

3. On your second server, unpack the archive to your cookbooks/ directory.

   ```bash
   $ tar -xf webserver.tar
   ```

4. On your second server, run <codeinline>chef-client</codeinline>.

   ```bash 
   $ sudo chef-client --local-mode --runlist webserver
   ```

5. Open a web browser and navigate to http://localhost to verify that your home page is properly configured. You'll see a page that's similar to the one you set up in the previous tutorial.

![The second web server's attributes](rhel/webserver-node-attributes-2.png)

Cool! In a few easy steps, you've successfully set up a second web server. Nothing to it, right? But you might encounter problems with this approach long-term.

<ul class="icons">
  <li><i class="icon-exclamation-sign"></i>You had to install the Chef tools manually on your second server. This can get tedious.</li>
  <li><i class="icon-exclamation-sign"></i>Even if you build up some automation around it, packaging up and distributing your cookbooks across your server infrastructure every time you want to push out a change can be painful, not to mention error prone.</li>
  <li><i class="icon-exclamation-sign"></i>As you grow as a Chef user, you'll leverage more and more of Chef's capabilities, for example, the ability to share information among nodes. Simply copying around the contents of your cookbooks directory won't unlock Chef's full power.</li>
</ul>

<comment>^ I made this up. Help me get it right.</comment>

Let's solve these problems by setting up a Chef server to be a persistent location to manage your server infrastructure. Let Chef do the heavy lifting for you. 

## Manage your web servers with Chef server

Copying around cookbooks to build and configure your server infrastructure can seem powerful, but the lack of central authority might seem hard to imagine in your production environment.

Chef server is the scalable way to maintain your cookbooks and deploy your configuration policy across your infrastructure. The following steps show how to set things up so you can see it in action for yourself.

Perform these steps on your workstation - the laptop or desktop computer that you plan to administer your servers from.

### Sign up for Hosted Enterprise Chef

The easiest way to set up a Chef server is to let us host it for you on Hosted Enterprise Chef. To get set up, just fill out the form on our sign up page. 

<a class='button radius' href='<%= hec_sign_up_url %>' target='_blank'>Sign up for a free trial of Hosted Enterprise Chef&nbsp;&nbsp;<i class='icon-external-link'></i></a>

Now you need to copy files and tools locally that enable you to securely communicate with the Chef server.

### Install the Starter Kit

1. Navigate to <%= link_to "#{hec_manage_url}starter-kit", "#{hec_manage_url}starter-kit" %>.
2. Choose the organization that you created when you signed up for Hosted Enterprise Chef.
4. Click the **Download Starter Kit** button that appears.
5. Click **Proceed**. Save the file chef-starter.zip to your computer.
6. Extract chef-starter.zip to a convenient location. On Linux, we recommend your home directory. This makes your Chef working directory ~/chef-repo.

From here on, you'll do all your work from the chef-repo/ directory, and not the working directory you used for the previous tutorials.

Next, you author your cookbooks (this part you've already done) and upload them to the Chef server.

### Upload your webserver cookbook to the Chef server

Here we'll complete the transition to the chef-repo/ directory. We'll also introduce you to <codeinline>knife</codeinline> - the tool that serves as the interface between your local computer and the Chef server.

Copy the webserver/ directory from your previous working directory to the chef-repo/cookbooks/ directory. 

The command looks like this for the directories that we've suggested.

```bash
cp --recursive ~/chef-tutorials/cookbooks/webserver ~/chef-repo/cookbooks/webserver
```

Now that you have a cookbook in your chef-repo/ directory, let's use <codeinline>knife</codeinline> to upload your cookbook to the Chef server. From anywhere under your chef-repo/ directory, run this command.

```bash
$ knife cookbook upload webserver
```

A copy of your cookbook now exists on the Chef server. The next step is to run the cookbook on your node.

### Bootstrap your server node

Recall that a node is basically any compute resource in your infrastructure, whether it be a virtual machine or physical server. Any computer that is managed by a Chef server is commonly referred to as a node.

The next step is to install the Chef tools on your server node and have it run our webserver cookbook.

#### Run knife to bootstrap the node

We commonly call the process that installs the Chef tools on a node and the initial check-in to the Chef server _bootstrapping_ the node.

You already have the Chef tools installed on your second server, but you still need to bootstrap the server to associate it with your Chef server account. You can set up yet another server to see the bootstrap process happen from scratch, but don't worry about that for now. Your existing server will bootstrap just fine.

Run this command to bootstrap a Linux node. Replace <codeinline>ADDRESS</codeinline> with your server's FQDN or IP address, and <codeinline>USER</codeinline> and <codeinline>PASSWORD</codeinline> with your root credentials.

```bash
$ knife bootstrap ADDRESS --sudo --ssh-user USER --ssh-password PASSWORD --node-name node1 --run-list 'recipe[webserver]'
```

<comment>VV remove this?</comment>

If you don't know your server's IP address or FQDN, you can run <codeinline>ifconfig</codeinline> to get it. Here's a fancy version that parses out just the IP address.

```bash
$ ifconfig eth0 | grep 'inet addr:' | cut -d: -f2 | awk '{ print $1 }'
```

<comment> <<<<<< END REMOVE THIS </comment>

The optional <codeinline>--node-name</codeinline> argument uniquely identifies the node with the Chef server. Its value can be whatever you want.

The <codeinline>knife bootstrap</codeinline> command established an SSH connection to the node, installed the Chef tools, downloaded the webserver cookbook on the node, and ran it. In one command, Chef carried out most of the steps you previously dealt with manually.

<comment>VV Ignore the following. Didn't realize that --run-list permanently sets the run list.</comment>

<i class='icon-exclamation-sign'></i> We're back to the problem where we need to specify the run list. Let's fix that.

#### Associate the run-list with your node

Recall that the run-list defines the order in which recipes are run. We have just one recipe in our run-list, but that's a good opportunity to practice [XYZ] anyway. 

Navigate to [manage.opscode.com](https://manage.opscode.com) and log in to your Chef account. Then from the **Nodes** tab, select your node and open its run list.

![Opening the run list](rhel/open-run-list-webui-centos.png)

Now drag the recipe from the **Available Recipes** box to the **Current Run List** box. Then click **Save Run List**.

![Setting and saving the run list](rhel/edit-run-list-webui-webserver.png)

Bravo. Your node is now associated with the run list.

<comment><<<  END IGNORE</comment>

### Update your server configuration

To recap, when you bootstrap a node, you install the Chef tools, set the run-list, do an initial <codeinline>chef-client</codeinline> run. 

Let's wrap-up by modifying the recipe one final time and then running <codeinline>chef-client</codeinline> on our node. This way, you'll see what it's like to update a node after the initial <codeinline>chef-client</codeinline> run.

#### Modify and upload the cookbook

Modify cookbooks/webserver/templates/default/index.html.erb to incorporate the server's run-list as part of the home page. 

<comment>^ Folks, have you found it hard to parse file names in text? Would you like to see a box around them? If so, the same thing or something different from what we use for inline code and tool names?</comment>

```html
<!- templates/default/index.html.erb ->
<html>
  <body>
    <h1>hello from <%%= node['ipaddress'] %>!</h1>

    <pre>
      <%%= node['hostname'] %>
      <%%= node['platform'] %> - <%%= node['platform_version'] %>
      <%%= node['memory']['total'] %> RAM
      <%%= node['cpu']['total'] %> CPUs
      <br>
      <%%= node['recipes'] %> is in the run-list
    </pre>
  </body>
</html>
```

<comment>^ BTW, the red is hard to read against the blue. Where is this controlled?</comment>

Run <codeinline>knife</codeinline> to upload the updated cookbook to the Chef server.

```bash
$ knife cookbook upload webserver
```

<codeinline>knife</codeinline> uploads your updated cookbook to the Chef server.

```
Uploading webserver      [0.1.0]
Uploaded 1 cookbook.
```

#### Run chef-client

There are a few ways to run <codeinline>chef-client</codeinline> on a bootstrapped node. Here's how to use the <codeinline>knife ssh</codeinline> command to do it (just replace <codeinline>ADDRESS</codeinline>, <codeinline>USER</codeinline>, and <codeinline>PASSWORD</codeinline>.)

```bash
$ knife ssh ADDRESS 'sudo chef-client' --manual-list --ssh-user USER --ssh-password PASSWORD
```

<comment>^^ Is --manual-list required here?</comment>

<comment>^^ Might it be more delightful to be able to specify the node's name instead of it's IP address or FQDN?</comment>

This command creates an SSH connection to the node and runs the <codeinline>sudo chef-client</codeinline> command.

<comment>^ Why is this better than <codeinline>ssh USER@ADDRESS; sudo chef-client</codeinline>? Only cause it's one step?</comment>

<comment>VV Should probably remove this below?</comment>

If you're using Vagrant, here's the command to use.

```bash
$ knife ssh localhost 'sudo chef-client' --manual-list --ssh-user vagrant --ssh-password vagrant --ssh-port 2222
```

[WARN] --ssh-port 2222 might not be correct if you're running more than one Vagrant VM. You can get the port that Vagrant selects for SSH forwarding from the output of the <codeinline>vagrant up</codeinline> command.

<comment>^^ Cut the Vagrant part? Folks _will_ ask... Should it stay here, go in a separate learnchef topic, go in the reference, something else?</comment>

You'll see something like this:

![The web server's run-list](rhel/webserver-node-attributes-runlist.png)

<comment>crushtime: knife ssh needs to be able to create and store (on the workstation) a directory of public IP addresses for nodes in the environemnt (i.e., just like Ansible.)</comment>

## Wrap up

Awesome. You set up your second web server. And you saw two ways to do it. The first way worked well, but involved some tedious, error-prone steps that lacked a central, persistent authority. Chef server made it easy to get the Chef tools on your server node and run the webserver cookbook all in one step.

Let's recap some of the concepts.

  * Hosted Enterprise Chef provides a secure location to manage your cookbooks and roll them out to your server infrastructure.
  * <codeinline>knife</codeinline> serves as the interface between your local computer and the Chef server.
  * To <i>bootstrap</i> a node means to install the Chef tools and perform an initial <codeinline>chef-client</codeinline> run on that node. The <codeinline>knife bootstrap</codeinline> command does this for you.
  * To apply new configuration to your node, run <codeinline>knife cookbook upload</codeinline> to upload your cookbook to the Chef server and then <codeinline>knife ssh</codeinline> to run <codeinline>chef-client</codeinline> on your target node.

If you'd like, check out the reference on some of the concepts we just covered.

  * [About Knife](http://docs.opscode.com/knife.html)
  * [knife bootstrap](http://docs.opscode.com/knife_bootstrap.html)
  * [knife ssh](http://docs.opscode.com/knife_ssh.html)

## Next

Thanks for working through these tutorials. We hope you learned how Chef can make configuration management an easier and more enjoyable part of your job.

We're working on new content to guide you through more Chef fundamentals. Please check back soon!