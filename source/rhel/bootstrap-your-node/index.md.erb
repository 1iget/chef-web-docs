---
title: 'Bootstrap your node'
order: 5
layout: tutorial
description: TODO
keywords: TODO
---
[TIMETOCOMPLETE] 10

# Bootstrap your node

Recall that any computer that's managed by a Chef server is called a _node_. We call the process that installs the Chef tools on a node and the initial check-in to the Chef server _bootstrapping_ the node.

Let's bootstrap a node and execute the web server cookbook on it.

If you haven't set up a Chef server and uploaded your cookbook to it, the [previous lesson](/rhel/get-ready-to-add-another-server/) shows you how.

## <i class="fa fa-linux" style="margin-right:3px;"></i> Get a Linux machine to bootstrap

In the previous lessons, you configured the server directly. The machine you used had the Chef tools pre-installed. Now you need to get a machine that doesn't have the Chef tools on it so you can see how the bootstrap process works.

[COMMENT] In this lesson, you need a server to bootstrap, but don't connect to it just yet. We'll tell you why later.

Like the previous lessons, there are two ways to get set up.

Option 1: Use your own Linux machine. Any RHEL or CentOS machine that meets the [system requirements](<%= chef_docs_url %>/chef_system_requirements.html#chef-client) for running `chef-client` works great. Don't install the Chef tools on it just yet.

Option 2: Let us provide a CentOS virtual machine for you. Just click the button below.

<%= partial 'layouts/provisioner', locals: { title: 'CentOS', type: 'rhel-fundamentals' } %>

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:575px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**Keep in mind as you read:**</span><br>
  <i class="fa fa-check"></i>&nbsp; a _node_ is any computer managed by Chef.<br>
  <i class="fa fa-check"></i>&nbsp; _bootstrapping_ installs the Chef tools and does an initial check-in.<br>
</sidebar>

## <i class="fa fa-tasks" style="margin-right:3px;"></i> Here's what you'll do

  1. [Bootstrap your node](#1bootstrapyournode)
  1. [Confirm the result](#2confirmtheresult)

<hr />

## 1. Bootstrap your node

<div class="indent" id="bootstrap-intro" data-type="rhel-fundamentals" ng-non-bindable>
From your workstation, run this command to bootstrap your node. Replace <code>{{address}}</code> with your server's external address, <code>{{user}}</code> with your username, and <code>{{password}}</code> with your password.
</div>
<p/>
<div id="bootstrap-command" class="window" ng-non-bindable>
  <nav class="control-window">
    <div class="close">&times;</div>
    <div class="minimize"></div>
    <div class="deactivate"></div>
  </nav>
  <h1 class="titleInside">Terminal: ~/chef-repo</h1>
  <div class="container" data-type="rhel-fundamentals"><div class="terminal"><table>
    <tbody>
      <tr>
        <td class="gutter"><pre class="line-numbers"><span class="line-number">$</span><span class="line-number">&nbsp;</span><span class="line-number">&nbsp;</span></pre></td>
        <td class="code"><pre><code><span class="line command">knife bootstrap {{address}} --ssh-user {{user}} --ssh-password '{{password}}' \\
  --sudo --use-sudo-password --node-name node1 \\
  --run-list 'recipe[learn\_chef\_httpd]'</span></code></pre></td>
      </tr>
    </tbody></table></div></div>
</div>

The optional `--node-name` argument uniquely identifies the node with the Chef server. Its value can be whatever you want. The server's fully qualified domain name (FQDN) is the default. If you previously used the name `node1` to bootstrap a different node, you'll need to choose a different name.

## 2. Confirm the result

Two things just happened.

First, your node was associated with your <%= t(:hosted_chef) %> account. To verify this, navigate to the [<%= t(:management_console) %>](<%= hec_manage_url %>/organizations). From the **Nodes** tab, you'll see an entry for the node you just bootstrapped.

![The bootstrapped node](rhel/management-console-node.png)

You can also verify that the node successfully bootstrapped by running the `knife node list` command.

```bash
# ~/chef-repo
$ knife node list
node1
```

You can also use the `knife node show` command to view data about your node from the command line.

```bash
# ~/chef-repo
$ knife node show node1
Node Name:   node1
Environment: _default
FQDN:
IP:          172.32.22.10
Run List:    recipe[learn_chef_httpd]
Roles:
Recipes:     learn_chef_httpd, learn_chef_httpd::default
Platform:    centos 6.5
Tags:
```

The second thing that happened was that your node did an initial check in with the Chef server and ran the web server cookbook. To verify this, open a web browser from your workstation and navigate to your web server.

![The basic home page](misc/webserver-basic.png)

<hr>

## <i class="fa fa-question" style="margin-right:3px;"></i> What did we see here?

The `knife bootstrap` command established an SSH connection to the node, installed the Chef tools, downloaded the web server cookbook on the node, and ran it. In one command, Chef carried out most of the steps you previously dealt with manually.

A powerful part of the `knife bootstrap` process is that you did not need to connect to or interact with the server directly. This enables you to further automate the process of provisioning and configuring your infrastructure. But if you'd like, you can connect to the server now to verify that everything is set up as you'd expect.

## <i class="fa fa-road" style="margin-right:3px;"></i> Wrap-up and what's next

Next let's spice things up and add some info about your web server to your home page.

<%= link_to 'Add dynamic configuration &rarr;', '/rhel/add-dynamic-configuration/', class: 'button radius' %>
