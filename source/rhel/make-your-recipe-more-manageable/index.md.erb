---
title: 'Make your recipe more manageable'
order: 4
layout: tutorial
description: Create a cookbook to make your recipes easier to manage
keywords: cookbook, recipe
---
# Make your recipe more manageable

**Time to complete: 15 minutes**

[Last time](/rhel/configure-a-package-and-service/) you learned how to manage package and a service by configuring a web server. You also added a basic web page, but there was one problem &ndash; although it helped you verifiy that your web server was properly configured, the code for your HTML page was embedded in the Chef recipe.

## <i class="fa fa-wrench greeniconcolor" style="margin-right:3px;"></i> Your job

You check in with Jerry, and he likes what he sees so far. But he agrees that now's a good time to think about how to make things more manageable. Let's pick up where we left off by creating a _cookbook_ to make our web server recipe easier to manage. A cookbook provides structure to your recipes and enables you to more easily reference external files, such as our web server's home page. In essence, a cookbook helps you stay organized.

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:440px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, think about:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how cookbooks help you stay organized.<br>
  <i class="fa fa-check"></i>&nbsp; why the run-list is important.<br>
  <i class="fa fa-check"></i>&nbsp; what problems might arise when you configure a second web server, or the server's IP address changes.
</sidebar>

## <i class="fa fa-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Create a cookbook](#1createacookbook)
  1. [Create a cookbook file](#2createacookbookfile)
  1. [Update the recipe](#3updatetherecipe)
  1. [Show the server's IP address on the home page](#4showtheserver39sipaddressonthehomepage)

## <i class="fa fa-eye blueiconcolor" style="margin-right:3px;"></i> A look at where we left off

To refresh your memory, here's the web server recipe we wrote in the previous tutorial. It installs Apache, starts and enables the service when the server boots, and configures a basic home page.

```ruby
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

## 1. Create a cookbook

First, from your working directory, create a <filepath>cookbooks</filepath> directory and <codeinline>cd</codeinline> there.

```bash
$ mkdir cookbooks
$ cd cookbooks
```

[COMMENT] crushtime-6: ^ Folks mentioned as they worked through this that chef-[command] is picky about where you are in the dir structure. For example, must be in <filepath>cookbooks</filepath> to run the cookbook, but above cookbooks to create one. Follow the 'do what I mean' paradigm by automatically traversing the dir hierarchy up and down to place things where they need to go.

Now run the <codeinline>chef</codeinline> command to generate a cookbook named **webserver**.

```bash
$ chef generate cookbook webserver
```

Here's the directory structure that the command created.

```bash
cookbooks/
└── webserver
    ├── Berksfile
    ├── chefignore
    ├── metadata.rb
    ├── README.md
    └── recipes
        └── default.rb
```

Note the default recipe, named <filepath>default.rb</filepath>. This is where we'll move our Apache recipe in a moment.

## 2. Create a cookbook file

Now we'll migrate the home page to our cookbook. Run this commmand to generate the HTML file for our home page.

```bash
$ chef generate file webserver index.html
```

The file <filepath>index.html</filepath> gets created under <filepath>webserver/files/default</filepath>.

```bash
webserver/
├── Berksfile
├── chefignore
├── files
│   └── default
│       └── index.html
├── metadata.rb
├── README.md
└── recipes
    └── default.rb
```

Now copy the contents of the HTML file from your recipe to the new HTML file, <filepath>webserver/files/default/index.html</filepath>.

```html
<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>
```

## 3. Update the recipe

Modify the default recipe, <filepath>webserver/recipes/default.rb</filepath>, to reference the HTML file.

```ruby
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end

cookbook_file '/var/www/html/index.html' do
  source 'index.html'
end
```

Notice that the <codeinline>file</codeinline> resource becomes <codeinline>cookbook\_file</codeinline>. The <codeinline>cookbook\_file</codeinline> resource transfers a file from a sub-directory of your cookbook's <filepath>files</filepath> directory to the path you specify. Here, we transfer the file <filepath>webserver/files/default/index.html</filepath> to Apache's document root, <filepath>/var/www/html/index.html</filepath>.

Now run the cookbook. To do so, we switch to the <codeinline>chef-client</codeinline> command and specify what's called the _run-list_. The run-list simply lets you specify which cookbooks to run, and the order in which to run them. This is handy once you have lots of cookbooks, and the order in which they run is important.

```bash
$ sudo chef-client --local-mode --runlist webserver
```

[COMMENT] crushtime-2: ^ A few undelightful things happen. First, you get a WARN saying that no config file was found. If this is really a problem, it should say why. Otherwise, perhaps this should be an INFO or nothing when running in local mode. Second, we should remove the SSL WARN in local mode because MITM attacks aren't possible in local mode.

[COMMENT] crushtime-3: ^ Typing --local-mode or -z is a pain. Make it the default when no configuration is present.

The result is the same as before, but with a cookbook things are now easier to manage.

## 4. Show the server's IP address on the home page

Now let's spice up the home page and show the web server's IP address. Modify <filepath>webserver/files/default/index.html</filepath> like this, but replace the IP address here with your own (you can get your IP address by running the <codeinline>ifconfig</codeinline> command.)

```html
<html>
  <body>
    <h1>hello from 192.168.145.132</h1>
  </body>
</html>
```

Run <codeinline>chef-client</codeinline> to run the recipe and update the home page.

```bash
$ sudo chef-client --local-mode --runlist webserver
```

When you refresh your browser, you'll see the new home page.

![The home page with IP address](rhel/webserver-ip-address.png)

## <i class="fa fa-road blueiconcolor" style="margin-right:3px;"></i> Wrap-up and what's next

Your web server is shaping up! With a [cookbook][cookbook] you're now better organized. You also learned about how the [cookbook_file][cookbook_file] resource enables you to reference an external file from your recipe. And although we have just one recipe, we saw how a [run-list][run-list] lets us run multiple cookbooks from one command.

But now imagine you want to run this recipe on a second web server, or your server's IP address changes. Then what? The IP address is hard-coded, so you would either have to manually change the string each time something changes or invent some process that replaces the IP address for you. What a pain!

We'll solve that problem in the next lesson, where you'll use a _template_ to add dynamic configuration to your recipe.

<%= link_to 'Add dynamic configuration &rarr;', '/rhel/add-dynamic-configuration/', class: 'button radius' %>

[cookbook]: http://docs.opscode.com/essentials_cookbooks.html
[cookbook_file]: http://docs.opscode.com/resource_cookbook_file.html
[run-list]: http://docs.opscode.com/essentials_node_object_run_lists.html
