---
title: 'Save the run-list'
order: 6
layout: tutorial
description: TODO
keywords: TODO
---
# Save the run-list

**Time to complete: 10 minutes**

[Last time](/rhel/add-dynamic-configuration/) you learned about how dynamic configuration helps you write a single, general recipe that you can use everywhere. You also learned that a node is any computer &ndash; physical or virtual &ndash; that's managed by Chef.

## <i class="fa fa-wrench greeniconcolor" style="margin-right:3px;"></i> Your job

Your demo to the leads went off without a hitch! Now that you have a bit of downtime, let's make <codeinline>chef-client</codeinline> easier to run by by associating your node with its run-list.

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:395px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**You'll learn:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how to get the name of your node.<br>
  <i class="fa fa-check"></i>&nbsp; how to bind your node to its run-list.<br>
  <i class="fa fa-check"></i>&nbsp; why Chef persists node objects.
</sidebar>

## <i class="fa fa-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Get the node name](#1getthenodename)
  1. [Save the run-list](#2savetherunlist)

## 1. Get the node name

Run this command to get the name of your node object. Note the name for the next step.

```bash
$ knife node list --local-mode
```

[COMMENT] The warning <codeinline>WARNING: No knife configuration file found</codeinline> is undelightful.

We'll use the name **localhost** in this tutorial. Replace **localhost** with your node name in the steps that follow.

## 2. Save the run-list

Run this to add the **webserver** cookbook to the node's run-list.

[COMMENT] One thing that's confusing me is that we have a _cookbook_ named webserver. How does this relate to the notion of a webserver _recipe_? The only recipe we have is default.rb. How does it know it's this one?

```bash
$ sudo knife node run_list add localhost webserver --local-mode
```

You'll see something like this.

```
localhost:
  run_list: recipe[webserver]
```

Now you no longer need to specify the run-list. When you run <codeinline>chef-client</codeinline> all you have to do is specify the node's name and Chef will fetch the run-list.

```bash
$ sudo chef-client --node-name localhost --local-mode
```

Because we haven't changed the cookbook, no action is taken, but you'll see that Chef applied the run-list and evaluated the correct cookbook.

```bash
...
resolving cookbooks for run list: ["webserver"]
Synchronizing Cookbooks:
  - webserver
Compiling Cookbooks...
Converging 3 resources
Recipe: webserver::default
  * package[httpd] action install (up to date)
  * service[httpd] action start (up to date)
  * service[httpd] action enable (up to date)
  * template[/var/www/html/index.html] action create (up to date)
...
```

[CONCEPT] Associating run-lists with nodes is why Chef persists node objects. But at first, it may not seem like a big win to replace <codeinline>--runlist webserver</codeinline> with <codeinline>--node-name localhost</codeinline>, but the wins will become more apparent once you start running multiple cookbooks every time you run <codeinline>chef-client</codeinline>.

## <i class="fa fa-road blueiconcolor" style="margin-right:3px;"></i> Wrap-up and what's next

We've covered a lot of ground so far! You learned what a resource is and managed these types:

  * [file]
  * [package]
  * [service]
  * [cookbook_file]
  * [template]

You worked with these tools:

  * [chef]
  * [chef-apply]
  * [chef-client]
  * [knife]


You started by configuring a file and then learned more about Chef's capabilities by configuring a web server. You can now:

  * configure a file, a package and a service.
  * organize your work into a cookbook.
  * work with a run-list.
  * associate your run-list with a node.
  * combine a template with a node object to load system attributes.

You've successfully used Chef to configure a few kinds of resources, but locally on your own computer. In the next lesson, find out what it's like to move out to a real server environment and how Chef can help you manage your infrastructure as you scale.

<%= link_to 'Scale out with Chef server &rarr;', '/rhel/scale-out-with-chef-server/', class: 'button radius' %>


[file]: http://docs.opscode.com/resource_file.html
[package]: http://docs.opscode.com/resource_package.html
[service]: http://docs.opscode.com/resource_service.html
[cookbook_file]: http://docs.opscode.com/cookbook_file.html
[template]: http://docs.opscode.com/template.html
[chef]: http://docs.opscode.com/ctl_chef.html
[chef-apply]: http://docs.opscode.com/ctl_chef_apply.html
[chef-client]: http://docs.opscode.com/ctl_chef_client.html
[knife]: http://docs.opscode.com/chef/knife.html
