---
title: 'Scale out with Chef server'
order: 7
layout: tutorial
description: TODO
keywords: TODO
---
# Scale out with Chef server

**Time to complete: 25 minutes**

Up until now, you learned how to use Chef to bring up a web server and serve a home page that displays some basic info about the server. So far you've configured your local laptop or desktop computer, which is a great way to experiment with Chef.

Now you're ready to scale-out your infrastructure by configuring additional servers. You _could_ do this manually. One way might be to archive your cookbooks, copy them to your servers, unpack them, and then run <codeinline>chef-client</codeinline>. Another way might be to pull your cookbooks from source control on each server and run <codeinline>chef-client</codeinline> from there.

Either way, you'll have to install the Chef tools yourself. You'll also need to build up some infrastructure to distribute the cookbooks, set up your run-lists, and so on. You may even need to install the source control management tools on each server. All these are possible, but can be tedious and add complexity to your workflow.

These approaches also lack a central authority, so you'll also miss out on some of Chef's more powerful capabilities such as the ability to share information among nodes.

<i class="icon-wrench greeniconcolor icon-2x" style="float:left; margin-right:10px;"></i> Your task is to add a second server that's configured just like the first one. Let's see how easy it is to let Chef do the heavy lifting for you and be a persistent location to manage your servers.

The main steps you'll follow in this tutorial are:

  1. Set up a second server to manage.
  1. Sign up for a free Hosted Enterprise Chef trail to access a Chef server.
  1. Install the Starter Kit on your workstation to place certificates and other files that enable you to communicate securely with the Chef server from your workstation.
  1. Upload your cookbook to the Chef server.
  1. Bootstrap, or bind, the server you want to manage with the Chef server and execute the run-list (in our case, the webserver cookbook.)

In the end, we'll make a small change to the webserver cookbook so that you can see the overall flow of how configuration changes move from idea to production.

## Fire up a second server

You'll need a second RHEL or CentOS server to which you have root access. You can grab a spare laptop or spin up a virtual machine. Remember, if you don't have access to a RHEL or CentOS server, we offer the <a href='http://opscode-cheflab.herokuapp.com/labs/learnchef/centos/attend' target='_blank'>CentOS Training Lab</a> that you can use for free.

## Sign up for Hosted Enterprise Chef

The _Chef server_ acts as a hub for your cookbooks and other configuration data. You author and upload cookbooks from your workstation &ndash; either your laptop or desktop computer &ndash; and use the <codeinline>knife</codeinline> command to upload them to the Chef server. Nodes use <codeinline>chef-client</codeinline> to get the latest cookbooks and other details from the Chef server before executing their run-lists.

The easiest way to set up a Chef server is to let us host it for you on Hosted Enterprise Chef. To get set up, just fill out the form on our sign up page.

<a class='button radius' href='<%= hec_sign_up_url %>' target='_blank'>Sign up for a free trial of Hosted Enterprise Chef&nbsp;&nbsp;<i class='icon-external-link'></i></a>

Now you need to copy files and tools locally that enable you to securely communicate with the Chef server.

## Install the Starter Kit

The Starter Kit provides certificates and other files that enable you to communicate securely with the Chef server. Follow these steps from your workstation.

  1. Navigate to <%= link_to "#{hec_manage_url}", "#{hec_manage_url}", :target => "_blank" %>.
  1. From the **Administration** tab, choose the organization that you created when you signed up for Hosted Enterprise Chef.
  1. From the **Actions** column, select **Starter Kit**.
  1. Click the **Download Starter Kit** button.
  1. Click **Proceed**. Save the file <filepath>chef-starter.zip</filepath> to your computer.
  1. Extract chef-starter.zip to a convenient location. On Linux, we recommend your home directory. This makes your Chef working directory <filepath>~/chef-repo</filepath>.

From here on, you'll do all your work from the <filepath>chef-repo</filepath> directory, and not the working directory you used for the previous tutorials.

Next we'll upload the **webserver** cookbook that you've already created and upload it to the Chef server.

## Upload your cookbook to the Chef server

In practice you'll run the <codeinline>chef generate cookbook</codeinline> command that you learned about [previously](/rhel/make-your-recipe-more-manageable/) to generate a new cookbook. But for now, let's just copy the one we've already created to our <filepath>chef-repo</filepath> directory.

You'll also learn more about <codeinline>knife</codeinline> &ndash; the tool that serves as the interface between your local computer and the Chef server. You used this tool previously to get the name of your local node object.

Copy the <filepath>webserver</filepath> directory from your previous working directory to the <filepath>chef-repo/cookbooks</filepath> directory.

The command looks like this for the directories that we've suggested.

```bash
cp --recursive ~/chef-tutorials/cookbooks/webserver ~/chef-repo/cookbooks/webserver
```

Now that you have a cookbook in your <filepath>chef-repo</filepath> directory, let's use <codeinline>knife</codeinline> to upload your cookbook to the Chef server. From anywhere under your <filepath>chef-repo</filepath> directory, run this command.

```bash
$ knife cookbook upload webserver
```

A copy of your cookbook now exists on the Chef server. The next step is to run the cookbook on your node.

## Bootstrap your server node

Recall that a node is basically any compute resource in your infrastructure, whether it be a virtual machine or physical server. Any computer that is managed by a Chef server is commonly referred to as a node.

The next step is to install the Chef tools on your server node and have it run our webserver cookbook.

### Run knife to bootstrap the node

We commonly call the process that installs the Chef tools on a node and the initial check-in to the Chef server _bootstrapping_ the node.

Run this command to bootstrap a Linux node. Replace <codeinline>ADDRESS</codeinline> with your server's FQDN or IP address, and <codeinline>USER</codeinline> and <codeinline>PASSWORD</codeinline> with your root credentials.

```bash
$ knife bootstrap ADDRESS --sudo --ssh-user USER --ssh-password PASSWORD --node-name node1 --run-list 'recipe[webserver]'
```

The optional <codeinline>--node-name</codeinline> argument uniquely identifies the node with the Chef server. Its value can be whatever you want.

The <codeinline>knife bootstrap</codeinline> command established an SSH connection to the node, installed the Chef tools, downloaded the webserver cookbook on the node, and ran it. In one command, Chef carried out most of the steps you previously dealt with manually.

## Update your server configuration

To recap, when you bootstrap a node, you install the Chef tools, set the run-list, and do an initial <codeinline>chef-client</codeinline> run.

Let's wrap-up by modifying the recipe one final time and then running <codeinline>chef-client</codeinline> on our node. This way, you'll see what it's like to update a node after the initial <codeinline>chef-client</codeinline> run.

### Modify and upload the cookbook

Modify <filepath>webserver/templates/default/index.html.erb</filepath> to incorporate the server's run-list as part of the home page.

```html
<html>
  <body>
    <h1>hello from <%%= node['ipaddress'] %></h1>

    <pre>
      <%%= node['hostname'] %>
      <%%= node['platform'] %> - <%%= node['platform_version'] %>
      <%%= node['memory']['total'] %> RAM
      <%%= node['cpu']['total'] %> CPUs
      <br>
      <%%= node['recipes'] %> is in the run-list
    </pre>
  </body>
</html>
```

Run <codeinline>knife</codeinline> to upload the updated cookbook to the Chef server.

```bash
$ knife cookbook upload webserver
```

<codeinline>knife</codeinline> uploads your updated cookbook to the Chef server.

```
Uploading webserver      [0.1.0]
Uploaded 1 cookbook.
```

### Run chef-client

There are a few ways to run <codeinline>chef-client</codeinline> on a bootstrapped node. Here's how to use the <codeinline>knife ssh</codeinline> command to do it (just replace <codeinline>ADDRESS</codeinline>, <codeinline>USER</codeinline>, and <codeinline>PASSWORD</codeinline> with yours.)

```bash
$ knife ssh ADDRESS 'sudo chef-client' --manual-list --ssh-user USER --ssh-password PASSWORD
```

[COMMENT] crushtime: It appears that you need the <codeinline>--manual-list</codeinline> here. Otherwise, you get <codeinline>FATAL: No nodes returned from search!</codeinline>. After looking at the docs, still not sure what it is or why it's needed. Can a default be assumed?

This command creates an SSH connection to the node and runs the <codeinline>sudo chef-client</codeinline> command.

[COMMENT] Why is this better than <codeinline>ssh USER@ADDRESS; sudo chef-client</codeinline>? Only cause it's one step? The manual SSH version seems simpler to be honest...</comment>

You'll see something like this:

![The web server's run-list](rhel/webserver-node-attributes-runlist.png)

[COMMENT] crushtime: knife ssh needs to be able to create and store (on the workstation) a directory of public IP addresses for nodes in the environemnt (i.e., just like Ansible.)

## Wrap up

Awesome. You've used Chef server to set up your second web server. Chef server made it easy to get the Chef tools on your server node and run the webserver cookbook all in one step.

Let's recap some of the concepts.

  * A Chef server acts as a hub for your cookbooks and other configuration data.
  * Hosted Enterprise Chef provides a secure location to manage your cookbooks and roll them out to your server infrastructure. Think of it as a Chef server that we provide and manage for you.
  * Your workstation is the computer from which you manage your servers. You run the <codeinline>chef</codeinline> command to manage your cookbooks and the <codeinline>knife</codeinline> command to interface with the Chef server.
  * You run <codeinline>chef-client</codeinline> on your nodes to check in with the Chef server, download the latest cookbooks, and apply the run-list. Running <codeinline>knife ssh</codeinline> on your workstation is an easy way to trigger <codeinline>chef-client</codeinline> to run.
  * To <i>bootstrap</i> a node means to install the Chef tools and perform an initial <codeinline>chef-client</codeinline> run on that node. The <codeinline>knife bootstrap</codeinline> command does this for you.
  * To apply new configuration to your node, run <codeinline>knife cookbook upload</codeinline> to upload your cookbook to the Chef server and then <codeinline>knife ssh</codeinline> to run <codeinline>chef-client</codeinline> on your target node.

## What's next?

Thanks for working through these tutorials. We hope you learned how Chef can make configuration management an easier and more enjoyable part of your job.

We're working on new content to guide you through more Chef fundamentals. Please check back soon!

[COMMENT] Can we recommend a next step?
