---
title: 'Configure a package and service'
order: 2
layout: tutorial
description: Configure Apache web server as a way to learn how to work with packages and services
keywords: package, service, file, resource, Apache, httpd
---
# Configure a package and service

**Time to complete: 15 minutes**

[Last time](/rhel/configure-a-resource/) you learned how to manage a file resource. Let's extend that idea to also manage a package and a service, which are also kinds of resources. Although you don't need prior knowledge about web servers, configuring one is a great way to learn how to work with packages and services.

<i class="icon-wrench greeniconcolor icon-2x" style="float:left; margin-right:10px;"></i> Your latest task is to build a web server for your department. Not too hard, right?

Now imagine you need to build it a dozen or more times across your infrastructure. You know that as your project evolves, dependencies change and additional requirements get added to the mix. You may eventually want to add a load balancer, a database server, and who knows what else. You know you're going to need something more than a shell script to manage all that complexity.

Your goal is to install and start a web server and have it serve up a home page that displays some basic info about the server that's hosting it. We'll build upon and improve the server configuration in the next few tutorials that follow.


[WARN] Before you start, be sure that you have root access to your RHEL machine because installing Apache requires it.

## Set up your working directory

Open a terminal window and <codeinline>cd</codeinline> to the directory you used in the previous tutorial, for example, <filepath>~/chef-tutorials/</filepath>.

```bash
$ cd ~/chef-tutorials
```

## Install the Apache package

In the previous tutorial, you configured a file resource. Packages and services are also kinds of resources. Let's use Chef to install and start Apache HTTP Server. On RHEL and CentOS, the name of the Apache package and service is **httpd**.

We assume that you don't have Apache already installed. But don't worry if you do &ndash; the output of the Chef commands we show here just may vary slightly from what you see, but the result will be the same.

Now let's install the Apache package. From your working directory, add this recipe to a file named <filepath>webserver.rb</filepath>.

```ruby
package 'httpd'
```

We don't need to specify an action because <codeinline>install</codeinline> is the default.

Now apply it.

```bash
$ sudo chef-apply webserver.rb
```

You'll see Chef install the package.

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install
    - install version 2.2.15-30.el6.centos of package httpd
```

Run the recipe a second time, and you'll see that Chef does no work because there's nothing to do &ndash; the package is already in the desired state.

```bash
$ sudo chef-apply webserver.rb
```

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install (up to date)
  ```

## Start and enable the Apache service

Now let's start the service and enable it when the server boots. Modify <filepath>webserver.rb</filepath> to look like this.

```ruby
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end
```

This code uses a list to declare multiple actions. Order matters. Here, the service is started and then it is set to be enabled when the server boots. If starting the web server should fail, the program terminates. That's why we start the service before we enable it &ndash; if the service can't start then we don't want to enable it.

Now apply it.

```bash
$ sudo chef-apply webserver.rb
```

```bash
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install (up to date)
  * service[httpd] action start
    - start service service[httpd]

  * service[httpd] action enable
    - enable service service[httpd]
```

As we've already seen, the package is already installed, so there's nothing to do there. The service is then started and enabled.

Next we'll add a home page.

## Add a home page

Let's spruce things up and add a custom home page.

You already know how to configure a <codeinline>file</codeinline> resource; append this one to the end of <filepath>webserver.rb</filepath>, making the entire recipe look like this.

```ruby
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Now apply it.

```bash
$ sudo chef-apply webserver.rb
```

Your home page is now added.

```
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install (up to date)
  * service[httpd] action start (up to date)
  * service[httpd] action enable (up to date)
  * file[/var/www/index.html] action create
    - update content in file /var/www/index.html from none to bce910
        --- /var/www/index.html 2014-05-15 03:38:54.524394740 -0700
        +++ /tmp/.index.html20140515-18937-ibjog5 2014-05-15 03:39:13.516394179 -0700
        @@ -1,5 +1,6 @@
        +<html>
        +  <body>
        +    <h1>hello world</h1>
        +  </body>
        +</html>
    - restore selinux security context
```

From a web browser, navigate to http://localhost. You'll see something like this.

![The basic home page](rhel/webserver-basic.png)

[WARN] If your browser can't connect, it could be that a firewall is blocking incoming connections on port 80. In that case, try running the <codeinline>curl</codeinline> command: <codeinline>curl http://localhost</codeinline>.

So far so good! You now know how to work with three kinds of resources &ndash; files, packages, and services.

But you may notice one big problem with our recipe - the HTML code lives inside it, so there is no clear separation between your web site code and your Chef recipe that manages of it. You'd never do this in practice.

In the next tutorial, you'll learn how to create a _cookbook_ to make your Chef recipes more manageable.

<%= link_to 'Make your recipe more manageable &rarr;', '/rhel/make-your-recipe-more-manageable/', class: 'button radius' %>
