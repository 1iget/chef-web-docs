---
title: 'Configure a package and service'
order: 3
layout: tutorial
description: Configure Apache web server as a way to learn how to work with packages and services
keywords: package, service, file, resource, Apache, httpd
---
[TIMETOCOMPLETE] 15

# Configure a package and service

Let's extend what you learned about file management in the [previous lesson](/rhel/configure-a-resource/) to manage the Apache HTTP Server package and its service. Like files, packages and services are also types of resources.

Of course, you can set up one web server manually. But with Chef it'll be easier to manage your infrastructure as you scale, add complexity, and roll out new configuration policies.

Although you don't need prior knowledge about web servers, configuring one is a great way to grow your Chef skills.

## <i class="fa fa-question-circle blueiconcolor" style="margin-right:3px;"></i> All set up?

You should complete the [previous lesson](/rhel/configure-a-resource/) before starting this one.

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:420px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, watch for:**</span><br>
  <i class="fa fa-check"></i>&nbsp; how order affects a recipe's behavior.<br>
  <i class="fa fa-check"></i>&nbsp; how to declare multiple actions.<br>
  <i class="fa fa-check"></i>&nbsp; what problems arise.
</sidebar>

## <i class="fa fa-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Install the Apache package](#1installtheapachepackage)
  1. [Start and enable the Apache service](#2startandenabletheapacheservice)
  1. [Add a home page](#3addahomepage)

## 1. Install the Apache package

Let's install the Apache package, **httpd**. From your working directory, add this recipe to a file named <filepath>webserver.rb</filepath>.

```ruby
# ~/chef-repo/webserver.rb
package 'httpd'
```

We don't need to specify an action because <codeinline>install</codeinline> is the default.

Now run <codeinline>chef-apply</codeinline> to apply the recipe.

```bash
# ~/chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install
    - install version 2.2.15-30.el6.centos of package httpd
```

Run the recipe a second time.

```bash
# ~/chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install (up to date)
  ```

You see that Chef does no work because there's nothing to do &ndash; the package is already installed.

## 2. Start and enable the Apache service

Now let's start the Apache service and enable it when the server boots. Modify <filepath>webserver.rb</filepath> to look like this.

```ruby
# ~/chef-repo/webserver.rb
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end
```

This code uses a list to declare multiple actions.

Now apply it.

```bash
# ~/chef-repo
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install (up to date)
  * service[httpd] action start
    - start service service[httpd]

  * service[httpd] action enable
    - enable service service[httpd]
```

The package is already installed, so there's nothing to do. However, the service is started and enabled.

## 3. Add a home page

Let's spruce things up and add a custom home page.

You already know how to configure a <codeinline>file</codeinline> resource; append one that configures the default home page, <filepath>/var/www/html/index.html</filepath>, to the end of <filepath>webserver.rb</filepath>. The entire recipe now looks like this.

[CONCEPT] Tip: You can copy the text from the box below and use the **Send Text** button to paste it into your CloudShare VM.  

```ruby
# ~/chef-repo/webserver.rb
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

Now apply it.

```bash
# ~/chef-repo/
$ chef-apply webserver.rb
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * package[httpd] action install (up to date)
  * service[httpd] action start (up to date)
  * service[httpd] action enable (up to date)
  * file[/var/www/html/index.html] action create
    - create new file /var/www/html/index.html
    - update content in file /var/www/html/index.html from none to b8b8af
        --- /var/www/html/index.html2014-06-27 15:11:55.190162819 -0400
        +++ /tmp/.index.html20140627-9382-1nx42372014-06-27 15:11:55.190162819 -0400
        @@ -1 +1,6 @@
        +<html>
        +  <body>
        +    <h1>hello world</h1>
        +  </body>
        +  </html>
```

Confirm that your web page is available. From a web browser, navigate to **http://localhost**. You'll see something like this.

![The basic home page](rhel/webserver-basic.png)

[CONCEPT] If you're working from SSH, try running the <codeinline>curl</codeinline> command: <codeinline>curl http://localhost</codeinline>.

<hr>

## <i class="fa fa-question blueiconcolor" style="margin-right:3px;"></i> What did we see here?

You saw how to work with the package and service resources. You now know how to work with three types of resources: [file][file], [package][package], and [service][service].

You also saw how to apply multiple actions. But how does Chef know what order to apply resources and actions?

### <i class="fa fa-list-ol greeniconcolor" style="margin-right:3px;"></i> Chef works in the order you specify

Let's take another quick look at our web server recipe.

```ruby
# ~/chef-repo/webserver.rb
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end

file '/var/www/html/index.html' do
  content '<html>
  <body>
    <h1>hello world</h1>
  </body>
</html>'
end
```

The resources are applied in the order they are specified in the recipe. So here the package is installed, then the service is configured, and finally the home page is set. If any resource is already in the desired state, Chef simply moves on to the next one.

The same idea applies to the action list <codeinline>[:start, :enable]</codeinline> for configuring the service. The service is started before it is enabled when the server boots.

It's important to always think about how you order things. For example, the recipe wouldn't work if we tried to configure the Apache service before the package is even installed.

A recipe stops if any step fails (don't worry &ndash; Chef provides info about the error). That's why we ordered the service actions the way we did. If the service can't start then we don't want to enable it.

## <i class="fa fa-road blueiconcolor" style="margin-right:3px;"></i> What's next

You may notice one big problem with our recipe &ndash; the HTML code lives inside it, so there is no clear separation between our web site code and our recipe to manage it. It's a good incremental step because it helps you get things working, but this of course would never scale to a full web site.

Next you'll learn how to create a _cookbook_ to make your Chef recipes more manageable.

<%= link_to 'Make your recipe more manageable &rarr;', '/rhel/make-your-recipe-more-manageable/', class: 'button radius' %>


[file]: http://docs.opscode.com/resource_file.html
[package]: http://docs.opscode.com/resource_package.html
[service]: http://docs.opscode.com/resource_service.html
