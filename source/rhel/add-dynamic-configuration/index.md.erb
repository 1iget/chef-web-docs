---
title: 'Add dynamic configuration'
order: 5
layout: tutorial
description: TODO
keywords: TODO
---
# Add dynamic configuration

**Time to complete: 10 minutes**

[Last time](/rhel/make-your-recipe-more-manageable/) you learned how to create a cookbook to separate your HTML code from your recipe &ndash; making things much more manageable. We ended the lesson by changing the home page to display the server's IP address. But we encountered a problem &ndash; hard-coded strings make it difficult to scale.

Let's solve the problem by using a template to provide placeholders that are filled in as the recipe runs. This is called dynamic configuration.

## <i class="fa fa-wrench greeniconcolor" style="margin-right:3px;"></i> Your job

The leads in your department hear about your new web server, and want to see a demo of your great work &ndash; tomorrow. The web server will run on multiple instances, and one requirement is to display server info on the home page that uniquely identifies each one.

Jerry, your lead, suggests that as part of the demo you configure the web server from scratch to show how easy it is to scale. And while you're at it, he suggests that you add more info to the home page to describe the server, including the platform it's running on and the total amount of memory and CPU count.

You already can display the IP address, so you're ahead of the game &ndash; except that you realize that the IP address is hard-coded. Folks will notice. Sure, you could hack something together to get it working, but why not do it the right way so you're not left scrambling later?

<sidebar style="line-height:1.7; font-size:1.0em; margin-top:30px; max-width:510px;">
<span style="line-height:2.0;"><i class="fa fa-search"></i>&nbsp;**As you read, keep in mind that:**</span><br>
  <i class="fa fa-check"></i>&nbsp; a _template_ provides placeholders that are filled in later when the recipe runs.<br>
  <i class="fa fa-check"></i>&nbsp; a template is a type of resource, just like a file, package, or service.<br>
  <i class="fa fa-check"></i>&nbsp; Chef provides many details about your server, called _attributes_.
</sidebar>

## <i class="fa fa-tasks rediconcolor" style="margin-right:3px;"></i> Here's what you'll do

  1. [Create a template file](#1createatemplatefile)
  1. [Add template code to your HTML](#2addtemplatecodetoyourhtml)
  1. [Reference the template from your recipe](#3referencethetemplatefromyourrecipe)
  1. [Run the cookbook](#4runthecookbook)
  1. [Add more server attributes to the home page](#5addmoreserverattributestothehomepage)

## 1. Create a template file

Run this command to generate a template HTML file for our home page.

```bash
$ chef generate template webserver index.html
```

Here's the updated directory structure. The file <filepath>index.html.erb</filepath> exists under <filepath>webserver/templates/default</filepath> (note that for a template Chef adds the .erb extension to the file name.)

[COMMENT] When should we disclose ERB? In fact, when should we disclose that this is Ruby at all!?

```bash
webserver/
├── Berksfile
├── chefignore
├── files
│   └── default
│       └── index.html
├── metadata.rb
├── README.md
├── recipes
│   └── default.rb
└── templates
    └── default
        └── index.html.erb
```

## 2. Add template code to your HTML

Now edit <filepath>webserver/templates/default/index.html.erb</filepath> to look like this.

```html
<html>
  <body>
    <h1>hello from <%%= node['ipaddress'] %></h1>
  </body>
</html>
```

## 3. Reference the template from your recipe

Update <filepath>webserver/recipes/default.rb</filepath> by replacing the <codeinline>cookbook\_file</codeinline> resource with this <codeinline>template</codeinline> resource.

```ruby
package 'httpd'

service 'httpd' do
  action [:start, :enable]
end

template '/var/www/html/index.html' do
  source 'index.html.erb'
end
```

A <codeinline>template</codeinline> resource is similar to the <codeinline>cookbook\_file</codeinline> resource that you previously created except that it reads from the cookbook's <filepath>template</filepath> directory and fills in the placeholders before copying the file to the destination.

[CONCEPT] At this point <filepath>webserver/files/default/index.html</filepath> is no longer needed because we've switched to using a template. In production you'd probably remove this file. But for this lesson, you can leave it where it is.

## 4. Run the cookbook

Now run the cookbook with our template enabled.

```bash
$ sudo chef-client --local-mode --runlist webserver
```

Open a web browser and navigate to **http://localhost**. The result is the same as before, but now the IP address is found automatically!

![The home page with IP address](rhel/webserver-ip-address.png)

Let's discover what other node attributes you can use.

## 5. Add more server attributes to the home page

Now let's display the additional server info that Jerry asked for on our home page. Modify <filepath>webserver/templates/default/index.html.erb</filepath> like this.

```html
<html>
  <body>
    <h1>hello from <%%= node['ipaddress'] %></h1>

    <pre>
      <%%= node['hostname'] %>
      <%%= node['platform'] %> - <%%= node['platform_version'] %>
      <%%= node['memory']['total'] %> RAM
      <%%= node['cpu']['total'] %> CPUs
    </pre>
  </body>
</html>
```

The updated web page displays the server's host name, platform info, total installed memory, and number of CPUs in addition to its IP address.

When you refresh your browser, you'll see something like this.

![The web server's attributes](rhel/webserver-node-attributes.png)

[CONCEPT] Check out [this](http://docs.opscode.com/chef_overview_attributes.html#automatic-ohai) page if you want to experiment with more node attributes.

[COMMENT] crushtime-12: ^ We were originally going to show ohai here. ohai is not included by default in /opt/chefdk/bin. It should be.

## <i class="fa fa-puzzle-piece greeniconcolor" style="margin-right:3px;"></i> So how do templates work?

To understand how templates work, you should first understand what a node is. A _node_ represents a server and is typically a virtual machine or physical server &ndash; basically any compute resource in your infrastructure that's managed by Chef. When you ran <codeinline>chef-client</codeinline> for the first time, Chef created what's called a _node object_ for you. This node object contains a number of attributes that describe the server, and these attributes are saved in a file on disk.

When a recipe runs, a <codeinline>node</codeinline> object is loaded into the program. Chef loads the server's attributes from the file into an in-memory copy. For our home page, we want to display the server's IP address. To do so, we access the <codeinline>ipaddress</codeinline> attribute of the <codeinline>node</codeinline> object.

The default node name Chef provides is the FQDN of your server. Later you'll see how to specify a name.

## <i class="fa fa-road blueiconcolor" style="margin-right:3px;"></i> Wrap-up and what's next

Great, you now understand how to use [templates][template] for dynamic configuration. Dynamic configuration means that you can write a single, general recipe that’s customized for a particular node as the recipe runs. You don’t have to write a separate, special recipe for every node anymore.

You ran the [chef][chef] command to set up the cookbook and [chef-client][chef-client] to run it.

You've run <codeinline>chef-client</codeinline> a lot by now. Entering the run-list each time can get tiresome, especially once you have multiple cookbooks. And it can get difficult to manage once you're running them on multiple servers. Wouldn't it be better if you could specify the run-list only when you set up the server and when you change the run-list?

In the next lesson, we'll see how to associate your server with a specific run-list and we'll also recap what we've done so far.

<%= link_to 'Save the run-list &rarr;', '/rhel/save-the-run-list/', class: 'button radius' %>


[template]: http://docs.opscode.com/essentials_cookbook_templates.html
[chef]: http://docs.opscode.com/ctl_chef.html
[chef-client]: http://docs.opscode.com/ctl_chef_client.html
