---
title: 'Create the project'
order: 3
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
---
A _build cookbook_ xxxx...


[PRODNOTE] Show the Delivery pipeline again here...

Talk about the phases, and how each step below each phase cooresponds to a recipe in the build cookbook.

[PRODNOTE] Put this somewhere better:

[START_MODAL remote-origin How Chef Delivery manages the remote repositories]

In this scenario, we're cloning a GitHub project locally and creating a new Git repo that's hosted on our Chef Delivery Server.

Run `git remote -v` to see your remote repositories.

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ git remote -v
delivery	ssh://tpetchel@chef@10.194.12.112:8989/chef/learn-chef/build-a-delivery-pipeline-rhel (fetch)
delivery	ssh://tpetchel@chef@10.194.12.112:8989/chef/learn-chef/build-a-delivery-pipeline-rhel (push)
origin	https://github.com/learn-chef/build-a-delivery-pipeline-rhel.git (fetch)
origin	https://github.com/learn-chef/build-a-delivery-pipeline-rhel.git (push)
```

You'll see two remotes &ndash; `delivery` and `origin`. `origin` refers to the original remote on GitHub, and `delivery` refers to our new remote that's hosted on our Chef Delivery server. This enables you to develop new features in the Git repo that Chef Delivery hosts, and later integrate your changes back to GitHub when you're ready. It also enables you to fetch updates from GitHub and integrate them into Chef Delivery's Git system.

You can also connect your Chef Delivery directly to an external Git system, such as GitHub. [FOR MORE INFORMATION, SEE XXX].

[END_MODAL]

At this point, you have

* A Chef Delivery installation.
* A new user and `delivery setup` on workstation.

We've added the code you'll need to this tutorial on GitHub. In this part, you'll clone this GitHub repo locally and connect it to your Chef Delivery installation.

[Describe how you can use Delivery's internal Git server or GitHub. Point to the relevant documentation.]

Although it's possible to connect Chef Delivery to an existing GitHub project, for learning purposes you'll clone the `awesome_customers` cookbook from GitHub to your workstation and create a copy of it on your Chef Delivery's internal Git server.

## 1. Clone the GitHub repo to your workstation

(for example, <code class="file-path">~/Development</code>").

```bash
# ~/Development
$ git clone https://github.com/learn-chef/build-a-delivery-pipeline-rhel.git
Cloning into 'build-a-delivery-pipeline-rhel'...
remote: Counting objects: 65, done.
remote: Compressing objects: 100% (45/45), done.
remote: Total 65 (delta 4), reused 65 (delta 4), pack-reused 0
Unpacking objects: 100% (65/65), done.
Checking connectivity... done.
```

```bash
# ~/Development
$ cd build-a-delivery-pipeline-rhel
```

## 2. Create a default configuration

The next step is to run `delivery init` to create a default configuration. The `delivery init` command:

* pushes the `master` branch to the Chef Delivery's internal Git server.
* creates a default pipeline.
* creates a branch from `master` named `add-delivery-config`.
* add the a configuration files to the <code class="file-path">.delivery</code> directory.
* submits the change for review.

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ delivery init
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel
Is /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel a git repo?  yes
adding remote delivery: ssh://tpetchel@chef@10.194.12.112:8989/chef/learn-chef/build-a-delivery-pipeline-rhel
Remote 'delivery' added to git config!
Creating project: build-a-delivery-pipeline-rhel
Checking for content on the git remote delivery: No upstream content
No upstream content; pushing local content to server.
To ssh://tpetchel@chef@10.194.12.112:8989/chef/learn-chef/build-a-delivery-pipeline-rhel
*	refs/heads/master:refs/heads/master	[new branch]
Branch master set up to track remote branch master from delivery.
Done

Creating master pipeline for project: build-a-delivery-pipeline-rhel ... done
Generating build cookbook skeleton
Cached copy of build cookbook generator exists; skipping git clone.
PCB generate: "chef" "generate" "cookbook" ".delivery/build-cookbook" "-g" "/home/thomaspetchel/.delivery/cache/generator-cookbooks/pcb"
Git add and commit of build-cookbook
Writing configuration to /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel/.delivery/config.json
New delivery configuration
--------------------------
{
  "version": "2",
  "build_cookbook": {
    "path": ".delivery/build-cookbook",
    "name": "build-cookbook"
  },
  "skip_phases": [],
  "build_nodes": {},
  "dependencies": []
}Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel
Review for change add-delivery-config targeted for pipeline master
Created new patchset
https://10.194.12.112/e/chef/#/organizations/learn-chef/projects/build-a-delivery-pipeline-rhel/changes/424c2719-54e4-44c1-97be-ad225fb392d9
```

* A browser window appears. Watch it flow through the pipeline - the default actions happen.

![](delivery/delivery-init-result.png)

## 3. Move the change through the pipeline

![](delivery/delivery-init-approve.png)

Scroll down to the bottom of the patchset and enter a comment.

![](delivery/delivery-init-add-comment.png)

Click the **Add Comment** button.

Scroll back to the top of the patchset and click the **Approve** button.

![](delivery/delivery-init-approve.png)

The **Approve** action merges the `add-delivery-config` branch into the `master` branch and deletes the `add-delivery-config` branch from the server (you can later run the `git branch prune` command to remove the references to the deleted branches from the Git server.)

[COMMENT] You need to first wait for the unit, lint, and syntax phases to complete before you can approve a patchset. This ensures that all tests pass before the change is merged into the target branch (in this case, `master`.)

[PRODNOTE] Users who are new to Git might be all like 'wha?' about the branch merging. Is there an appropriate Git primer we should point users at?

After the change is approved, the process moves to the **Build** stage of the pipeline. This is where the unit, lint, syntax, and quality tests are performed. This time, they're performed on the `master` branch [, which includes the previous `master` plus your changes...].

The **Build** stage also runs the security, and publish phases. Again, all phases are run on your build node.

[PRODNOTE] Mention that U, L, S happen on the build node in **Verify**...

![](delivery/delivery-init-build.png)

After the **Build** stage completes [say more], press the **Deliver** button to approve [blah to the next stage].

[PRODNOTE] I think we're missing something about the **Approval** stage. When you run through it again, note what happens.

Press the **Confirm** button from the dialog that appears.

![](delivery/delivery-init-confirm-delivery.png)

[PRODNOTE] This diagram ^ should have just one item. Redo it.

You'll see the process move through the **Union**, **Rehearsal**, and **Delivered** stages. We'll look at these stages more closely later.

Watch the change move through the **Union**, **Rehearsal**, and **Delivered** stages. You'll see the change eventually make it to the **Delivered** stage.

![](delivery/delivery-init-delivered.png)

Congratulations! [mention that we'll talk about this in a moment.]

[COMMENT] In this tutorial, you approve and deliver your own changes. In practice, you'll need to decide with your organization the criteria for approving and shipping changes. At CHEF, we follow the "four eyes" rule, where a total of four eyes are required to approve a code change. After two people approve a code change, and there are no unresolved comments, the change can be approved and move to the next stage in the pipeline.

## 4. Integrate the change locally

```bash
$ git branch -v
* add-delivery-config 2a0293e Add Delivery config
  master              ddaf3be [ahead 1] Add Delivery build cookbook
```

(the `delivery` part is important because it indicates to pull changes from Chef Delivery's Git server.)

```bash
$ git fetch delivery
remote: Counting objects: 1, done.
remote: Total 1 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (1/1), done.
From ssh://chef@10.194.12.112:8989/chef/learn-chef/build-a-delivery-pipeline-rhel
   aa1a07c..b3a48ab  master     -> delivery/master
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ git checkout master
Switched to branch 'master'
Your branch is behind 'delivery/master' by 2 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ git pull delivery master
From ssh://chef@10.194.12.112:8989/chef/learn-chef/build-a-delivery-pipeline-rhel
 * branch            master     -> FETCH_HEAD
Updating ddaf3be..b3a48ab
Fast-forward
 .delivery/config.json | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 .delivery/config.json
```

## What happened during the process

* The `delivery init` command created a new project, a new pipeline that targets `master`, the `blah` branch, and an empty build cookbook.
* It pushed the `blah` branch to Chef Delivery's Git server, which triggered the [integration] process.

* Look at your recipes - they're empty!

* Look at the pipeline stages - you'll see that 0 resources were converged, for example, the Verify/unit phase.

* Clarify that no cookbooks were tested, nothing was delivered,

[PRODNOTE] In scenario overview, say that artifact gets delivered to Chef server, we'll bootstrap the nodes, and run `chef-client` to pick up the changes.

```bash
[...]
Running phase unit
[2015-10-19T23:49:50+00:00] WARN: Ohai::Config[:disabled_plugins] is set. Ohai::Config[:disabled_plugins] is deprecated and will be removed in future releases of ohai. Use ohai.disabled_plugins in your configuration file to configure :disabled_plugins for ohai.
Starting Chef Client, version 12.5.1
resolving cookbooks for run list: ["build-cookbook::unit"]
Synchronizing Cookbooks:
  - build-cookbook (0.1.0)
Compiling Cookbooks...
Converging 0 resources

Running handlers:
Running handlers complete
Chef Client finished, 0/0 resources updated in 01 seconds
```

In the next lesson, you'll configure each pipeline stage [to do real work.]

[PRODNOTE] Maybe disclose this up-front?

[PRODNOTE] Talk about the created pipeline somewhere...

## How do delete your project

If you ever need to start over, or you complete the tutorial and want to delete this project, login to your Chef Delivery server and run the `delivery-ctl delete-project` command.

This command takes your enterprise, organization, and project names as arguments, like this.

```bash
$ delivery-ctl delete-project ENTERPRISE ORGANIZATION PROJECT
```

For example, for an enterprise named `chef` and an organization named `learn-chef`, you would run this command to delete the `build-a-delivery-pipeline-rhel` project.

```bash
$ sudo delivery-ctl delete-project chef learn-chef build-a-delivery-pipeline-rhel
Successfully deleted project: 'chef/learn-chef/build-a-delivery-pipeline-rhel'
```
