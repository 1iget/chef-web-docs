---
title: 'Create the project'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
meta_tags: [{name: 'robots', content: 'noindex, nofollow'}]
---
Chef Delivery uses _projects_ to organize work across multiple teams. You can create as many projects as you need. A common approach is to have one project for each major component of your system.

Each project has its own Git repository. Chef Delivery can host the Git repository for you or you can connect Chef Delivery to an existing Git project, such as one on GitHub.

To save you the need to maintain your own Git repository, for example, in GitHub, we'll use Delivery's Git server. You'll start by cloning a repository that contains the `awesome_customers` cookbook to your workstation. Then you'll run the `delivery init` command from your workstation. This command creates a new project, a Git repository, a pipeline, and an initial `master` branch that's based off of the existing `master` branch.

[COMMENT] Another way to start would be to create the project from the Chef Delivery web interface and run the `delivery clone` command to pull the empty repository down to your workstation.

## 1. Clone the GitHub repo to your workstation

In this step, you'll clone the repository from GitHub and move to your local repository directory.

Move to your working directory, for example, <code class="file-path">~/Development</code>.

```bash
# ~/Development/delivery-cluster
$ cd ~/Development
```

Clone the `deliver-customers-rhel` repo from GitHub.

```bash
# ~/Development
$ git clone https://github.com/learn-chef/deliver-customers-rhel.git
Cloning into 'deliver-customers-rhel'...
remote: Counting objects: 1698, done.
remote: Compressing objects: 100% (849/849), done.
remote: Total 1698 (delta 540), reused 0 (delta 0), pack-reused 827
Receiving objects: 100% (1698/1698), 202.95 KiB | 0 bytes/s, done.
Resolving deltas: 100% (989/989), done.
Checking connectivity... done.
```

Move to the <code class="file-path">deliver-customers-rhel</code> directory.

```bash
# ~/Development
$ cd deliver-customers-rhel
```

## 2. Create the project and the pipeline

The next step is to run `delivery init`. This command:

* creates a project in Chef Delivery, which includes a new Git repository.
* initializes the `master` branch from the existing `master` branch (in this case, the `master` branch contains the `awesome_customers` cookbook.)
* creates a pipeline that targets `master`.
* creates a branch named `add-delivery-config`, which is based off of `master`.
* creates the <code class="file-path">.delivery</code> directory and adds to it an empty build cookbook and a configuration file.
* submits the change for review.

Run `delivery init` from your local repository directory.

```bash
# ~/Development/deliver-customers-rhel
$ delivery init
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/deliver-customers-rhel
Is /home/thomaspetchel/Development/deliver-customers-rhel a git repo?  yes
adding remote delivery: ssh://tpetchel@test@10.194.11.99:8989/test/learn-chef/deliver-customers-rhel
Remote 'delivery' added to git config!
Creating project: deliver-customers-rhel
Checking for content on the git remote delivery: No upstream content
No upstream content; pushing local content to server.
To ssh://tpetchel@test@10.194.11.99:8989/test/learn-chef/deliver-customers-rhel
*	refs/heads/master:refs/heads/master	[new branch]
Branch master set up to track remote branch master from delivery.
Done

Creating master pipeline for project: deliver-customers-rhel ... done
Generating build cookbook skeleton
Cached copy of build cookbook generator exists; skipping git clone.
PCB generate: "chef" "generate" "cookbook" ".delivery/build-cookbook" "-g" "/home/thomaspetchel/.delivery/cache/generator-cookbooks/pcb"
Git add and commit of build-cookbook
Writing configuration to /home/thomaspetchel/Development/deliver-customers-rhel/.delivery/config.json
New delivery configuration
--------------------------
{
  "version": "2",
  "build_cookbook": {
    "name": "build-cookbook",
    "path": ".delivery/build-cookbook"
  },
  "skip_phases": [],
  "build_nodes": {},
  "dependencies": []
}Chef Delivery
Loading configuration from /home/thomaspetchel/Development/deliver-customers-rhel
Review for change add-delivery-config targeted for pipeline master
Created new patchset
https://10.194.11.99/e/test/#/organizations/learn-chef/projects/deliver-customers-rhel/changes/c469f058-493d-4277-99ba-13f86014a63c
```

### Watch the Verify stage run

When you run `delivery init`, a browser window appears. The page you see shows the pipeline's current status. Listed beneath each stage (Verify, Build, Acceptance, Union, Rehearsal, Delivered) are the phases that make up that stage.

![](delivery/delivery-init-result.png)

The process moves directly to the Verify stage. The Verify stage performs  unit, lint, and syntax checks on your code. The build node merges your changes  into `master` on a temporary copy of the main repository and run the tests against `master`.

Each phase runs on a build node. If you have multiple build nodes, multiple phases can be run in parallel.

## 3. Approve the change

The next step is to approve the change. This is a manual step, where people on your team have a chance to review the code and promote it to the Build stage.

Watch the unit, lint, and syntax phases succeed. Then from the **Review** tab, scroll down to the bottom of the patchset and enter a comment.

![](delivery/delivery-init-add-comment.png)

Click the **Add Comment** button.

Scroll back to the top of the patchset and click the **Approve** button.

![](delivery/delivery-init-approve.png)

Then click **Confirm**.

![](delivery/delivery-init-approve-modal.png)

The **Approve** action merges the `add-delivery-config` branch into the `master` branch and deletes the `add-delivery-config` branch from the server.

[COMMENT] You need to first wait for the unit, lint, and syntax phases to complete before you can approve a patchset. This ensures that all tests pass before the change is merged into the target branch.

## 4. Deliver the change

After you approve the change, the process moves to the Build stage.
* The unit, lint, and syntax phases run again on the build node. The tests run again in the Build stage to ensure that they continue to pass after the change is merged to `master`.

The Build stage also runs the quality and security phases. If these pass, then the publish phase runs. This phase creates an artifact (in our case, a cookbook) that is a release candidate.

![](delivery/delivery-init-build.png)

After the Build stage completes, the process moves to the Acceptance stage.

Beginning with the Acceptance stage, the pipeline switches from analyzing the project’s source code to verifying the artifacts produced in the Build stage. The goal of the Acceptance stage is for the team to make a decision about whether the change should go all the way out to production or not.

The Acceptance stage runs the provision, deploy, smoke, and functional phases. The provision phase sets up any infrastructure needed to test the artifacts. The deploy phase deploys the artifact created in the Build stage.

After the Acceptance stage completes, press the **Deliver** button. Pressing the **Deliver** button is a confirmation that the artifact can be released. The artifact will move through the next three pipeline stages automatically.

![](delivery/delivery-init-deliver.png)

Press the **Confirm** button from the dialog that appears.

![](delivery/delivery-init-confirm-delivery.png)

You'll see the process move through the Union, Rehearsal, and Delivered stages.

The Union, Rehearsal, and Delivered form a shared pipeline, where all the projects that make up the entire system come together. All three stages have the same phases.

The Union stage assesses the impact of the change in the context of a complete (or as close as possible) installation of the set of projects that comprise the entire system. Union is where you test for interactions between interdependent projects.

If all phases of Union succeed, then the Rehearsal stage is triggered. Rehearsal increases confidence in the artifacts and the deployment by repeating the process that occurred in Union in a different environment.

If a failure occurs in Union, Rehearsal serves a different purpose. When you submit a new change and it fixes the break in Union, you know that a sequence of two changes, one that breaks the system, and one that comes after and fixes it, results in a healthy system. You do not yet know what happens when you apply the cumulative change to an environment that never saw the failure. The Rehearsal stage tests the change in an environment that didn’t see the failure.

Delivered is the final stage of the pipeline. What "delivered" means for your system is up to you. It could mean deploying the change so that it is live and receiving production traffic, or it might mean publishing a set of artifacts so they are accessible for your customers.

Watch the change move through the Union, Rehearsal, and Delivered stages.

![](delivery/delivery-init-delivered.png)

Congratulations! You now have a functioning Chef Delivery pipeline.

Note that the pipeline did no real work &ndash; the recipe that defines each phase in your build cookbook is empty. No actual unit or syntax checks were made, and no artifacts were published. However, your `master` branch is now integrated in the system and you have a foundation to build upon. You'll add functionality to the build cookbook in the next lesson.

[COMMENT] In this tutorial, you approved and delivered your own changes. In practice, you'll need to decide with your organization the criteria for approving and shipping changes. At CHEF, we follow the "four eyes" rule, where a total of four eyes is required to approve a code change. After two people approve a code change, and there are no unresolved issues, the change can be approved and move to the next pipeline stage.

## 4. Integrate the change locally

When you clicked **Approve**, Chef Delivery merged the `add-delivery-config` branch into `master` on Chef Delivery's Git server. Now you need to merge the updated `master` branch back to your local repository.

First, run `git branch` to verify that you're currently on the `add-delivery-config` branch.

```bash
$ git branch
* add-delivery-config
  master
```

Now run `git fetch delivery` to download the changes from the remote delivery repo on the Chef Delivery server to your local repo.

```bash
$ git fetch delivery
remote: Counting objects: 1, done.
remote: Total 1 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (1/1), done.
From ssh://test@10.194.11.99:8989/test/learn-chef/deliver-customers-rhel
   77fe036..a9471ce  master     -> delivery/master
```

Run `git checkout master` to switch to the `master` branch.

```bash
$ git checkout master
Switched to branch 'master'
Your branch is behind 'delivery/master' by 2 commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
```

Now run `git pull delivery` to merge the changes into your local copy of `master`.

```bash
$ git pull delivery
Updating a4d9499..a9471ce
Fast-forward
 .delivery/config.json | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 .delivery/config.json
```

### A note about remotes

If you're a Git user, you're likely accustomed to working with the `origin` remote, but in this lesson, you fetched and pulled from `delivery`.

You pulled from `delivery` because we're cloning an existing GitHub project locally and creating a new Git repo that's hosted on our Chef Delivery Server.

`origin` refers to the original remote on GitHub, and `delivery` refers to our new remote that's hosted on our Chef Delivery server.

To see this, run `git remote -v` to see your remote repositories.

```bash
# ~/Development/deliver-customers-rhel
$ git remote -v
delivery	ssh://tpetchel@test@10.194.11.99:8989/test/learn-chef/deliver-customers-rhel (fetch)
delivery	ssh://tpetchel@test@10.194.11.99:8989/test/learn-chef/deliver-customers-rhel (push)
origin	https://github.com/learn-chef/deliver-customers-rhel.git (fetch)
origin	https://github.com/learn-chef/deliver-customers-rhel.git (push)
```

Remember, you don't have to use Chef Delivery's Git server. We do so for learning purposes and because using the Git server that Chef Delivery already provides is the easiest way to get started.

[GITHUB] The final code for this section is available on [GitHub](https://github.com/learn-chef/deliver-customers-rhel/tree/add-delivery-config-v1.0.0) (tag `add-delivery-config-v1.0.0`.)

## How to delete your project

If you ever need to start over, or you complete the tutorial and want to delete this project, login to your Chef Delivery server and run the `delivery-ctl delete-project` command.

This command takes your enterprise, organization, and project names as arguments, like this.

```bash
$ delivery-ctl delete-project ENTERPRISE ORGANIZATION PROJECT
```

For example, for an enterprise named `chef` and an organization named `learn-chef`, you would run this command to delete the `deliver-customers-rhel` project.

```bash
$ sudo delivery-ctl delete-project chef learn-chef deliver-customers-rhel
Successfully deleted project: 'chef/learn-chef/deliver-customers-rhel'
```

You can get the IP address for your Chef Delivery server by running `rake info:list_core_services` from your <code class="file-path">~/Development/delivery-cluster</code> directory.

```bash
# ~
$ cd ~/Development/delivery-cluster
$ rake info:list_core_services
2 items found

delivery-server-test:
  ipaddress: 10.194.11.99

build-node-test-1:
  ipaddress: 10.194.13.122

chef_server_url      'https://10.194.12.65/organizations/test'
```

From there, you can connect to the server over SSH. For example, if you created your Delivery cluster on AWS, you can connect like this.

```bash
# ~/Development/delivery-cluster
$ ssh -i ~/.ssh/learn_chef.pem ubuntu@10.194.11.99
```
