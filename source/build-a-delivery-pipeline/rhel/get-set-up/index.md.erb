---
title: 'Get set up'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 90 minutes
meta_tags: [{name: 'robots', content: 'noindex, nofollow'}]
---
Open issues:

When to have the user get their starter kit on the prov node or workstation (in workstation setup?, separate section here?)

Tell the user which values we chose for enterprise, org, etc.

Where to have folks run `delivery setup` & `delivery token`? <= IDEA: Transform next page to be about setting up stuff like this (add user, get Starter Kit, etc.) Or move that info to thsi page, as it's part of setup?

Run this from the root workspace directory, for example, <code class="file-path">~/Development</code>.

```bash
# ~/Development
$ delivery setup --server=10.194.12.112 --ent=chef --org=chef --user=tpetchel
Chef Delivery
Loading configuration from /home/thomaspetchel/Development
Writing configuration to /home/thomaspetchel/Development/.delivery/cli.toml
New configuration
-----------------
enterprise = "chef"
git_port = "8989"
organization = "chef"
pipeline = "master"
server = "10.194.12.112"
user = "tpetchel"
```

TODO: Cat cli.toml?

```bash
# ~/Development
$ delivery token
Chef Delivery
Loading configuration from /home/thomaspetchel/Development
Delivery password:
token: fM+YwM28r6rE92dulvszj4d76wjTeSxxnNSu+54O734=
saved API token to: /home/thomaspetchel/.delivery/api-tokens
```

```bash
# ~/Development
$ more ~/.delivery/api-tokens
10.194.12.112,chef,tpetchel|fM+YwM28r6rE92dulvszj4d76wjTeSxxnNSu+54O734=
```

Talk about how we're going to use Chef Delivery's internal Git server, and not GitHub, etc.
Say this before we have the user enter their SSH public key.

-------

Here you'll set up your workstation and install Chef Delivery on your network. Here's the process you'll follow:

Setting up a Chef Delviery installation involves:

1. getting either a full or a trial license key.
1. planning what systems and features you want to include in your installation.
1. installing Chef Delivery in your network.
1. setting up your workstation to communicate with your Chef Delivery installation and for writing and testing Chef code.

[TIP] If you already have Chef Delivery installed on your network, you can continue to the [next lesson](). For evaluation and learning purposes, you can also use your existing license key to set up a second installation.

## Before you begin

BOILERPLATE HERE

If you're unable to set up your workstation for local development, you can skip the verification steps XXX. [A long-term solution] can include using one of Test Kitchen's [cloud drivers]() to run your cookbooks [in the cloud] to XxX.

## 1. Get a Chef Delivery license key

To install Chef Delivery, you'll need a license key. If you don't have a full key, you can get a trial key from us that's good for XX days.

[PRODNOTE] Get text for how to get a full key. Figure out # of days and put the link here.

## 2. Plan your installation

### Understand the
Read the [Chef documentation]() to understand each pipeline stage.

### Plan your cluster environment

We use the term _delivery cluster_ to define the collection of machines that make up a Chef Delivery setup.

The documentation that you'll follow in the next explains how to create a complete delivery cluster that meets the needs of common production environments. If you prefer, you can create a more minimal installation that includes only what's needed to complete this tutorial. Later, you can create a more complete setup that includes everything you need.

This tutorial requires these seven systems:
  * One server to run Chef Delivery. [DEFINE WHAT IT HOLDS? - source control, users, organizations, etc., web UI, etc...]
  * One server to run Chef server. [DESCRIBE?]
  * One build node. The build node . Having multiple build nodes enables you to run these parts in parallel.
  * One server for each of the Acceptance, Union, Rehearsal, and Delivered stages in the pipeline. These are the servers that will host the Customers web application.

You can run Chef Delivery, Chef server, and your build node on any [supported platform]().

Your web application servers for the Acceptance, Union, Rehearsal, and Delivered stages must run Red Hat Enterprise Linux because the `awesome_customers` cookbook targets that platform. We recommend that you use Red Hat Enterprise Linux 6.5 or CentOS 6.5. Your web application servers for this tutorial do not need to be as powerful as what you might need in production. If you're using AWS, you can use t2.micro instances, which is a single 2.5GHz CPU, 1 GB of memory, and 8 GB of disk space. You'll also need to ensure that your web application servers have inbound network access on ports 22 (SSH), 80 (HTTP), and 443 (HTTPS).

This tutorial doesn't require you to set up Chef Analtyics or Chef Supermarket, and you can create just one build node (a complete setup might have up to 3 build nodes). But you can set up these systems in the following step if you [plan to use them.]

### Plan whether to use a provisioning node or your workstation to install Chef Delivery

The documentation also recommends that you set up a dedicated _provisioning node_ and perform the installation from that node. Having a provisioning node is great to have in practice because it gives you a [durable?] place in your production environment for you and your team to install and administer your delivery cluster.

However, for evaluation and learning purposes, you can provision your cluster from your workstation. It's common to [use a VM...]

### Plan how you'll bring up your cluster

The Chef documentation guides you through using the `delivery-cluster` cookbook to install Chef Delivery, either from your provisioning node or your workstation. The install process asks you how you want your cluster set up (for example, whether to use your existing Chef server or create a new one) and then takes the [appropriate actions].

Before you run the cookbook, you'll need to decide how you want to provision, or bring up, the machines you'll need. The `delivery-cluster` cookbook provides two options.

1. If you use Amazon Web Services (AWS), the `delivery-cluster` cookbook can automatically provision the servers on EC2 instances and install the software for you. For AWS users, this is the fastest way to get set up.
1. Otherwise, use what's called the _SSH provisioner_. This method requires you to bring up the necessary machines and provide SSH access and a passwordless `sudo` account on each. You provide the IP address and logon credentials for each server, and the `delivery-cluster` cookbook installs the software for you. This method can take more time to set up, but gives you complete control over how you provision your cluster.

## 3. Create a working directory

We use ~/Development. If you choose another, be sure to ...

## 3. Install Chef Delivery

Clarify what to set up:

* Provisioning vs local (workstation) setup
* We use `test` env name
* Don't install Supermarket
* Don't need to set up Analytics
* Need only only one build node, but more is fine.
* Create a user - internal is fine.
* Don't need to validate the installation. We'll do that here.
* When you add a user, you can give all permissions (Select user privileges.). In practice, you would grant only what you need [Learn more]().
* When you create an organization, you can enter a name that matches your org (e.g. `dev`), or `learn-chef`.

[BUTTON - INSTALL CHEF DELIVERY]

While Chef Delivery installs, you can follow the steps in the next section to set up your workstation for Chef development.

TODO: Summarize what you'll have after the install process finishes.

TODO: Confirm that the install doc has the user create a org and a user.

## 4. Run delivery setup

If you didn't follow the verification steps in the installation doc, run this command to .


```bash
# ~/Development/delivery-cluster
$ rake info:delivery_creds
Created enterprise: test
Admin username: admin
Admin password: ZT0lP2DJujgFrskXn6ZIHZvEq5fmtfGwbsk=
Builder Password: OiULFFI2lqF3xZKvVfiePEMZRYauUkq2o1U=
Web login: https://10.194.11.99/e/test/
```

```bash
# ~/Development/delivery-cluster
$ cd ~/Development
$ delivery setup --server=10.194.11.99 --ent=test --org=learn-chef --user=tpetchel
Chef Delivery
Loading configuration from /home/thomaspetchel/Development
Writing configuration to /home/thomaspetchel/Development/.delivery/cli.toml
New configuration
-----------------
api_protocol = "https"
enterprise = "test"
git_port = "8989"
organization = "learn-chef"
pipeline = "master"
server = "10.194.11.99"
user = "tpetchel"
```

## 4. Set up your workstation

[CHEFDK BOOTSTRAP BLURB]

* Summarize what the user set up in the install doc. Remove some stuff from below.

### Install the Chef Development Kit

The Chef Development Kit, or ChefDK, BBBBBB.

Although Chef Delivery runs on Linux and you're managing a Red Hat Enterprise Linux server, your workstation can be any OS you choose &ndash; be it Linux, Mac OS, or Windows.

[COMMENT] It's common to use a virtual machine as your workstation. Just make sure your VM meets the [system requirements](https://docs.chef.io/install_dk.html#review-prerequisites).

Install Chef DK on your workstation now if you haven't already.

<a class='accent-button radius' href='https://downloads.chef.io/chef-dk/' target='_blank'>Install Chef DK&nbsp;&nbsp;<i class='fa fa-external-link'></i></a>

[COMMENT] The [Chef documentation](https://docs.chef.io/install_dk.html) describes additional steps that can help you set up your workstation to use Chef more effectively. You don't have to perform all the steps now, but you can refer to it later if you run into problems. For example, if you're running multiple versions of Ruby, the documentation explains [how to use Chef's Ruby](https://docs.chef.io/install_dk.html#set-system-ruby).

### Install Vagrant

[BORROW FROM WINDOWS PROC]

### Install VirtualBox

[BORROW FROM WINDOWS PROC]

### Create a working directory

We'll use <code class="file-path">~/Development</code>, but you can choose a directory that best suits you. Just remember to change the paths that we show as necessary.

```bash
# ~
$ mkdir ~/Development
$ cd ~/Development
```

## 5. Collect some information about your delivery cluster

Your delivery cluster includes multiple systems, so it may be helpful to write down a few facts about your cluster that you can refer to later.

TODO:

* Delivery server IP address, web ui URL, user name, pwd.
* Chef server IP address, web ui URL, user name, pwd. (delivery:delivery)
* Admin user name and password.
* Builder user name and password.
* Delivery user name and password.
* Web application server (Acceptance, Union, Rehearsal, and Delivered stages) IP address, username, pwd.

To help gather this information, run the `rake info:delivery_creds` command from your <code class="file-path">delivery-cluster</code> directory.

```bash
# ~/Development/delivery-cluster
$ rake info:delivery_creds
Created enterprise: chef
Admin username: admin
Admin password: Q10IIEJolZ1iZLNOb1Ro7vnHjL/tYxYJkOc=
Builder Password: fdOPq9kBbqh4RRkKnRK2wdK3IjdXC9zGZGw=
Web login: https://10.194.12.112/e/chef/
```

-- --


[PRODNOTE] Will `apt-get install build-essential` do ^ that for me on Ubuntu?

## X. Install the Delivery command-line tools

```bash
$ curl https://packagecloud.io/install/repositories/chef/current/script.deb | sudo bash
```




## 5. Install Chef Delivery

The Chef documentation walks you through the install process.

- overview of what will happen (install Chef DK, git, etc.)
- ensure you have working directory
- provisioning node note
- you can use an existing installation or install fresh just for this tutorial. If you install just for this tutorial (1 build node, no Supermarket, no Analtyics, yes Chef server).

[PRODNOTE] Replace V with install docs on docs.chef.io...

[PRODNOTE] The docs recommend creating a provisioning node. How do we make it super smooth for evaluators? Should we call out that you don't need it, and can provision from your workstation?

```bash
# ~/Development
$ git clone https://github.com/chef-cookbooks/delivery-cluster
$ rake setup:generate_env
[...]
# I went the AWS route...
$ export CHEF_ENV=test
$ rake setup:cluster
[...]
$ rake info:list_core_services
2 items found

delivery-server-test:
  ipaddress: 10.194.8.162

build-node-test-1:
  ipaddress: 10.194.12.90

chef_server_url      'https://10.194.12.255/organizations/test'
$ rake info:delivery_creds
Created enterprise: test
Admin username: admin
Admin password: vsufq9EkyogkrB3X++uGCvx5Vl0pCTa7owU=
Builder Password: WoiHtKVKIISdQeEnoDMnrwgephOxZnOi9g8=
Web login: https://10.194.8.162/e/test/
```

[PRODNOTE] Tell the user how to uninstall, especially important for AWS provisioning.

## 6. Create organization & user

* Login to Delivery server

```bash
# ~/Development
$ rake info:delivery_creds
Created enterprise: test
Admin username: admin
Admin password: vsufq9EkyogkrB3X++uGCvx5Vl0pCTa7owU=
Builder Password: WoiHtKVKIISdQeEnoDMnrwgephOxZnOi9g8=
Web login: https://10.194.8.162/e/test/
```

* Create organization (e.g. learn-chef)
* Create new user (e.g. tpetchel)



## 7. Set up AWS ...

1. Get your private key
1. Generate public key `ssh-keygen -f ~/.ssh/tpetchel.pem -y > ~/.ssh/tpetchel.pub`
1. Download Starter Kit from Chef server
1. Create data bag
1. Encrypt data bag items
1. Upload to Chef server

## 8. Copy encryption key to build node

```bash
$ scp -i ~/.ssh/tpetchel.pem ~/etc/chef/encrypted_data_bag_secret ubuntu@10.194.12.91:/var/opt/delivery
```

TODO: ^ Needed to copy to /tmp then ssh on and `sudo mv` it... Need to find a better target location. Is /etc/chef/secrets/awesome_customers/database/encrypted_data_bag_secret overkill?
