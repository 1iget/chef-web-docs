---
title: 'Get set up'
order: 1
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 90 minutes
meta_tags: [{name: 'robots', content: 'noindex, nofollow'}]
---
First, you'll set up your workstation and install Chef Delivery on your network. Here's the process you'll follow:

1. get either a full or a trial license key.
1. plan what systems and features you want to include in your installation.
1. install Chef Delivery in your network.
1. set up your workstation for local development and to communicate with your Chef Delivery installation.

[TIP] If you already have Chef Delivery installed on your network, you can continue to the [next lesson](/build-a-delivery-pipeline/rhel/create-the-project). For evaluation and learning purposes, you can also use your existing license key to set up a second installation.

## Before you begin

In this tutorial, you'll add new features to an existing web application. Before you submit your features to the pipeline, you'll verify your work on a virtual machine that resembles your production environment.

Ensure that your workstation supports and is configured to use CPU virtualization. This setting is typically configured through your system's BIOS.

If you're using a virtual machine as your workstation through a program such as VMWare Fusion, ensure that nested virtualization is enabled on the virtual machine.

Also ensure that your workstation meets the [system requirements](https://www.virtualbox.org/wiki/End-user_documentation) requirements for running VirtualBox.

If you are unable to run virtual machines from your workstation, you can skip the steps that involve verifying the changes locally.

## 1. Get a Chef Delivery license key

To install Chef Delivery, you'll need a license key. If you don't have a full key, you can get a trial key from us that's good for XX days.

[PRODNOTE] Insert the modal here. Figure out # of days and replace XX above.

## 2. Plan your Delivery cluster

We use the term _Delivery cluster_ to define the collection of machines that make up a Chef Delivery setup.

The installation procedure you'll use explains how to create a Delivery cluster suitable for most production environments. However, this tutorial requires a less complex configuration, which you can use if you prefer.

For this tutorial, your Delivery cluster will consist of:

* a Chef Delivery server.
* a Chef server.
* a build node to run the Verify and Build stages.
* a server to run each of the Acceptance, Union, Rehearsal, and Delivered stages, which host the Customers web application.

This tutorial doesn't require you to set up Chef Analytics or Chef Supermarket, or to have three build nodes, as is described in the installation procedure. They are optional.

You can run Chef Delivery, Chef server, and your build node on any [supported platform]().

[PRODNOTE] Link to docs above.

Your web application servers for the Acceptance, Union, Rehearsal, and Delivered stages must run Red Hat Enterprise Linux or CentOS because the `awesome_customers` cookbook targets those platforms. We recommend that you use Red Hat Enterprise Linux 6.5 or CentOS 6.5.

Your web application servers for this tutorial do not need to be as powerful as what you might need in production. If you're using AWS, you can use t2.micro instances, which is a single 2.5GHz CPU, 1 GB of memory, and 8 GB of disk space. You'll also need to ensure that your web application servers have inbound network access on ports 22 (SSH), 80 (HTTP), and 443 (HTTPS).

### Plan whether to use a provisioning node or your workstation to install Chef Delivery

The installation procedure recommends that you set up a dedicated _provisioning node_ and install the Delivery cluster from there. In general, having a provisioning node gives you a persistent node in your production environment that you can always use to install and administer your Delivery cluster.

However, for evaluation and learning purposes, you can provision your cluster from your workstation. You can even provision your Delivery cluster from a virtual machine running on your workstation. Just ensure that your system meets the [prerequisites](https://docs.chef.io/install_dk.html#review-prerequisites) for running the Chef Development Kit.

### Plan how you'll bring up your cluster

The installation procedure shows you how to use the `delivery-cluster` cookbook to install Chef Delivery, either from your provisioning node or your workstation. You'll be asked how you want your cluster set up (for example, whether to use your existing Chef server or to create a new one) and the installer takes the appropriate actions.

Before you run the cookbook, you'll need to decide how you want to provision, or bring up, the machines you'll need. The `delivery-cluster` cookbook provides two options.

1. If you use Amazon Web Services (AWS), use the _AWS provisioner_. The `delivery-cluster` automatically provisions the servers on EC2 instances and installs the software for you. For AWS users, this is the fastest way to get set up.
1. Otherwise, use what's called the _SSH provisioner_. This method requires you to bring up the necessary machines and provide SSH access and a passwordless `sudo` account on each. You provide the IP address and logon credentials for each server, and the `delivery-cluster` cookbook installs the software for you. This method can take more time to set up, but gives you complete control over how you provision your cluster.

## 3. Create a working directory

We'll use <code class="file-path">~/Development</code>, but you can choose a directory that best suits you. Just remember to change the paths that we show as necessary.

```bash
# ~
$ mkdir ~/Development
$ cd ~/Development
```

## 4. Install Chef Delivery

Follow the instructions in the installation procedure. To clarify:

* Use the working directory you created in step 3.
* Either use a provisioning node or your workstation to install the Delivery cluster.
* Use test as the environment name.
* Remember that installing Chef Supermarket is optional.
* Remember that installing Chef Analytics is optional.
* Remember that, for this tutorial, you only need one build node.
* Creating an internal user is fine.
* When you add a user, you can give all permissions.
* When you create an organization, you can enter a name that matches your org (for example, dev), or learn-chef.
* You don't need to validate the installation. We'll do that here.

[BUTTON - INSTALL CHEF DELIVERY]

[PRODNOTE] Link to install doc above.

While Chef Delivery installs, you can follow the steps in the next section to set up your workstation for Chef development.

## 5. Set up your workstation

The installation procedure had you install the Chef Development Kit, or Chef DK. You'll also need to install Vagrant and VirtualBox to enable you to verify new features before you submit them to the pipeline.

[TIP] This section explains the manual steps to help you understand exactly what software you need to install and how to install it. Alternatively, you can also run the [ChefDK_Bootstrap](https://github.com/Nordstrom/chefdk_bootstrap) script to setup your Windows or Mac workstation for Chef development. The script installs [commonly used development tools](https://github.com/Nordstrom/chefdk_bootstrap#what-does-it-do) such as the Atom text editor, Git, VirtualBox, and Vagrant.

### Install VirtualBox

Install VirtualBox. VirtualBox manages your virtual machine instances.

#### Install VirtualBox on Windows using Chocolatey

If you use [Chocolatey](https://chocolatey.org) to manage software packages on Windows, run this command to install VirtualBox.

```ps
$ choco install virtualbox
Chocolatey v0.9.9.8
Installing the following packages:
virtualbox
By installing you accept licenses for the packages.

virtualbox v5.0.4.102546

[...]

Chocolatey installed 1/1 package(s). 0 package(s) failed.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).
```

#### Install VirtualBox using the installer

If you're on a Linux or Mac OS workstation or don't use Chocolatey, download and install VirtualBox from the VirtualBox web site.

<a class='accent-button radius' href='https://www.virtualbox.org/wiki/Downloads' target='_blank'>Install VirtualBox&nbsp;&nbsp;<i class='fa fa-external-link'></i></a>

<hr>

#### Windows only - Update your PATH environment variable

By default, VirtualBox is installed to <code class="file-path">C:\Program Files\Oracle\VirtualBox</code> on Windows. However, the installer does not add this path to your `PATH` environment variable. Run these commands to add VirtualBox to your system path.

```ps
$ $path = [Environment]::GetEnvironmentVariable("PATH")
$ $vbox_path = "C:\Program Files\Oracle\VirtualBox"
$ [Environment]::SetEnvironmentVariable("PATH", "$path;$vbox_path")
```

<hr>

#### Verify the installation

Now run the following command to verify that VirtualBox is installed.

```bash
# ~
$ VBoxManage --version
5.0.4r102546
```

### Install Vagrant

Next, install Vagrant. Test Kitchen uses Vagrant to communicate with VirtualBox and to configure aspects of the virtual machine such as available memory, host name, and network settings.

#### Install Vagrant on Windows using Chocolatey

If you use [Chocolatey](https://chocolatey.org) to manage software packages on Windows, run this command to install Vagrant.

```ps
$ choco install vagrant
Chocolatey v0.9.9.8
Installing the following packages:
vagrant
By installing you accept licenses for the packages.

vagrant v1.7.4

[...]

Chocolatey installed 1/1 package(s). 0 package(s) failed.
 See the log for details (C:\ProgramData\chocolatey\logs\chocolatey.log).
```

#### Install Vagrant using the installer

If you're on a Linux or Mac OS workstation or don't use Chocolatey, download and install Vagrant from the Vagrant web site.

<a class='accent-button radius' href='https://www.vagrantup.com/downloads.html' target='_blank'>Install Vagrant&nbsp;&nbsp;<i class='fa fa-external-link'></i></a>

<hr>

#### Windows only - Update your PATH environment variable

By default, Vagrant is installed to <code class="file-path">C:\HashiCorp\Vagrant\bin</code> on Windows. However, the installer does not add this path to your `PATH` environment variable. Run these commands to add Vagrant to your system path.

```ps
$ $path = [Environment]::GetEnvironmentVariable("PATH")
$ $vagrant_path = "C:\HashiCorp\Vagrant\bin"
$ [Environment]::SetEnvironmentVariable("PATH", "$path;$vagrant_path")
```

<hr>

### Verify the installation

Now run the following to verify that Vagrant is installed.

```bash
# ~
$ vagrant --version
Vagrant 1.7.4
```

## 6. Prepare your Acceptance, Union, Rehearsal, and Delivered stages

The Acceptance, Union, Rehearsal and Delivered stages are where you'll run the `awesome_customers` cookbook. In other words, these stages host the web application. In this scenario, the web application runs on Red Hat Enterprise Linux 6.5 or CentOS 6.5.

The `delivery-cluster` cookbook sets up your Chef Delivery server and Chef server &ndash; you'll set up the stages in your build cookbook. If you want to run your stages on AWS, you'll need to provide information about your AWS environment. If you prefer to bring up your stages manually, you'll do that now.

### If you're using AWS to bring up your stages

Gather this information about your AWS environment.

* Your AWS credentials and the private key you use to connect to EC2 instances.

  Your AWS credentials file is often named <code class="file-path">credentials</code> and looks like this.

  ```ruby
# credentials
[default]
aws_access_key_id=AKIAIOSFODNN7EXAMPLE
aws_secret_access_key=wJalrXUtnFEMIqK7MDENGabPxRfiCYEXAMPLEKEY
```

  Your private key is typically in .pem format.

* A region that your credentials file is configured to use, for example, us-west-2.
* An AMI ID in your region for Red Hat Enterprise Linux 6.5 or CentOS 6.5, for example, ami-09f7d239.
* The public or private subnet ID that you use to address EC2 instances. Your subnet must be reachable from your Delivery cluster and your workstation. An example subnet ID is subnet-19ac017c. Also note whether you access EC2 instances by their private or public IP addresses.
* A security group ID (or multiple IDs) that permit inbound network access on ports 22 (SSH), 80 (HTTP), and 443 (HTTPS). An example security group ID is sg-cbacf8ae.

You can create a test Red Hat Enterprise Linux 6.5 or CentOS 6.5 instance to verify that your settings work together.

### If you're bringing up your stages manually

Bring up four Red Hat Enterprise Linux 6.5 or CentOS 6.5 servers, one each for the Acceptance, Union, Rehearsal, and Delivered stages. Ensure that:

* each server is accessible from both your Delivery cluster and your network.
* ports 22 (SSH), 80 (HTTP), and 443 (HTTPS) are open to the firewall.
* you have root or `sudo` access to the machine.
* each server is configured to use key-based authentication to connect over SSH. [Learn how to set up SSH keys](https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys--2).
