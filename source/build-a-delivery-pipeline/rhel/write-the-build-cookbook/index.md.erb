---
title: 'Write the build cookbook'
order: 4
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
meta_tags: [{name: 'robots', content: 'noindex, nofollow'}]
---

* You cloned the Customers web application project from GitHub.
* You ran `delivery init` to create a Chef Delivery project and create a basic pipeline.
* You approved and delivered the change.
* You integrated the change to your local repo.


* Show the Delivery pipeline again here.

* Talk about the phases, and how each step below each phase cooresponds to a recipe in the build cookbook.


The project contains all the code for this tutorial. Start by checking out the `initial` branch to XXX.

```bash
# ~/Development/delivery-cluster/build-a-delivery-pipeline-rhel
$ git checkout -b initial origin/initial
Branch initial set up to track remote branch initial from origin.
Switched to a new branch 'initial'
$ git branch
* initial
  master
```

[PRODNOTE] Talk about Test Kitchen testing, pt to delivery_build cookbook.


[PRODNOTE] Show the Delivery pipeline again here...

Talk about the phases, and how each step below each phase cooresponds to a recipe in the build cookbook.

Point to doc page that lists and describes each recipe.

What we're going to do:

* Reference delivery-truck cookbook (explain what it does.)
* Iteratively build out the pipeline.

Familiarize yourself with each stage and phase [link](). In summary:
* default is called by each.
* some phases are called by multiple stages. use node attributes or conditional variables to define specific behaviors.

## 1. Reference the delivery-truck cookbook

[GITHUB] THE CODE FOR THIS PART IS IN GITHUB [add-delivery-truck]().

```bash
$ git branch
  add-delivery-config
  initial
* master
```

Create a new branch.

```bash
# PATH
$ git checkout -b add-delivery-truck
Switched to a new branch 'add-delivery-truck'
```

Verify new branch.

```bash
# PATH
$ git branch
  add-delivery-config
* add-delivery-truck
  master
```

In [Blah]() tutorial, you learned how to use Berkshelf resolve cookbook dependencies.

Modify <code class="file-path">~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/Berksfile</code> like this.

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/Berksfile
source 'https://supermarket.chef.io'

metadata

group :delivery do
  cookbook 'delivery_build', git: 'https://github.com/chef-cookbooks/delivery_build'
  cookbook 'delivery-base', git: 'https://github.com/chef-cookbooks/delivery-base'
  cookbook 'test', path: './test/fixtures/cookbooks/test'
end

cookbook 'delivery-sugar', git: 'https://github.com/chef-cookbooks/delivery-sugar'
cookbook 'delivery-truck', git: 'https://github.com/chef-cookbooks/delivery-truck'
```

Now modify metadata.rb like this.

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/metadata.rb
name 'build-cookbook'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
version '0.1.0'

depends 'delivery-truck'
```

Include each of `delivery-truck` cookbook's recipe in ours.

For example, default.rb:

```ruby
# default.rb
include_recipe 'delivery-truck::default'
```

The remaining recipes look like this.

```ruby
# deploy.rb
include_recipe 'delivery-truck::deploy'
```

```ruby
# functional.rb
include_recipe 'delivery-truck::functional'
```

```ruby
# lint.rb
include_recipe 'delivery-truck::lint'
```

```ruby
# provision.rb
include_recipe 'delivery-truck::provision'
```

```ruby
# publish.rb
include_recipe 'delivery-truck::publish'
```

```ruby
# quality.rb
include_recipe 'delivery-truck::quality'
```

```ruby
# security.rb
include_recipe 'delivery-truck::security'
```

```ruby
# smoke.rb
include_recipe 'delivery-truck::smoke'
```

```ruby
# syntax.rb
include_recipe 'delivery-truck::syntax'
```

```ruby
# unit.rb
include_recipe 'delivery-truck::unit'
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ git status
On branch add-delivery-truck
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   .delivery/build-cookbook/Berksfile
	modified:   .delivery/build-cookbook/metadata.rb
	modified:   .delivery/build-cookbook/recipes/default.rb
	modified:   .delivery/build-cookbook/recipes/deploy.rb
	modified:   .delivery/build-cookbook/recipes/functional.rb
	modified:   .delivery/build-cookbook/recipes/lint.rb
	modified:   .delivery/build-cookbook/recipes/provision.rb
	modified:   .delivery/build-cookbook/recipes/publish.rb
	modified:   .delivery/build-cookbook/recipes/quality.rb
	modified:   .delivery/build-cookbook/recipes/security.rb
	modified:   .delivery/build-cookbook/recipes/smoke.rb
	modified:   .delivery/build-cookbook/recipes/syntax.rb
	modified:   .delivery/build-cookbook/recipes/unit.rb

no changes added to commit (use "git add" and/or "git commit -a")
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ git add .
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ git commit -m "pull in delivery-truck cookbook"
[add-delivery-truck 58e3f50] pull in delivery-truck cookbook
 13 files changed, 16 insertions(+)
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ delivery review
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel
Review for change add-delivery-truck targeted for pipeline master
Created new patchset
https://10.194.11.99/e/test/#/organizations/learn-chef/projects/build-a-delivery-pipeline-rhel/changes/a09401ca-4e39-48e4-96d7-23ed1631f9e0
```

[PRODNOTE] Add callout about pull request vs. `delivery review` when using Chef Delivery's Git server.

* Review the changes in the web interface. Click **Approve** when all tests pass.
* You'll notice that unit, lint, and syntax phases still don't do any work &ndash; we've simply included the `delivery-truck` cookbook as part of the build process.
* The process moves to the Build stage.
* The process moves to teh Acceptance stage.
* After Acceptance succeeds, press *Deliver*.
* Watch all phases pass. Again, no real work is done by the provision, deploy, smoke, and functional phases.

[PRODNOTE] For each section, revisit the pipeline and highlight what we're working on.

## 2. Provision your acceptance, union, rehearsal, and delivered environments

* Brief overview / point to [docs](link).
* We're going to use [Chef provisioning](link).

[PRODNOTE] We're going to use EC2; also figure out SSH route (key-based auth) and use tabs to delinate things.

* The provisioning node or workstation where you created your cluster from already contains an encryption key, located at delivery-cluster/encrypted_data_bag_secret.
* Create data bag to hold the data.
* Choose EC2 or SSH.
  * We're going to use key-based auth for both.
* Added encrypted data bag item to hold the private key (.pem file).
* Also encrypt the secret file used to decrypt the database passsword used by the Customers web application.
* If using EC2:
  * Add encrypted data bag item to hold the AWS credentials.
  * Add plain-text data bag item to hold identifiers used to create and manage EC2  instances (AMI ID, security group ID, etc.).

### Create a data bag to hold provisioning data

```bash
$ cd ~/Development/delivery-cluster
```

```bash
# ~/Development/delivery-cluster
$ knife data bag create provisioning-data
Created data_bag[provisioning-data]
```

### Encrypt and upload private key

Create ~/Development/delivery-cluster/.chef/delivery-cluster-data/ssh_key.json and add this:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/ssh_key.json
{
  "id": "ssh_key",
  "name": "YOUR_NAME"
  "private_key": "YOUR_PRIVATE_KEY"
}
```

You'll need to replace each line break with `\n` in your file. So ...


```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/ssh_key.json
{
  "id": "ssh_key",
  "name": "learn-chef"
  "private_key": "-----BEGIN RSA PRIVATE KEY-----\ngz5jKCX3TO...j8ErLWsr==\n-----END RSA PRIVATE KEY-----"
}
```

Upload item.

```bash
# ~/Development/delivery-cluster
$ knife data bag from file provisioning-data ./.chef/delivery-cluster-data/ssh_key.json --secret-file .chef/delivery-cluster-data/encrypted_data_bag_secret
Updated data_bag_item[provisioning-data::ssh_key]
```

Verify you can decrypt it back.

```bash
# ~/Development/delivery-cluster
$ knife data bag show provisioning-data ssh_key --secret-file .chef/delivery-cluster-data/encrypted_data_bag_secret
Encrypted data bag detected, decrypting with provided secret.
id:          ssh_key
name:        learn-chef
private_key: -----BEGIN RSA PRIVATE KEY-----
gz5jKCX3TO...
...j8ErLWsr==
-----END RSA PRIVATE KEY-----
```

### EC2 only - Encrypt and upload your AWS credentials

Create ~/Development/delivery-cluster/.chef/delivery-cluster-data/aws_creds.json and add this:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/aws_creds.json
{
  "id": "aws_creds",
  "region": "REGION",
  "access_key_id": "YOUR_ACCESS_KEY_ID",
  "secret_access_key": "YOUR_SECRET_ACCESS_KEY"
}
```

For example:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/aws_creds.json
{
  "id": "aws_creds",
  "region": "us-west-2",
  "access_key_id": "AKIAIOSFODNN7EXAMPLE",
  "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
}
```

Upload item.

```bash
# ~/Development/delivery-cluster
$ knife data bag from file provisioning-data ./.chef/delivery-cluster-data/aws_creds.json --secret-file .chef/delivery-cluster-data/encrypted_data_bag_secret
Updated data_bag_item[provisioning-data::aws_creds]
```

/var/opt/delivery/workspace/10.194.11.99/test/learn-chef/build-a-delivery-pipeline-rhel/master/acceptance/provision/chef/keys, /var/opt/delivery/workspace/10.194.11.99/test/learn-chef/build-a-delivery-pipeline-rhel/master/acceptance/provision/cache/.ssh

Verify you can decrypt it back.

```bash
# ~/Development/delivery-cluster
$ knife data bag show provisioning-data aws_creds --secret-file .chef/delivery-cluster-data/encrypted_data_bag_secret
Encrypted data bag detected, decrypting with provided secret.
access_key_id:     AKIAIOSFODNN7EXAMPLE
secret_access_key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
id:                aws_creds
region:            us-west-2
```

### EC2 only - Upload data used to create and manage EC2 instances

Don't need to encrypt the data because nothing's secret.

Create ~/Development/delivery-cluster/.chef/delivery-cluster-data/ec2_config.json and add this:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/ec2_config.json
{
  "id": "ec2_config",
  "build-a-delivery-pipeline-rhel": {
    "acceptance": {
      "instance_type": "INSTANCE_TYPE",
      "security_group_ids": [SECURITY_GROUP_IDS],
      "subnet_id": "SUBNET_ID",
      "image_id": "IMAGE_ID",
      "ssh_username": "root",
      "tags": [{ "X-Project": "YOUR_PROJECT_NAME" }],
      "use_private_ip_for_ssh": TRUE_OR_FALSE,
    },
    "union": {
      "instance_type": "INSTANCE_TYPE",
      "security_group_ids": [SECURITY_GROUP_IDS],
      "subnet_id": "SUBNET_ID",
      "image_id": "IMAGE_ID",
      "ssh_username": "root",
      "tags": [{ "X-Project": "YOUR_PROJECT_NAME" }],
      "use_private_ip_for_ssh": TRUE_OR_FALSE,
    },
    "rehearsal": {
      "instance_type": "INSTANCE_TYPE",
      "security_group_ids": [SECURITY_GROUP_IDS],
      "subnet_id": "SUBNET_ID",
      "image_id": "IMAGE_ID",
      "ssh_username": "root",
      "tags": [{ "X-Project": "YOUR_PROJECT_NAME" }],
      "use_private_ip_for_ssh": TRUE_OR_FALSE,
    },
    "delivered": {
      "instance_type": "INSTANCE_TYPE",
      "security_group_ids": [SECURITY_GROUP_IDS],
      "subnet_id": "SUBNET_ID",
      "image_id": "IMAGE_ID",
      "ssh_username": "root",
      "tags": [{ "X-Project": "YOUR_PROJECT_NAME" }],
      "use_private_ip_for_ssh": TRUE_OR_FALSE,
    }
  }
}
```

For example:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/ec2_config.json
{
  "id": "ec2_config",
  "build-a-delivery-pipeline-rhel": {
    "acceptance": {
      "instance_type": "t2.micro",
      "security_group_ids": ["sg-cbacf8ae"],
      "subnet_id": "subnet-19ac017c",
      "image_id": "ami-09f7d239",
      "ssh_username": "root",
      "tags": [{ "X-Project": "Learn Chef" }],
      "use_private_ip_for_ssh": false
    },
    "union": {
      "instance_type": "t2.micro",
      "security_group_ids": ["sg-cbacf8ae"],
      "subnet_id": "subnet-19ac017c",
      "image_id": "ami-09f7d239",
      "ssh_username": "root",
      "tags": [{ "X-Project": "Learn Chef" }],
      "use_private_ip_for_ssh": false
    },
    "rehearsal": {
      "instance_type": "t2.micro",
      "security_group_ids": ["sg-cbacf8ae"],
      "subnet_id": "subnet-19ac017c",
      "image_id": "ami-09f7d239",
      "ssh_username": "root",
      "tags": [{ "X-Project": "Learn Chef" }],
      "use_private_ip_for_ssh": false
    },
    "delivered": {
      "instance_type": "t2.micro",
      "security_group_ids": ["sg-cbacf8ae"],
      "subnet_id": "subnet-19ac017c",
      "image_id": "ami-09f7d239",
      "ssh_username": "root",
      "tags": [{ "X-Project": "Learn Chef" }],
      "use_private_ip_for_ssh": false
    }
  }
}
```

* `build-a-delivery-pipeline-rhel` => config for the Customers web application on Red Hat Enterprise Linux family (including CentOS).

We provide data for each environment because [it can vary]. For instance, you might want to run your acceptance environment on a t2.micro instance with all ports open through the fireweall, but your delivered environment might use a larger instance and a more restricted set of ports.

[COMMENT] The `tags` part isn't required, but tagging your instances is a good way to help identify which project a given instance belongs to.

Upload item.

```bash
# ~/Development/delivery-cluster
$ knife data bag from file provisioning-data ./.chef/delivery-cluster-data/ec2_config.json
Updated data_bag_item[provisioning-data::ec2_config]
```

Verify you can read it back.

```bash
# ~/Development/delivery-cluster
$ knife data bag show provisioning-data ec2_config
Unencrypted data bag detected, ignoring any provided secret options.
build-a-delivery-pipeline-rhel:
  acceptance:
    image_id:               ami-09f7d239
    instance_type:          t2.micro
    security_group_ids:     sg-cbacf8ae
    ssh_username:           root
    subnet_id:              subnet-19ac017c
    tags:
      X-Project: Learn Chef
    use_private_ip_for_ssh: false
  delivered:
    image_id:               ami-09f7d239
    instance_type:          t2.micro
    security_group_ids:     sg-cbacf8ae
    ssh_username:           root
    subnet_id:              subnet-19ac017c
    tags:
      X-Project: Learn Chef
    use_private_ip_for_ssh: false
  rehearsal:
    image_id:               ami-09f7d239
    instance_type:          t2.micro
    security_group_ids:     sg-cbacf8ae
    ssh_username:           root
    subnet_id:              subnet-19ac017c
    tags:
      X-Project: Learn Chef
    use_private_ip_for_ssh: false
  union:
    image_id:               ami-09f7d239
    instance_type:          t2.micro
    security_group_ids:     sg-cbacf8ae
    ssh_username:           root
    subnet_id:              subnet-19ac017c
    tags:
      X-Project: Learn Chef
    use_private_ip_for_ssh: false
id:        ec2_config
```

[COMMENT] The way we set things up assumes all environments run int eh same region. If you require a different region for each environment, you would [do the same thing you did for the ec_config data].

### Encrypt and upload the decryption key for the Customers web application

* Point to previous tutorial where the user set up the decryption key.

Create ~/Development/delivery-cluster/.chef/delivery-cluster-data/customers_key.json and add this:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/customers_key.json
{
  "id": "customers_key",
  "content": "YOUR_DECRYPTION_KEY"
}
```

For example:

```ruby
# ~/Development/delivery-cluster/.chef/delivery-cluster-data/customers_key.json
{
  "id": "customers_key",
  "content": "u8eF924qkscvx+edZfynrpMi3JS0fLE1qHoJaN9Yzba0O79H5WQGUjRWaXTqUEaj/TqeEYL4F1j8R4jiwI5hJPmo91hukcWhpgxCrvvw0ajku1e3InKMWWDcOAv8frkHgTwoqLXjkbVJyYJ4A1o9Hc/jHTlweicK39pETi76emkaxVXQCRcq9pi+OxNVYMeRucGqZZrp8kgRChPLYrmzTOpkJ5uaFXq/OVRZSQUA7lAUAcBVwXSvnY5PiisZjsEwF/cOTlLfLjcRGz4820RpM0TyxgqG5o4JsJ/tfKbn8bz2DExaW5rIUhx/EAdaK8xOiihTsP8n67XV7fwAT1wHmeTg4n/aAr57OW3hZk2eAXP2l9hRKy3b8W42jJnUZ92rOKBTIfAz2B7lxBzDphdntrQYtuLO7PmaKjDwZX7U7OoEUNvKjnnp0nTZcyECc3dlF0JSj1w6yobK1uzlyQRoRUcD8TtAOWBazmol3pY9fhLu5ZVhOYoOuKmyDDCYgk8SLSL/rSSHbPKtHo77amqR68IDT9gCK3ZCM7XF97IJBefoK5UYDFwKIYKaX9GYhUoJf0EXZLvHn/GxzEDK8fanFeaIYFU68WBpmONng8IGndYhgBhu6yA3hyrlvQRkZHpf+1pDxjOh1neDv0+A12FusGbehZOKhCfn1I0Q5rQLO7V="
}
```

Upload item.

```bash
# ~/Development/delivery-cluster
$ knife data bag from file provisioning-data ./.chef/delivery-cluster-data/customers_key.json --secret-file .chef/delivery-cluster-data/encrypted_data_bag_secret
Updated data_bag_item[provisioning-data::customers_key]
```

Verify you can decrypt it back.

```bash
# ~/Development/delivery-cluster
$ knife data bag show provisioning-data customers_key --secret-file .chef/delivery-cluster-data/encrypted_data_bag_secret
Encrypted data bag detected, decrypting with provided secret.
content: u8eF924qkscvx+edZfynrpMi3JS0fLE1qHoJaN9Yzba0O79H5WQGUjRWaXTqUEaj/TqeEYL4F1j8R4jiwI5hJPmo91hukcWhpgxCrvvw0ajku1e3InKMWWDcOAv8frkHgTwoqLXjkbVJyYJ4A1o9Hc/jHTlweicK39pETi76emkaxVXQCRcq9pi+OxNVYMeRucGqZZrp8kgRChPLYrmzTOpkJ5uaFXq/OVRZSQUA7lAUAcBVwXSvnY5PiisZjsEwF/cOTlLfLjcRGz4820RpM0TyxgqG5o4JsJ/tfKbn8bz2DExaW5rIUhx/EAdaK8xOiihTsP8n67XV7fwAT1wHmeTg4n/aAr57OW3hZk2eAXP2l9hRKy3b8W42jJnUZ92rOKBTIfAz2B7lxBzDphdntrQYtuLO7PmaKjDwZX7U7OoEUNvKjnnp0nTZcyECc3dlF0JSj1w6yobK1uzlyQRoRUcD8TtAOWBazmol3pY9fhLu5ZVhOYoOuKmyDDCYgk8SLSL/rSSHbPKtHo77amqR68IDT9gCK3ZCM7XF97IJBefoK5UYDFwKIYKaX9GYhUoJf0EXZLvHn/GxzEDK8fanFeaIYFU68WBpmONng8IGndYhgBhu6yA3hyrlvQRkZHpf+1pDxjOh1neDv0+A12FusGbehZOKhCfn1I0Q5rQLO7V=
id:      customers_key
```

##

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate attribute build-cookbook default
Compiling Cookbooks...
Recipe: code_generator::attribute
  * directory[./build-cookbook/attributes] action create
    - create new directory ./build-cookbook/attributes
  * template[./build-cookbook/attributes/default.rb] action create
    - create new file ./build-cookbook/attributes/default.rb
    - update content in file ./build-cookbook/attributes/default.rb from none to e3b0c4
    (diff output suppressed by config)
```

Add this to default.rb

```ruby
default['build-cookbook']['customers']['driver'] = 'ec2'
```

## 2. Perform unit, lint, and syntax testing

[PRODNOTE] Say how we skip quality and security checks. Add them to config.json

```ruby
# PATH
{
  "version": "2",
  "build_cookbook": {
    "path": ".delivery/build-cookbook",
    "name": "build-cookbook"
  },
  "skip_phases": ["quality", "security"],
  "build_nodes": {},
  "dependencies": []
}
```

In the [Blah]() tutorial, you used ChefSpec to perform unit testing, RuboCop and Foodcritic to perform lint testing. REmember that these kinds of testing are referred to as _static code analytis_ because they analtyze, but don't actually run, your code.

[PRODNOTE] Confirm we need the fetch first...

```bash
$ git fetch
[SHOW OUTPUT]
```

```bash
$ git checkout -b add-static-analysis-checks delivery/master
Branch add-static-analysis-checks set up to track remote branch master from delivery.
Switched to a new branch 'add-static-analysis-checks'
```

The `delivery-truck` cookbook already does what we need. All we need to do is include them from our recipes.

[SHOW BASE UNIT, LINT, SYNTAX]

The `syntax` recipe does something new - [EXPLAIN]

Modify <code class="file-path">unit.rb</code> like this.

```ruby
# PATH
include_recipe 'delivery-truck::unit'
```

Modify <code class="file-path">lint.rb</code> like this.

```ruby
# PATH
include_recipe 'delivery-truck::lint'
```

And modfiy <code class="file-path">syntax.rb</code> like this.

```ruby
# PATH
include_recipe 'delivery-truck::syntax'
```

[PRODNOTE] this is where to say that each phase calls the `default` recipe. So include the base from ours.

```ruby
# PATH
include_recipe 'delivery-truck::default'
```

```bash
# PATH
$ git status
On branch add-static-analysis-checks
Your branch is up-to-date with 'delivery/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

  modified:   .delivery/build-cookbook/recipes/default.rb
	modified:   .delivery/build-cookbook/recipes/lint.rb
	modified:   .delivery/build-cookbook/recipes/syntax.rb
	modified:   .delivery/build-cookbook/recipes/unit.rb

no changes added to commit (use "git add" and/or "git commit -a")
```

```bash
# PATH
$ git add .
```

```bash
# PATH
$ git commit -m "add unit, lint, and syntax checks"
[add-static-analysis-checks e670576] add unit, lint, and syntax checks
 3 files changed, 3 insertions(+)
```

```bash
# PATH
$ delivery review
```

* Watch them run.
* Click **Approve**.
* Watch **Build** run.
* We won't deliver the change just yet.

Notice that no resources were run.

```bash
#
Starting Chef Client, version 12.5.1
resolving cookbooks for run list: ["build-cookbook::unit"]
Synchronizing Cookbooks:
  - delivery-truck (1.100.7)
  - build-cookbook (0.1.0)
  - delivery-sugar (0.3.1)
Compiling Cookbooks...
Converging 0 resources

Running handlers:
Running handlers complete
Chef Client finished, 0/0 resources updated in 01 seconds

Job ended at 2015-10-20T02:42:03+00:00 (ran in 24 seconds)
```

That's because the `unit` cookbook looks for changes. Nothing's changed in the cookbook since it was originally added in the prior lesson, so the tests weren't run. We'll see the tests run when we later update the cookbook.

[PRODNOTE] Kinda weak I must admit ^.

## 3. Publish your changes to the Chef server

* `publish` recipe uploads to Chef server if the `upload_cookbook_to_chef_server?` method returns true.

https://github.com/chef-cookbooks/delivery-truck/blob/master/recipes/publish.rb#L69

`upload_cookbook_to_chef_server?` returns true when the `node['delivery']['config']['delivery-truck']['publish']['chef_server']` node attribute is true.

https://github.com/chef-cookbooks/delivery-truck/blob/94fe1bbf765fb40ae75794de9c9d747a19f927aa/libraries/helpers_publish.rb#L29

```bash
$ git fetch
$ git checkout master
$ git pull delivery master
$ git checkout -b publish-to-chef-server
```

[PRODNOTE] Change other example to match ^.

```bash
# ~/Development/build-a-delivery-pipeline-rhel
$ chef generate attribute .delivery/build-cookbook default
[2015-10-19T20:44:06-07:00] WARN: ExpandNodeObject#load_node is deprecated. Please use Chef::PolicyBuilder::Dynamic instead of using ExpandNodeObject directly at /opt/chefdk/embedded/lib/ruby/gems/2.1.0/gems/chef-dk-0.9.0/lib/chef-dk/chef_runner.rb:54:in `policy'
Compiling Cookbooks...
Recipe: code_generator::attribute
  * directory[.delivery/build-cookbook/attributes] action create
    - create new directory .delivery/build-cookbook/attributes
  * template[.delivery/build-cookbook/attributes/default.rb] action create
    - create new file .delivery/build-cookbook/attributes/default.rb
    - update content in file .delivery/build-cookbook/attributes/default.rb from none to e3b0c4
    (diff output suppressed by config)
```

```ruby
# .../default.rb
node['delivery']['config']['delivery-truck']['publish']['chef_server'] = true;
```



### publish.rb (Build)

* Push to Chef server
* Upload data bags

** Publish to Chef server

* Write out publish recipe

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/recipes/publish.rb
include_recipe 'delivery-truck::publish'

chef_repo = "#{node['delivery_builder']['repo']}/chef-repo"

execute 'create passwords data bag' do
  cwd chef_repo
  command "knife data bag create passwords --config #{delivery_knife_rb}"
  not_if "knife data bag list --config #{delivery_knife_rb} | grep '^passwords$'"
end
%w(db_admin_password sql_server_root_password).each do |data_bag_item|
  execute "create #{data_bag_item} data bag item" do
    cwd chef_repo
    command "knife data bag from file passwords #{data_bag_item}.json --config #{delivery_knife_rb}"
  end
end
```

```bash
$ git status
$ git add .
$ git commit -m "add publish recipe"
$ delivery review
```

Watch Verify pass.
Click Approve.
Watch Build pass.
Won't deliver yet.

Confirm data bag and cookbook are uploaded.

```bash
# ~/Development/delivery-cluster
$ rake info:list_core_services
2 items found

delivery-server-chef:
  ipaddress: 10.194.12.112

build-node-chef-1:
  ipaddress: 10.194.12.91

chef_server_url      'https://10.194.9.114/organizations/chef'
```

Login as `delivery:delivery`

- Login to Chef server

-- see data bag

SHOW SCREENSHOT

## 4.

### provision.rb (Acceptance, Union, Rehearsal, Delivered)

TODO: Talk about how you might use a provisioning node for this...

#### Create a Chef repo

```bash
# ~/Development
$ chef generate repo chef-repo
[...]
```

#### Download the Starter Kit

TODO: SPELL THIS OUT

Unzip, say Y to overwrite any files.

TODO: Show tabs...

TODO: Is there a flag for `unzip` so it doesn't prompt?

```bash
# ~/Development
$ unzip ~/Downloads/chef-starter.zip
Archive:  /home/thomaspetchel/Downloads/chef-starter.zip
  inflating: chef-repo/cookbooks/chefignore
   creating: chef-repo/cookbooks/starter/
   creating: chef-repo/cookbooks/starter/recipes/
  inflating: chef-repo/cookbooks/starter/recipes/default.rb
   creating: chef-repo/cookbooks/starter/attributes/
  inflating: chef-repo/cookbooks/starter/attributes/default.rb
   creating: chef-repo/cookbooks/starter/files/
   creating: chef-repo/cookbooks/starter/files/default/
  inflating: chef-repo/cookbooks/starter/files/default/sample.txt
   creating: chef-repo/cookbooks/starter/templates/
   creating: chef-repo/cookbooks/starter/templates/default/
  inflating: chef-repo/cookbooks/starter/templates/default/sample.erb
  inflating: chef-repo/cookbooks/starter/metadata.rb
replace chef-repo/README.md? [y]es, [n]o, [A]ll, [N]one, [r]ename: A
  inflating: chef-repo/README.md
  inflating: chef-repo/.gitignore
   creating: chef-repo/.chef/
  inflating: chef-repo/.chef/knife.rb
  inflating: chef-repo/roles/starter.rb
  inflating: chef-repo/.chef/delivery.pem
  inflating: chef-repo/.chef/test-validator.pem
```

### Move to chef-repo

```bash
# ~/Development
$ cd chef-repo
```

#### Get a node to bootstrap

In [Learn to manage a node](/manage-a-node/rhel/), you bootstrapped a node that we provided. Now it's time to bootstrap a Red Hat Enterprise Linux 6.5 or CentOS 6.5 node that you own to give you experience working with your own infrastructure.

Chef provides ways to provision a node and bootstrap it all in one step &ndash; we'll cover this in a later tutorial. For learning purposes, it's best to start by bringing up your own node manually and bootstrapping it separately.

Remember, your node can be any physical machine, virtual machine, or cloud instance, as long as:

* its IP address is accessible from your network. <= INCLUDING DELIVERY, CHEF SERVER, Etc.
* it has inbound network access on ports 22 (SSH) and 80 (HTTP) and outbound network access on port 443 (HTTPS).
* it meets the [system requirements](https://docs.chef.io/chef_system_requirements.html#chef-client) for running `chef-client`.
* you have root or `sudo` access.

#### Bootstrap your node

BETTER YET, AUTOMATE THIS. MOVE COMMANDS INTO PROVISION RECIPE. SCP DATA BAG SECRET KEY TO BUILD NODE. TALK ABOUT PROVISINING AND PROVISIONING NODE (FOR WHEN YOU NEED ...)
SHOW BOTH -i AND PASSWORD FLAVORS.

ADD TO DEFAULT ATTRS FILE

```ruby
default['build-cookbook']['acceptance-env'] = { node_name: 'acceptance_customers', ip_address: '10.194.15.116' }
default['build-cookbook']['union-env'] = { node_name: 'union_customers', ip_address: '10.194.15.119' }
default['build-cookbook']['rehearsal-env'] = { node_name: 'rehearsal_customers', ip_address: '10.194.15.117' }
default['build-cookbook']['delivered-env'] = { node_name: 'delivered_customers', ip_address: '10.194.15.120' }

default['build-cookbook']['user-name'] = 'ubuntu'
default['build-cookbook']['identity-file'] = 'tpetchel.pem'
```

[PRODNOTE] Is user name built-in for me already?

Now that you have a node running, it's time to bootstrap it.

In [Learn to manage a node](/manage-a-node/rhel/), we provided you with a virtual machine that uses a user name and password to authenticate. For learning purposes, this is just fine.

In production, we recommend that you use key-based authentication instead of a user name and password because it can be more secure. This option is commonly used with Amazon EC2 instances because EC2 typically works using key-based authentication.

Choose the option below that matches how you can authenticate and bootstrap your node.

##### Option 1: Use a user name and password

This is what we did in [Learn to manage a node](/manage-a-node/rhel/). From your workstation, run this command to bootstrap your node. Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">PASSWORD</code> with your password.

```bash
# ~/chef-repo
$ knife bootstrap ADDRESS --ssh-user USER --ssh-password 'PASSWORD' --sudo --use-sudo-password --node-name acceptance_customers --run-list 'recipe[awesome_customers]'
```

REPEAT FOR UNION REHEARSAL DELIVERED.

You'll see lots of output as your node installs `chef-client` and runs the `awesome_customers` cookbook.

##### Option 2: Use key-based authentication

From your workstation, run this command to bootstrap your node. Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/chef-repo
$ knife bootstrap ADDRESS --ssh-user USER --sudo --identity-file IDENTITY_FILE --node-name acceptance_customers --run-list 'recipe[awesome_customers]'
```

REPEAT FOR UNION REHEARSAL DELIVERED.

You'll see lots of output as your node installs `chef-client` and runs the `awesome_customers` cookbook.

<a class="help-button radius" href="#" data-reveal-id="knife-help-modal">Need help troubleshooting?</a>

<div id="knife-help-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <h3 id="modalTitle">If the operation times out or fails, here are some things to try</h3>
  <ul>
    <li>Ensure that your environment is active before you run <code>knife</code>. For example, CloudShare instances suspend after a period of inactivity. <img class="border" src="/assets/images/rhel/cloudshare-suspend.png"></img></li>
    <li>Ensure that you run <code>knife</code> commands from your <code class="file-path">chef-repo</code> directory or one of its sub-directories.</li>
    <li>Ensure you have a <code class="file-path">chef-repo/.chef</code> directory and that it contains a <code class="file-path">knife.rb</code> file and two <code class="file-path">.pem</code> files. If you don't, <a href="/manage-a-node/rhel/set-up-your-chef-server#step2" target="_blank">install the Starter Kit</a>.</li>
    <li>Ensure that your node's IP address is accessible from your network.</li>
    <li>Ensure the user name you provide has root or <code>sudo</code> access on the node.</li>
    <li>Ensure your workstation has outbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
        <li>80 (HTTP)</li>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
    <li>Ensure your node has inbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
      </ul>
    </li>
    <li>Ensure your node has outbound access (including firewall) on these ports:
      <ul>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
  </ul>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

SUMMARY:

```bash
# ~/Development/chef-repo
ssh -i ~/.ssh/tpetchel.pem root@10.194.15.116 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.116:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.116 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name acceptance_customers --run-list 'recipe[awesome_customers]'

ssh -i ~/.ssh/tpetchel.pem root@10.194.15.119 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.119:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.119 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name union_customers --run-list 'recipe[awesome_customers]'

ssh -i ~/.ssh/tpetchel.pem root@10.194.15.117 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.117:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.117 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name rehearsal_customers --run-list 'recipe[awesome_customers]'

ssh -i ~/.ssh/tpetchel.pem root@10.194.15.120 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.120:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.120 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name delivered_customers --run-list 'recipe[awesome_customers]'

curl 10.194.15.116
curl 10.194.15.117
curl 10.194.15.119
curl 10.194.15.120
```

### deploy.rb (Acceptance, Union, Rehearsal, Delivered)

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate recipe build-cookbook deploy
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[./build-cookbook/spec/unit/recipes] action create (up to date)
  * cookbook_file[./build-cookbook/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[./build-cookbook/spec/unit/recipes/deploy_spec.rb] action create_if_missing
    - create new file ./build-cookbook/spec/unit/recipes/deploy_spec.rb
    - update content in file ./build-cookbook/spec/unit/recipes/deploy_spec.rb from none to 92ec41
    (diff output suppressed by config)
  * template[./build-cookbook/recipes/deploy.rb] action create
    - create new file ./build-cookbook/recipes/deploy.rb
    - update content in file ./build-cookbook/recipes/deploy.rb from none to f569c9
    (diff output suppressed by config)
```

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/recipes/deploy.rb
asdf
```

[COMMENT] If you existing workflow includes [push jobs](), you can use those too...

A common pattern we use here...

```ruby
if node['delivery']['change']['stage'] == 'delivered'
  bucket_name = node['delivery']['change']['project'].gsub(/_/, '-')
  fqdn = "#{site_name}.#{domain_name}"
else
  bucket_name = "#{node['delivery']['change']['project'].gsub(/_/, '-')}-#{node['delivery']['change']['stage']}"
  fqdn = "#{site_name}-#{node['delivery']['change']['stage']}.#{domain_name}"
end
```

### smoke.rb (Acceptance, Union, Rehearsal, Delivered)

* `curl` the server

### functional.rb (Acceptance, Union, Rehearsal, Delivered)

* Run our Serverspec tests



```ruby
# old-provision.rb
# << TODO
# I dunno dude. delivery-truck::publish doesn't seem to find then my cookbook changes...
# So I'm copy pastaing and tweaking the base implementation here.

# Create the upload directory where cookbooks to be uploaded will be staged
cookbook_directory = File.join(node['delivery']['workspace']['cache'], "cookbook-upload")
directory cookbook_directory do
  recursive true
  # We delete the cookbook upload staging directory each time to ensure we
  # don't have out-of-date cookbooks hanging around from a previous build.
  action [:delete, :create]
end

# Upload cookbook to the Chef Server
execute "berks_vendor_cookbook_awesome_customers" do
  command "berks vendor #{cookbook_directory}"
  cwd "#{chef_repo}/cookbooks/awesome_customers"
end

Dir.glob("#{cookbook_directory}/*").select {|f| File.directory? f}.map {|f| File.basename f}.each do |cookbook|
  execute "upload_cookbook_#{cookbook}" do
    command "knife cookbook upload #{cookbook} --freeze --all --force " \
            "--config #{delivery_knife_rb} " \
            "--cookbook-path #{cookbook_directory}"
  end
end

# TODO
```
