---
title: 'Write the build cookbook'
order: 4
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
---
A _build cookbook_ is a xxxx..

[PRODNOTE] Show the Delivery pipeline again here...

Talk about the phases, and how each step below each phase cooresponds to a recipe in the build cookbook.

Point to doc page that lists and describes each recipe.

### Create build-cookbook

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate cookbook build-cookbook
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ ls
build-cookbook  cli.toml  config.json
```

[PRODNOTE] Remember, cli.toml shouldn't be here, right?

### Add Berksfile

[PRODNOTE] Not going with the Policyfile, not yet.

In Chef DK versions prior to 0.9.0, the `chef generate cookbook` command creates a file named <code class="file-path">Berksfile</code> in the cookbook's root directory.

If you're using Chef DK version 0.9.0 or later (you can run the `chef --version` command to verify your version), you'll need to create this file by hand. Create a file named <code class="file-path">Berksfile</code> in the <code class="file-path">~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook</code> directory and add this.

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/Berksfile
source "https://supermarket.chef.io"

metadata

cookbook 'delivery-truck', git: 'https://github.com/opscode-cookbooks/delivery-truck.git'
cookbook 'delivery-sugar', github: 'chef-cookbooks/delivery-sugar'
```

### Add dep to delivery-truck cookbook

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/metadata.rb
name 'build-cookbook'
maintainer 'The Authors'
maintainer_email 'you@example.com'
license 'all_rights'
description 'Installs/Configures build-cookbook'
long_description 'Installs/Configures build-cookbook'
version '0.1.0'

depends 'delivery-truck'
```

### Modify config file to define a basic build pipeline

Default looks like this.

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/config.json
{
  "version": "2",
  "build_cookbook": {
    "name": "<your build cookbook name>",
    "path": "<relative path from project root>"
  },
  "skip_phases": []
}
```

We'll modify config.json to:

* reference build-cookbook
* skip all phases

Modify config.json like this.

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/config.json
{
  "version": "2",
  "build_cookbook": {
      "name": "build-cookbook",
      "path": ".delivery/build-cookbook"
  },
  "skip_phases": [
    "lint",
    "unit",
    "syntax",
    "quality",
    "security",
    "publish",
    "provision",
    "deploy",
    "smoke",
    "functional"
  ],
  "delivery-truck": {
    "publish": {
      "chef_server": false
    }
  }
}
```

### Commit the changes and push for review

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/
$ git status
On branch add-delivery-config
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   config.json

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	build-cookbook/
	cli.toml

no changes added to commit (use "git add" and/or "git commit -a")
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ git add .
$ git commit -m "Verify all phases skipped"
[add-delivery-config 103244b] Verify all phases skipped
 14 files changed, 247 insertions(+), 4 deletions(-)
 create mode 100644 .delivery/build-cookbook/.gitignore
 create mode 100644 .delivery/build-cookbook/.kitchen.yml
 create mode 100644 .delivery/build-cookbook/Berksfile
 create mode 100644 .delivery/build-cookbook/Policyfile.rb
 create mode 100644 .delivery/build-cookbook/README.md
 create mode 100644 .delivery/build-cookbook/chefignore
 create mode 100644 .delivery/build-cookbook/metadata.rb
 create mode 100644 .delivery/build-cookbook/recipes/default.rb
 create mode 100644 .delivery/build-cookbook/spec/spec_helper.rb
 create mode 100644 .delivery/build-cookbook/spec/unit/recipes/default_spec.rb
 create mode 100644 .delivery/build-cookbook/test/integration/default/serverspec/default_spec.rb
 create mode 100644 .delivery/build-cookbook/test/integration/helpers/serverspec/spec_helper.rb
 create mode 100644 .delivery/cli.toml
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ delivery review
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel/.delivery
Review for change add-delivery-config targeted for pipeline master
Created
https://10.194.8.162/e/test/#/organizations/learn-chef/projects/build-a-delivery-pipeline-rhel/changes/28aad937-4c50-4b41-b053-dc4d36b42983
```

Browser window opens.

Note that the phases are skipped.

[PRODNOTE] Show screenshot ^ that's similar to the failure case, but shows the skipped phases.

Have user open Review tab. See the changes.

[PRODNOTE] Show screenshot ^.

We won't approve any changes just yet...

-------

Ah shit, forgot some stuff...

Modify your `build-cookbook` cookbook's default.rb like this.

```ruby
# PATH
# We include the delivery-truck default recipe so any setup that delivery-truck
# needs gets done.
include_recipe 'delivery-truck::default'

# We enter client mode, which means we are now talking to the delivery chef server
# instead of the chef-zero invocation this run was started in context of.
Chef_Delivery::ClientHelper.enter_client_mode_as_delivery

# Do any other setup here as needed. For example, XXXXXXX.

Chef_Delivery::ClientHelper.leave_client_mode_as_delivery
```

[PRODNOTE] Need to see about whether to show enter/leave call...

```bash
$ git status
On branch add-delivery-config
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   build-cookbook/recipes/default.rb

no changes added to commit (use "git add" and/or "git commit -a")
thomaspetchel@ubuntu:~/Development/build-a-delivery-pipeline-rhel/.delivery$ git add .
thomaspetchel@ubuntu:~/Development/build-a-delivery-pipeline-rhel/.delivery$ git commit -m "include delivery-truck::default"
[add-delivery-config 2dadad4] include delivery-truck::default
 1 file changed, 11 insertions(+)
thomaspetchel@ubuntu:~/Development/build-a-delivery-pipeline-rhel/.delivery$ delivery review
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel/.delivery
Review for change add-delivery-config targeted for pipeline master
^C
thomaspetchel@ubuntu:~/Development/build-a-delivery-pipeline-rhel/.delivery$ delivery review
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel/.delivery
Review for change add-delivery-config targeted for pipeline master
Created
https://10.194.8.162/e/test/#/organizations/learn-chef/projects/build-a-delivery-pipeline-rhel/changes/28aad937-4c50-4b41-b053-dc4d36b42983
```

## X. Incorporate lint and unit tests

### lint.rb (Verify, Build)

* Run RuboCop, Foodcritic

`delivery-truck` runs RuboCop and Foodcritic for us!

SHOW CODE SNIPPET.

### unit.rb (Verify, Build)

* Run our ChefSpec tests

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate recipe build-cookbook unit
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[./build-cookbook/spec/unit/recipes] action create (up to date)
  * cookbook_file[./build-cookbook/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[./build-cookbook/spec/unit/recipes/unit_spec.rb] action create_if_missing
    - create new file ./build-cookbook/spec/unit/recipes/unit_spec.rb
    - update content in file ./build-cookbook/spec/unit/recipes/unit_spec.rb from none to be7fcd
    (diff output suppressed by config)
  * template[./build-cookbook/recipes/unit.rb] action create
    - create new file ./build-cookbook/recipes/unit.rb
    - update content in file ./build-cookbook/recipes/unit.rb from none to ecb942
    (diff output suppressed by config)
```

```ruby
# PATH/unit.rb
# Run unit tests on the cookbooks that are in cookbooks/
include_recipe 'delivery-truck::unit'
```

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate recipe build-cookbook lint
[2015-10-15T14:16:23-07:00] WARN: ExpandNodeObject#load_node is deprecated. Please use Chef::PolicyBuilder::Dynamic instead of using ExpandNodeObject directly at /opt/chefdk/embedded/lib/ruby/gems/2.1.0/gems/chef-dk-0.9.0/lib/chef-dk/chef_runner.rb:54:in `policy'
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[./build-cookbook/spec/unit/recipes] action create (up to date)
  * cookbook_file[./build-cookbook/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[./build-cookbook/spec/unit/recipes/lint_spec.rb] action create_if_missing
    - create new file ./build-cookbook/spec/unit/recipes/lint_spec.rb
    - update content in file ./build-cookbook/spec/unit/recipes/lint_spec.rb from none to 2f032f
    (diff output suppressed by config)
  * template[./build-cookbook/recipes/lint.rb] action create
    - create new file ./build-cookbook/recipes/lint.rb
    - update content in file ./build-cookbook/recipes/lint.rb from none to 8dd63c
    (diff output suppressed by config)
```

```ruby
# PATH/lint.rb
# Run lint tests on the cookbooks that are in cookbooks/
include_recipe 'delivery-truck::lint'
```

Add note how we could also lint/unit test the app itself. Out of scope...

### syntax.rb (Verify, Build)

* Skip it.

## Y.

### Review the change

```bash
# PATH
$ delivery review
Chef Delivery
Loading configuration from /home/thomaspetchel/Development/build-a-delivery-pipeline-rhel/.delivery
Review for change add-delivery-config targeted for pipeline master
Created
https://10.194.8.162/e/test/#/organizations/learn-chef/projects/build-a-delivery-pipeline-rhel/changes/28aad937-4c50-4b41-b053-dc4d36b42983
```

Talk about how (and show screenshot) how the pipeline runs and succeeds, but no resources are actually applied.

That's because although the _build_ cookbook changed, the cookbook that we're deploying hasn't. So nothing triggered lint/unit to run.

## Y. Publish your changes to the Chef server

### quality.rb (Build)

* Skip it

### security.rb (Build)

* Skip it

### publish.rb (Build)

* Push to Chef server
* Upload data bags

** Publish to Chef server

Modify config.json like this (remove 'publish' from skip_phases and set `"chef_server": true`)

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/config.json
{
  "version": "2",
  "build_cookbook": {
      "name": "build-cookbook",
      "path": ".delivery/build-cookbook"
  },
  "skip_phases": [
    "lint",
    "unit",
    "syntax",
    "quality",
    "security",
    "provision",
    "deploy",
    "smoke",
    "functional"
  ],
  "delivery-truck": {
    "publish": {
      "chef_server": true
    }
  }
}
```

* Add publish recipe

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate recipe build-cookbook publish
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[./build-cookbook/spec/unit/recipes] action create (up to date)
  * cookbook_file[./build-cookbook/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[./build-cookbook/spec/unit/recipes/publish_spec.rb] action create_if_missing
    - create new file ./build-cookbook/spec/unit/recipes/publish_spec.rb
    - update content in file ./build-cookbook/spec/unit/recipes/publish_spec.rb from none to cb6be1
    (diff output suppressed by config)
  * template[./build-cookbook/recipes/publish.rb] action create
    - create new file ./build-cookbook/recipes/publish.rb
    - update content in file ./build-cookbook/recipes/publish.rb from none to 2c769d
    (diff output suppressed by config)
```

* Write out publish recipe

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/recipes/publish.rb
include_recipe 'delivery-truck::publish'

chef_repo = "#{node['delivery_builder']['repo']}/chef-repo"

execute 'create passwords data bag' do
  cwd chef_repo
  command 'knife data bag create passwords'
  not_if "knife data bag list | grep '^passwords$'"
end

%w(db_admin_password sql_server_root_password).each do |data_bag_item|
  execute "create #{data_bag_item} data bag item" do
    cwd chef_repo
    command "knife data bag from file passwords #{data_bag_item}.json --config #{delivery_knife_rb}"
  end
end

# << TODO
# I dunno dude. delivery-truck::publish doesn't seem to find then my cookbook changes...
# So I'm copy pastaing and tweaking the base implementation here.

# Create the upload directory where cookbooks to be uploaded will be staged
cookbook_directory = File.join(node['delivery']['workspace']['cache'], "cookbook-upload")
directory cookbook_directory do
  recursive true
  # We delete the cookbook upload staging directory each time to ensure we
  # don't have out-of-date cookbooks hanging around from a previous build.
  action [:delete, :create]
end

# Upload cookbook to the Chef Server
execute "berks_vendor_cookbook_awesome_customers" do
  command "berks vendor #{cookbook_directory}"
  cwd "#{chef_repo}/cookbooks/awesome_customers"
end

Dir.glob("#{cookbook_directory}/*").select {|f| File.directory? f}.map {|f| File.basename f}.each do |cookbook|
  execute "upload_cookbook_#{cookbook}" do
    command "knife cookbook upload #{cookbook} --freeze --all --force " \
            "--config #{delivery_knife_rb} " \
            "--cookbook-path #{cookbook_directory}"
  end
end

# TODO
```

```bash
$ git add .
$ git commit -m "add publish recipe"
$ delivery review
```

Watch lint and unit pass.

Mash Approve button.

Watch build happen. (incl/ screnshot.)

Confirm data bag and cookbook are uploaded.

[PRODNOTE] There's a problem here. The awesome_customers cookbook was already uploaded, so no new changes happen, so publish cookbook won't upload it until it's changed again. Need to think about this...

- Login to Chef server

-- see `awesome_customers` cookbook and its deps
-- see data bag

Alternatively, we could:
- Have the user logon to the build node and do it from the CLI.
- Have the user setup their .knife.rb on thier workstation.

^ Explain this.

Need to verify what the best flow is....

## Z.

### provision.rb (Acceptance, Union, Rehearsal, Delivered)

TODO: Talk about how you might use a provisioning node for this...

#### Create a Chef repo

```bash
# ~/Development
$ chef generate repo chef-repo
[...]
```

#### Download the Starter Kit

TODO: SPELL THIS OUT

Unzip, say Y to overwrite any files.

TODO: Show tabs...

TODO: Is there a flag for `unzip` so it doesn't prompt?

```bash
# ~/Development
$ unzip ~/Downloads/chef-starter.zip
Archive:  /home/thomaspetchel/Downloads/chef-starter.zip
  inflating: chef-repo/cookbooks/chefignore
   creating: chef-repo/cookbooks/starter/
   creating: chef-repo/cookbooks/starter/recipes/
  inflating: chef-repo/cookbooks/starter/recipes/default.rb
   creating: chef-repo/cookbooks/starter/attributes/
  inflating: chef-repo/cookbooks/starter/attributes/default.rb
   creating: chef-repo/cookbooks/starter/files/
   creating: chef-repo/cookbooks/starter/files/default/
  inflating: chef-repo/cookbooks/starter/files/default/sample.txt
   creating: chef-repo/cookbooks/starter/templates/
   creating: chef-repo/cookbooks/starter/templates/default/
  inflating: chef-repo/cookbooks/starter/templates/default/sample.erb
  inflating: chef-repo/cookbooks/starter/metadata.rb
replace chef-repo/README.md? [y]es, [n]o, [A]ll, [N]one, [r]ename: A
  inflating: chef-repo/README.md
  inflating: chef-repo/.gitignore
   creating: chef-repo/.chef/
  inflating: chef-repo/.chef/knife.rb
  inflating: chef-repo/roles/starter.rb
  inflating: chef-repo/.chef/delivery.pem
  inflating: chef-repo/.chef/test-validator.pem
```

### Move to chef-repo

```bash
# ~/Development
$ cd chef-repo
```

#### Get a node to bootstrap

In [Learn to manage a node](/manage-a-node/rhel/), you bootstrapped a node that we provided. Now it's time to bootstrap a Red Hat Enterprise Linux 6.5 or CentOS 6.5 node that you own to give you experience working with your own infrastructure.

Chef provides ways to provision a node and bootstrap it all in one step &ndash; we'll cover this in a later tutorial. For learning purposes, it's best to start by bringing up your own node manually and bootstrapping it separately.

Remember, your node can be any physical machine, virtual machine, or cloud instance, as long as:

* its IP address is accessible from your network. <= INCLUDING DELIVERY, CHEF SERVER, Etc.
* it has inbound network access on ports 22 (SSH) and 80 (HTTP) and outbound network access on port 443 (HTTPS).
* it meets the [system requirements](https://docs.chef.io/chef_system_requirements.html#chef-client) for running `chef-client`.
* you have root or `sudo` access.

#### Bootstrap your node

BETTER YET, AUTOMATE THIS. MOVE COMMANDS INTO PROVISION RECIPE. SCP DATA BAG SECRET KEY TO BUILD NODE. TALK ABOUT PROVISINING AND PROVISIONING NODE (FOR WHEN YOU NEED ...)
SHOW BOTH -i AND PASSWORD FLAVORS.

ADD TO DEFAULT ATTRS FILE

```ruby
default['build-cookbook']['acceptance-env'] = { node_name: 'acceptance_customers', ip_address: '10.194.15.116' }
default['build-cookbook']['union-env'] = { node_name: 'union_customers', ip_address: '10.194.15.119' }
default['build-cookbook']['rehearsal-env'] = { node_name: 'rehearsal_customers', ip_address: '10.194.15.117' }
default['build-cookbook']['delivered-env'] = { node_name: 'delivered_customers', ip_address: '10.194.15.120' }

default['build-cookbook']['user-name'] = 'ubuntu'
default['build-cookbook']['identity-file'] = 'tpetchel.pem'
```

[PRODNOTE] Is user name built-in for me already?

Now that you have a node running, it's time to bootstrap it.

In [Learn to manage a node](/manage-a-node/rhel/), we provided you with a virtual machine that uses a user name and password to authenticate. For learning purposes, this is just fine.

In production, we recommend that you use key-based authentication instead of a user name and password because it can be more secure. This option is commonly used with Amazon EC2 instances because EC2 typically works using key-based authentication.

Choose the option below that matches how you can authenticate and bootstrap your node.

##### Option 1: Use a user name and password

This is what we did in [Learn to manage a node](/manage-a-node/rhel/). From your workstation, run this command to bootstrap your node. Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, <code class="placeholder">USER</code> with your username, and <code class="placeholder">PASSWORD</code> with your password.

```bash
# ~/chef-repo
$ knife bootstrap ADDRESS --ssh-user USER --ssh-password 'PASSWORD' --sudo --use-sudo-password --node-name acceptance_customers --run-list 'recipe[awesome_customers]'
```

REPEAT FOR UNION REHEARSAL DELIVERED.

You'll see lots of output as your node installs `chef-client` and runs the `awesome_customers` cookbook.

##### Option 2: Use key-based authentication

From your workstation, run this command to bootstrap your node. Replace <code class="placeholder">ADDRESS</code> with your remote node's external address, and <code class="placeholder">IDENTITY\_FILE</code> with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/chef-repo
$ knife bootstrap ADDRESS --ssh-user USER --sudo --identity-file IDENTITY_FILE --node-name acceptance_customers --run-list 'recipe[awesome_customers]'
```

REPEAT FOR UNION REHEARSAL DELIVERED.

You'll see lots of output as your node installs `chef-client` and runs the `awesome_customers` cookbook.

<a class="help-button radius" href="#" data-reveal-id="knife-help-modal">Need help troubleshooting?</a>

<div id="knife-help-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <h3 id="modalTitle">If the operation times out or fails, here are some things to try</h3>
  <ul>
    <li>Ensure that your environment is active before you run <code>knife</code>. For example, CloudShare instances suspend after a period of inactivity. <img class="border" src="/assets/images/rhel/cloudshare-suspend.png"></img></li>
    <li>Ensure that you run <code>knife</code> commands from your <code class="file-path">chef-repo</code> directory or one of its sub-directories.</li>
    <li>Ensure you have a <code class="file-path">chef-repo/.chef</code> directory and that it contains a <code class="file-path">knife.rb</code> file and two <code class="file-path">.pem</code> files. If you don't, <a href="/manage-a-node/rhel/set-up-your-chef-server#step2" target="_blank">install the Starter Kit</a>.</li>
    <li>Ensure that your node's IP address is accessible from your network.</li>
    <li>Ensure the user name you provide has root or <code>sudo</code> access on the node.</li>
    <li>Ensure your workstation has outbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
        <li>80 (HTTP)</li>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
    <li>Ensure your node has inbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
      </ul>
    </li>
    <li>Ensure your node has outbound access (including firewall) on these ports:
      <ul>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
  </ul>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

SUMMARY:

```bash
# ~/Development/chef-repo
ssh -i ~/.ssh/tpetchel.pem root@10.194.15.116 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.116:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.116 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name acceptance_customers --run-list 'recipe[awesome_customers]'

ssh -i ~/.ssh/tpetchel.pem root@10.194.15.119 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.119:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.119 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name union_customers --run-list 'recipe[awesome_customers]'

ssh -i ~/.ssh/tpetchel.pem root@10.194.15.117 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.117:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.117 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name rehearsal_customers --run-list 'recipe[awesome_customers]'

ssh -i ~/.ssh/tpetchel.pem root@10.194.15.120 'mkdir -p /etc/chef'
scp -i ~/.ssh/tpetchel.pem ~/encrypted_data_bag_secret root@10.194.15.120:/etc/chef/encrypted_data_bag_secret
knife bootstrap 10.194.15.120 --ssh-user root --sudo --identity-file ~/.ssh/tpetchel.pem --node-name delivered_customers --run-list 'recipe[awesome_customers]'

curl 10.194.15.116
curl 10.194.15.117
curl 10.194.15.119
curl 10.194.15.120
```

### deploy.rb (Acceptance, Union, Rehearsal, Delivered)

```bash
# ~/Development/build-a-delivery-pipeline-rhel/.delivery
$ chef generate recipe build-cookbook deploy
Compiling Cookbooks...
Recipe: code_generator::recipe
  * directory[./build-cookbook/spec/unit/recipes] action create (up to date)
  * cookbook_file[./build-cookbook/spec/spec_helper.rb] action create_if_missing (up to date)
  * template[./build-cookbook/spec/unit/recipes/deploy_spec.rb] action create_if_missing
    - create new file ./build-cookbook/spec/unit/recipes/deploy_spec.rb
    - update content in file ./build-cookbook/spec/unit/recipes/deploy_spec.rb from none to 92ec41
    (diff output suppressed by config)
  * template[./build-cookbook/recipes/deploy.rb] action create
    - create new file ./build-cookbook/recipes/deploy.rb
    - update content in file ./build-cookbook/recipes/deploy.rb from none to f569c9
    (diff output suppressed by config)
```

```ruby
# ~/Development/build-a-delivery-pipeline-rhel/.delivery/build-cookbook/recipes/deploy.rb
asdf
```

[COMMENT] If you existing workflow includes [push jobs](), you can use those too...

A common pattern we use here...

```ruby
if node['delivery']['change']['stage'] == 'delivered'
  bucket_name = node['delivery']['change']['project'].gsub(/_/, '-')
  fqdn = "#{site_name}.#{domain_name}"
else
  bucket_name = "#{node['delivery']['change']['project'].gsub(/_/, '-')}-#{node['delivery']['change']['stage']}"
  fqdn = "#{site_name}-#{node['delivery']['change']['stage']}.#{domain_name}"
end
```

### smoke.rb (Acceptance, Union, Rehearsal, Delivered)

* `curl` the server

### functional.rb (Acceptance, Union, Rehearsal, Delivered)

* Run our Serverspec tests
