---
title: 'Write the build cookbook'
order: 3
keywords: TODO
layout: lesson
sections: [1, 2, 3, 4, 5, 6]
next: {heading: Next, partial: next}
time_to_complete: 2 hours
meta_tags: [{name: 'robots', content: 'noindex, nofollow'}]
---
So far, you have a basically empty build cookbook. In this lesson, you'll add functionality to the phases highlighted here:

| Verify     | Build      | Acceptance    | Union         | Rehearsal     | Delivered     |
|------------|------------|---------------|---------------|---------------|---------------|
| <span class="highlight-text">**Unit**</span>   | <span class="highlight-text">**Unit**</span>   | <span class="highlight-text">**Provision**</span> | <span class="highlight-text">**Provision**</span> | <span class="highlight-text">**Provision**</span> | <span class="highlight-text">**Provision**</span> |
| <span class="highlight-text">**Lint**</span>   | <span class="highlight-text">**Lint**</span>   | <span class="highlight-text">**Deploy** </span>   | <span class="highlight-text">**Deploy**</span>    | <span class="highlight-text">**Deploy**</span>    | <span class="highlight-text">**Deploy**</span>    |
| <span class="highlight-text">**Syntax**</span> | <span class="highlight-text">**Syntax**</span> | <span class="highlight-text">**Smoke**</span>     | <span class="highlight-text">**Smoke**</span>     | <span class="highlight-text">**Smoke**</span>     | <span class="highlight-text">**Smoke**</span>     |
|            | Quality    | Functional    | Functional    | Functional    | Functional    |
|            | Security   |               |               |               |               |
|            | <span class="highlight-text">**Publish**</span>|               |               |               |               |

Your build cookbook consists of recipes. Each recipe corresponds to a phase, such as lint or syntax. Any time that a phase runs, no matter in which stage, it uses the same recipe. For example, the recipe for the lint phase runs in the Verify and Build stages. You can use conditional logic to customize how the recipe behaves for a given stage.

How you define each phase depends on your project and its requirements. For example, if your project contains JavaScript, you might run JSLint as part of the lint phase. Alternatively, if you don't currently run lint tests on your code, you can leave the phase empty or configure Chef Delivery to skip it.

Our project is the `awesome_customers` cookbook. Here's a brief summary of what each phase will accomplish.

* **unit** &ndash; runs ChefSpec.
* **lint** &ndash; runs Foodcritic and RuboCop.
* **syntax** &ndash; runs `knife cookbook test`.
* **publish** &ndash; uploads `awesome_customers` and the cookbooks it depends on to the Chef server.
* **provision** &ndash; uses Chef provisioning to create the infrastructure needed to test the artifacts (on first use) and to bootstrap the web application server. This phase also brings up the AWS instance if it doesn't already exist.
* **deploy** &ndash; runs `chef-client` on the web application server. This phase deploys the artifacts that were published during the Build stage to the infrastructure you set up during the provision phase.
* **smoke** &ndash; verifies that the web server is at least minimally functional.

To help implement these steps, we'll use the [delivery-truck](https://github.com/chef-cookbooks/delivery-truck) cookbook. This cookbook performs tasks that are typical for a cookbook project. For example, its `unit` recipe runs ChefSpec and its `lint` recipe runs Foodcritic and RuboCop. You'll start by adding `delivery-truck` as a dependency to your build cookbook. Then, step-by-step, you'll add the recipes for each phase.

You'll also update the build cookbook so that it uploads an encrypted data bag to Chef server. The Customers application needs the items in the data bag to access its database.
