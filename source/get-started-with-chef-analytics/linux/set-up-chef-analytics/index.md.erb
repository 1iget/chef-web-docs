---
title: 'Set up Chef Analytics'
order: 2
keywords: TODO
layout: lesson
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
---
## Set up reporting on the Chef server

https://docs.chef.io/install_reporting.html

Install the package on each frontend and backend Chef server:

```bash
# ~
$ sudo chef-server-ctl install opscode-reporting
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::add_ons_wrapper"]
Synchronizing Cookbooks:
  - apt
  - private-chef
  - yum
  - enterprise
  - runit
  - yum-epel
  - build-essential
Compiling Cookbooks...
Converging 12 resources
[...]
Recipe: private-chef::add_ons_wrapper
  * ruby_block[addon_install_notification_opscode-reporting] action create
    - execute the ruby block addon_install_notification_opscode-reporting

Running handlers:
-- Installed Add-On Package: opscode-reporting
  - #<Class:0x00000003a6aab0>::AddonInstallHandler
Running handlers complete
Chef Client finished, 2/9 resources updated in 32.960512623 seconds
```

Reconfigure the Chef server on the backend primary server (bootstrap):

```bash
# ~
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::default"]
[...]
Recipe: private-chef::default
  * file[/etc/opscode/chef-server-running.json] action create (up to date)

Running handlers:
Running handlers complete
Chef Client finished, 32/390 resources updated in 35.212935898 seconds
opscode Reconfigured!
```

Reconfigure the Chef reporting server on the backend primary server (bootstrap):

```bash
# ~
$ sudo opscode-reporting-ctl reconfigure
Starting Chef Client, version 11.12.2
resolving cookbooks for run list: ["opscode-reporting::default"]
Synchronizing Cookbooks:
  - opscode-reporting
  - enterprise
  - runit
  - build-essential
  - yum
Compiling Cookbooks...
[...]
Recipe: <Dynamically Defined Resource>
  * service[opscode-reporting] action restart
    - restart service service[opscode-reporting]


Running handlers:
Running handlers complete

Chef Client finished, 43/48 resources updated in 21.696493562 seconds
opscode-reporting Reconfigured!
```

Copy the entire /etc/opscode-reporting directory from the backend primary server to all frontend and backend servers. For example, from each server run:

$ scp -r <Bootstrap server IP>:/etc/opscode-reporting /etc

or from the backend primary server:

$ scp -r /etc/opscode-reporting <each servers IP>:/etc

Reconfigure any Chef server on which Chef reporting services have been installed:

$ chef-server-ctl reconfigure

Reconfigure Chef reporting services on each server:

$ opscode-reporting-ctl reconfigure

Verify the installation:

```bash
# ~
$ sudo opscode-reporting-ctl test
Configuring logging...
Creating platform...
Configured URL: https://ec2-52-25-239-111.us-west-2.compute.amazonaws.com
Creating org pedant-testorg-21264
Starting Pedant Run: 2015-06-16 17:47:06 UTC
setting up rspec config for #<Pedant::ReportingPlatform:0x00000001097d78>
Configuring RSpec for Multi-Tenant Tests
[...]
Finished in 2 minutes 37.5 seconds
222 examples, 0 failures, 4 pending
```


# Set up Chef Analytics

For this part, you'll need your running Chef server and a dedicated system to run Chef Analytics.

[DIAGRAM]

https://downloads.chef.io/analytics/

Full documentation at https://docs.chef.io/install_analytics.html

## Connect your Chef server to Chef Analytics

Add the FQDN for the Chef server and the Chef analytics server to /etc/opscode/chef-server.rb. The ending slash is required.

```ruby
# /etc/opscode/chef-server.rb
oc_id['applications'] = {
  'analytics' => {
    'api_fqdn' => 'ec2-52-25-239-111.us-west-2.compute.amazonaws.com, # Chef server
    'redirect_uri' => 'https://ec2-52-26-198-33.us-west-2.compute.amazonaws.com/' # Chef Analytics server
  }
}
```

```bash
# ~
$ sudo chef-server-ctl stop
ok: down: bookshelf: 0s, normally up
ok: down: nginx: 0s, normally up
ok: down: oc_bifrost: 0s, normally up
ok: down: oc_id: 0s, normally up
ok: down: opscode-chef-mover: 106283s, normally up
ok: down: opscode-erchef: 0s, normally up
ok: down: opscode-expander: 0s, normally up
ok: down: opscode-expander-reindexer: 1s, normally up
ok: down: opscode-solr4: 0s, normally up
ok: down: postgresql: 0s, normally up
ok: down: rabbitmq: 1s, normally up
ok: down: redis_lb: 0s, normally up
```

Enable remote access to RabbitMQ on the Chef server backend by adding the following settings to /etc/opscode/chef-server.rb:

```ruby
# /etc/opscode/chef-server.rb
rabbitmq['vip'] = '52.25.239.111'
rabbitmq['node_ip_address'] = '0.0.0.0'
```

Reconfigure the Chef server:

```bash
# ~
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::default"]
[...]
Recipe: private-chef::opscode-erchef
  * runit_service[opscode-erchef] action restart
    - restart service runit_service[opscode-erchef]

Running handlers:
Running handlers complete
Chef Client finished, 43/394 resources updated in 44.728455365 seconds
opscode Reconfigured!
```

This updates the Chef server and creates the actions-source.json file, which is required by Chef analytics, and adds it to the /etc/opscode-analytics directory on the Chef server.

```bash
# ~
$ sudo cat /etc/opscode-analytics/actions-source.json
{
  "private_chef": {
    "api_fqdn": "ip-172-31-14-100.us-west-2.compute.internal",
    "oc_id_application": {
      "name": "analytics",
      "uid": "f5999ce143e88035fbdc02a773470c03e607bbf64dc147759736b06d535126fd",
      "secret": "3109e45765e8bc02f4a2df824f8966076e4b665da762bcb28df4574a63a56d72",
      "redirect_uri": "https://ec2-52-26-198-33.us-west-2.compute.amazonaws.com/"
    },
    "rabbitmq_host": "52.25.239.111",
    "rabbitmq_port": "5672",
    "rabbitmq_vhost": "/analytics",
    "rabbitmq_exchange": "actions",
    "rabbitmq_user": "actions",
    "rabbitmq_password": "d563bb892f9fe4d393dc83075b81602436c387825f0483d3791ba0197e88eaee337a464ff1f80cb5e8cd696c790394df5c1a"
  }
}
```

Restart the Chef server.

```bash
# ~
$ sudo chef-server-ctl restart
ok: run: bookshelf: (pid 8338) 1s
ok: run: nginx: (pid 8368) 0s
ok: run: oc_bifrost: (pid 8373) 1s
ok: run: oc_id: (pid 8403) 0s
ok: run: opscode-chef-mover: (pid 8406) 1s
ok: run: opscode-erchef: (pid 8426) 0s
ok: run: opscode-expander: (pid 8456) 0s
ok: run: opscode-expander-reindexer: (pid 8488) 1s
ok: run: opscode-solr4: (pid 8521) 0s
ok: run: postgresql: (pid 8570) 0s
ok: run: rabbitmq: (pid 8572) 0s
ok: run: redis_lb: (pid 8605) 1s
```

Reconfigure the Chef management console.

```bash
# ~
$ sudo opscode-manage-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["opscode-manage::default"]
[...]
Recipe: opscode-manage::nginx
  * service[nginx] action nothing (skipped due to action :nothing)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_upstreams.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_internal.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_external.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/nginx.d/manage.conf] action delete (up to date)
Recipe: opscode-manage::default
  * file[/var/opt/opscode-manage/etc/opscode-manage-running.json] action create (up to date)

Running handlers:
Running handlers complete
Chef Client finished, 5/68 resources updated in 12.49658619 seconds
opscode-manage Reconfigured!
```

## Configure the Chef analytics standalone server

Perform these steps from your Chef Analytics server.

Copy over the files in the /etc/opscode-analytics directory from the Chef server to the standalone Chef analytics server.

One way to do this is to 1) tar the files 2) scp them to your workstation 3) extract them over SSH to the Chef Analtyics server

Run this from your workstation.

### Option 1: Use a user name and password

TODO

### Option 2: Use key-based authentication

52.25.239.111
52.26.198.33

```bash
$ ssh -i ~/.ssh/tpetchel.pem ubuntu@52.25.239.111 sudo tar -czvf /tmp/opscode-analytics.tar /etc/opscode-analytics
tar: Removing leading `/' from member names
/etc/opscode-analytics/
/etc/opscode-analytics/webui_priv.pem
/etc/opscode-analytics/actions-source.json
$ scp -p -i ~/.ssh/tpetchel.pem -o stricthostkeychecking=no ubuntu@52.25.239.111:/tmp/opscode-analytics.tar /tmp
opscode-analytics.tar                         100% 1975     1.9KB/s   00:00
$ cat /tmp/opscode-analytics.tar | ssh -i ~/.ssh/tpetchel.pem ubuntu@52.26.198.33 sudo tar -xzf - -C /
```

Configure the Chef analytics server by setting the analytics_fqdn in /etc/opscode-analytics/opscode-analytics.rb. This is the FQDN for the Chef analytics web application. For example:

```ruby
# /etc/opscode-analytics/opscode-analytics.rb
analytics_fqdn "ec2-52-26-198-33.us-west-2.compute.amazonaws.com"
topology "standalone"
```

Verify the configuration using the preflight check command:

```bash
# ~
$ sudo opscode-analytics-ctl preflight-check

[SUCCESS] Preflight check successful!
```

If there are any errors in the preflight check, correct them before carrying on to the next step.

Reconfigure the Chef analytics server on the Chef analytics server:

```bash
# ~
$ sudo opscode-analytics-ctl reconfigure
Starting Chef Client, version 11.18.0
Compiling Cookbooks...
Recipe: opscode-analytics::default
  * directory[/etc/opscode-analytics] action create
    - change owner from '999' to 'root'
    - change group from '999' to 'root'
Generating RSA private key, 2048 bit long modulus
[...]
Recipe: opscode-analytics::alaska
  * runit_service[alaska] action restart
    - restart service runit_service[alaska]
  * execute[restart_alaska_log_service] action run
    - execute /opt/opscode-analytics/embedded/bin/sv restart /opt/opscode-analytics/sv/alaska/log

Running handlers:
Running handlers complete
Chef Client finished, 282/302 resources updated in 112.87384101 seconds
opscode-analytics Reconfigured!
```

Verify the installation on the Chef analytics server:

```bash
# ~
$ opscode-analytics-ctl test
Running with options:

{:config_file=>"/opt/opscode-analytics/embedded/service/analytics-test/config.rb", :smoke_tests_only=>true}

Running tests from the following directory:
/opt/opscode-analytics/embedded/service/analytics-test/spec/integration

Randomized with seed 48629


basic server state check
  is running

Finished in 0.05267 seconds
1 example, 0 failures

Randomized with seed 48629

```

## Sign in to Analytics server

From your web browser, navigate to the URL for your Chef Analytics server. Click the **Start Analytics** button and you'll be temporarily redirected to your Chef server logon page.

![The Chef Analytics sign-in page](chef-analytics/sign-in.png)

Sign in with the administrator user name and password that you used when you set up your Chef server.

![The Chef Manage sign-in page](chef-server/sign-in.png)

Click **Yes** to authorize Chef Analytics to use your Chef account.

![Authorize Chef Analytics to use your Chef account](chef-analytics/authorize.png)

Nothing much on the home page yet. Let's run `chef-client` on your node to see ...

![The Chef Analytics home page](chef-analytics/home-page.png)

## Run chef-client on your node

Let's run `chef-client` on the node that you boostrapped when you set up your Chef server.

### Option 1: Use a user name and password

Replace `{address}` with your remote node's external address, `{user}` with your username, and `{password}` with your password.

```bash
# ~/chef-repo/cookbooks/awesome_customers
$ knife ssh {address} 'sudo chef-client' --manual-list --ssh-user {user} --ssh-password '{password}'
```

### Option 2: Use key-based authentication

Replace `{address}` with your remote node's external address and `{identity-file}` with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/chef-repo/cookbooks/awesome_customers
$ knife ssh {address} 'sudo chef-client' --manual-list --ssh-user {user} --identity-file {identity-file}
```

you will see a timeline of events as soon as you first log into Analytics:
This is a rolling list of events that are happening in your Chef-managed infrastructure: machines that are checking in, users updating cookbooks, roles and environments, and so on. You can see more information about each event including what changed in that event by clicking the > icon on the far left hand side of each row:

![The Chef Analytics timeline](chef-analytics/timeline.png)

Obviously, if you have an infrastructure of any substantial size, inspecting individual events like this by hand is not that productive. One only wishes to be alerted about events of interest. That’s where the rule system and notifications come in.
