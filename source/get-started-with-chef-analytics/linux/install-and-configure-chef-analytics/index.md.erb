---
title: 'Install and configure Chef Analytics'
order: 2
keywords: TODO
layout: lesson
sections: []
next: {heading: Next, partial: next}
time_to_complete: 60 minutes
show_disqus: false
meta_tags: [{name: "ROBOTS", content: "NOINDEX, NOFOLLOW"}]
---
[COMMENT] If you installed Chef server through the AWS Marketplace or Azure Marketplace, Chef Analytics is already set up for you. You can [skip to the next page](/get-started-with-chef-analytics/linux/get-alerted-when-chef-client-runs).

Now that you have a node bootstrapped to a Chef server running in your infrastructure, you're ready to install and configure Chef Analytics.

To successfully configure Chef Analytics, you'll also need to set up a few things on your Chef server. So make sure you have access to both Chef server and Chef Analytics servers, including:

* their public IP addresses.
* the usernames and passwords (or identity files) that you use to log on.

In this part, you'll perform these steps.

1. [Prepare a system to run Chef Analytics](#step1)
1. [Connect to your Chef server and Chef Analytics systems](#step2)
1. [Install the Chef Analytics package](#step3)
1. [Connect your Chef server to Chef Analytics](#step4)
1. [Copy the configuration files to your Chef Analytics server](#step5)
1. [Configure Chef Analytics](#step6)
1. [Verify your Chef Analytics configuration](#step7)

[COMMENT] We use `sudo` to highlight where root access is required. You can omit `sudo` from the commands if you're running as the root user.

[START_BOX]

## 1. Prepare a system to run Chef Analytics

Review and perform the [prerequisites](https://docs.chef.io/install_analytics.html#prerequisites) for running Chef Analytics. Chef server runs on Red Hat Enterprise Linux/CentOS and Ubuntu.

The system requirements for Chef Analytics are similar to that for running Chef server. [Use these checklists](/install-and-manage-your-own-chef-server/linux/install-chef-server/install-chef-server-using-your-hardware/#step1) to help verify you have everything you need. Also keep in mind these additional requirements:

<a class="button radius cta" href="#" data-reveal-id="chef-server-el-prep-help-modal">Checklist for Red Hat Enterprise Linux</a> <a class="button radius cta" href="#" data-reveal-id="chef-server-ubuntu-prep-help-modal">Checklist for Ubuntu</a>

<div id="chef-server-el-prep-help-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <h3 id="modalTitle">To prepare your Red Hat Enterprise Linux system, ensure that:</h3>
  <ul>
    <li>has 8GB total memory.</li>
    <li>has a hostname that can be accessed from your workstation and nodes.</li>
    <li>is connected to NTP.</li>
    <li>has <a href="http://docs.chef.io/install_server_pre.html#apache-qpid">Apache Qpid</a> disabled.</li>
    <li>provides inbound access (including firewall) on port 443 (HTTPS).</li>
    <li>provides outbound access (including firewall) on ports 25 (SMTP) and 5672 (for RabbitMQ).</li>
    <li>has <a href="http://docs.chef.io/install_server_pre.html#selinux">SELinux</a> disabled or set to permissive mode.</li>
  </ul>
  <p>You may also want to open port 22 (SSH) so you can configure Chef Analytics from your workstation.</p>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

<div id="chef-server-ubuntu-prep-help-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <h3 id="modalTitle">To prepare your Ubuntu system, ensure that:</h3>
  <ul>
    <li>has 8GB total memory.</li>
    <li>has a hostname that can be accessed from your workstation and nodes.</li>
    <li>is connected to NTP.</li>
    <li>provides inbound access (including firewall) on port 443 (HTTPS).</li>
    <li>provides outbound access (including firewall) on ports 25 (SMTP) and 5672 (for RabbitMQ).</li>
    <li>has <a href="http://docs.chef.io/install_server_pre.html#apparmor">AppArmor</a> disabled or set to complaining mode.</li>
  </ul>
  <p>You may also want to open port 22 (SSH) so you can configure Chef Analytics from your workstation. Also, we recommend that you run <code>apt-get update</code> to update your local package cache.</p>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

[END_BOX]

[START_BOX]

## 2. Connect to your Chef server and Chef Analytics and install a text editor

In this tutorial, you'll work from your workstation and your Chef server and Chef Analytics servers. We recommend that you open an SSH connection to your Chef server and Chef Analytics server from your workstation so that you can perform all steps from one place.

Here's an example of how to create an SSH connection using a username and password.

```bash
$ ssh root@52.25.201.190
root@52.25.201.190's password: ********
```

Here's an example using key-based authentication.

```bash
$ ssh -i ~/.ssh/my.pem root@52.25.201.190
```

Mac OS and most Linux distributions come with an SSH client. On Windows, you'll need to install one. The easiest way is to <a href="http://git-scm.com/download/">install Git</a>, which includes an SSH client.

After you connect to your Chef Analytics server, the first thing you should do is install a text editor. If you don't have a preferred editor, we recommend `vim`. This [interactive Vim tutorial](http://www.openvim.com/tutorial.html) can help you get oriented to the commands you'll need to create, edit, and save a file. `emacs` and `nano` are also popular text command-line based editors.

[END_BOX]

[START_BOX]

## 3. Install the Chef Analytics package

> Perform this part from your Chef Analytics server.

Run this command to install Chef Analytics.

```bash
$ curl -L https://omnitruck.chef.io/install.sh | sudo bash -s -- -P analytics
```

Alternatively, you can [download and install the package manually](https://downloads.chef.io/analytics/).

While you wait for the package to download and install, you can proceed to the next step, where you'll provide some information about your Chef Analytics server to your Chef server.

[END_BOX]

[START_BOX]

## 4. Connect your Chef server to Chef Analytics

> Perform this part from your Chef server.

You need to provide some information about your Chef Analytics server to your Chef server. In this step, you'll work from your Chef server.

First, stop your Chef server.

```bash
# ~
$ sudo chef-server-ctl stop
ok: down: bookshelf: 0s, normally up
ok: down: nginx: 0s, normally up
ok: down: oc_bifrost: 0s, normally up
ok: down: oc_id: 0s, normally up
ok: down: opscode-chef-mover: 85322s, normally up
ok: down: opscode-erchef: 0s, normally up
ok: down: opscode-expander: 0s, normally up
ok: down: opscode-expander-reindexer: 0s, normally up
ok: down: opscode-reporting: 0s, normally up
ok: down: opscode-solr4: 0s, normally up
ok: down: postgresql: 0s, normally up
ok: down: rabbitmq: 1s, normally up
ok: down: redis_lb: 0s, normally up
```

From your Chef server, add the FQDN for the Chef server and the Chef Analytics server to <% fp '/etc/opscode/chef-server.rb' %>. Replace <% ph 'CHEF_SERVER_FQDN' %> with your Chef server's FQDN and <% ph 'ANALYTICS_FQDN' %> with your Chef Analytics server's FQDN. For `redirect_uri`, the ending slash is required.

```ruby
# /etc/opscode/chef-server.rb
oc_id['applications'] = {
  'analytics' => {
    'api_fqdn' => 'CHEF_SERVER_FQDN', # Chef server
    'redirect_uri' => 'https://ANALYTICS_FQDN/' # Chef Analytics
  }
}
```

Also, add the following to <% fp '/etc/opscode/chef-server.rb' %> to enable remote access to RabbitMQ on the Chef server. Replace <% ph 'CHEF_SERVER_IP_ADDRESS' %> with your Chef server's public IP address (not its hostname.)

```ruby
# /etc/opscode/chef-server.rb
rabbitmq['vip'] = 'CHEF_SERVER_IP_ADDRESS'
rabbitmq['node_ip_address'] = '0.0.0.0'
```

Your completed <% fp '/etc/opscode/chef-server.rb' %> file will look similar to this:

```ruby
# /etc/opscode/chef-server.rb
# THIS FILE IS CREATED BY CHEF

topology 'standalone'
license['nodes'] = 5
api_fqdn 'ec2-52-11-116-111.us-west-2.compute.amazonaws.com'

oc_id['applications'] = {
  'analytics' => {
    'api_fqdn' => 'ec2-52-11-116-111.us-west-2.compute.amazonaws.com', # Chef server
    'redirect_uri' => 'https://ec2-52-11-149-75.us-west-2.compute.amazonaws.com/' # Chef Analytics
  }
}

rabbitmq['vip'] = '52.11.116.111'
rabbitmq['node_ip_address'] = '0.0.0.0'
```

Now reconfigure the Chef server to apply the changes.

```bash
# ~
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.4.0.rc.2
resolving cookbooks for run list: ["private-chef::default"]
Synchronizing Cookbooks:
  - yum
  - enterprise
  - private-chef
  - runit
  - apt
  - packagecloud
Compiling Cookbooks...
[...]
Running handlers:
Running handlers complete
Chef Client finished, 32/357 resources updated in 51.37811144 seconds
opscode Reconfigured!
```

This step reconfigures the Chef server and creates the <% fp '/etc/opscode-analytics/actions-source.json' %> file, which is required by Chef Analytics in a later step.

Confirm that <% fp 'actions-source.json' %> was properly written.

```bash
# ~
$ sudo cat /etc/opscode-analytics/actions-source.json
{
  "private_chef": {
    "api_fqdn": "ec2-52-11-116-111.us-west-2.compute.amazonaws.com",
    "oc_id_application": {
      "name": "analytics",
      "uid": "e08437b34815808b882cbba55d4a85279bd1fbdc99d662412b5c04117a85e8b3",
      "secret": "88b749a10799918fd19e8d1f440c10aa9b7e28a43dcfc25f0bd87fb40ef297de",
      "redirect_uri": "https://ec2-52-11-149-75.us-west-2.compute.amazonaws.com/"
    },
    "rabbitmq_host": "52.11.116.111",
    "rabbitmq_port": "5672",
    "rabbitmq_vhost": "/analytics",
    "rabbitmq_exchange": "actions",
    "rabbitmq_user": "actions",
    "rabbitmq_password": "3209d577b16c0ffdb621f310cad95ffeb521989d9dad8a3afa5202f713ed65ac57bef48807139a6801e90db576b28b960402"
  }
}
```

Restart the Chef server.

```bash
# ~
$ sudo chef-server-ctl restart
ok: run: bookshelf: (pid 12710) 1s
ok: run: nginx: (pid 12740) 0s
ok: run: oc_bifrost: (pid 12745) 1s
ok: run: oc_id: (pid 12775) 0s
ok: run: opscode-chef-mover: (pid 12778) 1s
ok: run: opscode-erchef: (pid 12803) 0s
ok: run: opscode-expander: (pid 12830) 0s
ok: run: opscode-expander-reindexer: (pid 12859) 0s
ok: run: opscode-reporting: (pid 12885) 1s
ok: run: opscode-solr4: (pid 12912) 0s
ok: run: postgresql: (pid 12942) 0s
ok: run: rabbitmq: (pid 12945) 1s
ok: run: redis_lb: (pid 12978) 0s
```

Finally, reconfigure the Chef management console.

```bash
# ~
$ sudo opscode-manage-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["opscode-manage::default"]
[...]
Recipe: opscode-manage::nginx
  * service[nginx] action nothing (skipped due to action :nothing)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_upstreams.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_internal.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_external.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/nginx.d/manage.conf] action delete (up to date)
Recipe: opscode-manage::default
  * file[/var/opt/opscode-manage/etc/opscode-manage-running.json] action create (up to date)

Running handlers:
Running handlers complete
Chef Client finished, 5/68 resources updated in 12.49658619 seconds
opscode-manage Reconfigured!
```

[END_BOX]

[START_BOX]

## 5. Copy the configuration files to your Chef Analytics server

> Perform this part from your workstation.

When you prepared your Chef server to work with Chef Analytics, the Chef server generated files that Chef Analytics needs. In this step, you'll copy these files from your Chef server to your Chef Analytics server.

You need to copy the files in the <% fp '/etc/opscode-analytics' %> directory from your Chef server to your Chef Analytics server. The way you do this depends on how you access your servers. For example, if you're using key-based authentication, then you might not be able to connect directly from one server to the other.

One way to copy the files is to:

1. Archive the <% fp '/etc/opscode-analytics' %> directory into a single <% fp '.tar' %> file on your Chef server.
1. Run `scp` or another secure copy utility to copy the <% fp '.tar' %> archive to your workstation.
1. Extract the archive from your workstation to your Chef Analytics server.

Mac OS and most Linux distributions come with an SSH client and secure copy utility. On Windows, you'll need to install them. The easiest way is to [install Git](https://git-for-windows.github.io) and run these commands from a Git Bash prompt.

Here's how to copy the files using a username and password, all from your workstation. Replace <% ph 'USER' %>, <% ph 'CHEF_SERVER_IP_ADDRESS' %>, and <% ph 'ANALYTICS_IP_ADDRESS' %> with your values.

```bash
$ ssh -t USER@CHEF_SERVER_IP_ADDRESS sudo tar -czvf /tmp/opscode-analytics.tar /etc/opscode-analytics
USER@CHEF_SERVER_IP_ADDRESS's password: ********
tar: Removing leading `/' from member names
/etc/opscode-analytics/
/etc/opscode-analytics/webui_priv.pem
/etc/opscode-analytics/actions-source.json
$ scp -p USER@CHEF_SERVER_IP_ADDRESS:/tmp/opscode-analytics.tar /tmp
USER@CHEF_SERVER_IP_ADDRESS's password: ********
opscode-analytics.tar                         100% 1975     1.9KB/s   00:00
$ cat /tmp/opscode-analytics.tar | ssh  USER@ANALYTICS_IP_ADDRESS sudo tar -xzf - -C /
USER@ANALYTICS_IP_ADDRESS's password: ********
```

Here's how to copy the files using key-based authentication. Replace <% ph 'IDENTITY_FILE' %>, <% ph 'USER' %>, <% ph 'CHEF_SERVER_IP_ADDRESS' %>, and <% ph 'ANALYTICS_IP_ADDRESS' %> with your values.

```bash
$ ssh -t -i IDENTITY_FILE USER@CHEF_SERVER_IP_ADDRESS sudo tar -czvf /tmp/opscode-analytics.tar /etc/opscode-analytics
tar: Removing leading `/' from member names
/etc/opscode-analytics/
/etc/opscode-analytics/webui_priv.pem
/etc/opscode-analytics/actions-source.json
$ scp -p -i IDENTITY_FILE USER@CHEF_SERVER_IP_ADDRESS:/tmp/opscode-analytics.tar /tmp
opscode-analytics.tar                         100% 1975     1.9KB/s   00:00
$ cat /tmp/opscode-analytics.tar | ssh -i IDENTITY_FILE USER@ANALYTICS_IP_ADDRESS sudo tar -xzf - -C /
```

Next you'll switch over to your Chef Analytics server.

[END_BOX]

[START_BOX]

## 6. Configure Chef Analytics

> Perform this part from your Chef Analytics server.

From your Chef Analytics server, create the file <% fp '/etc/opscode-analytics/opscode-analytics.rb' %> and add the following to it. Replace <% ph 'ANALYTICS_FQDN' %> with the hostname of your Chef Analytics system.

```ruby
# /etc/opscode-analytics/opscode-analytics.rb
analytics_fqdn 'ANALYTICS_FQDN'
topology 'standalone'
```

Now run the following command to verify that Chef Analytics has all the files it needs.

```bash
# ~
$ sudo opscode-analytics-ctl preflight-check

[SUCCESS] Preflight check successful!
```

If there are any errors in the preflight check, correct them before moving to the next step.

[COMMENT] If the preflight checks fails, trying running<br>`ln -s /usr/bin/curl /opt/opscode-analytics/embedded/bin/curl` on your Analytics server and then run the preflight check again. This will create a symlink to the system `curl`, which is required for the configuration to succeed.<br><br>This is a known issue, and we're working on a permanent fix for it.

Reconfigure Chef Analytics to use the updated configuration settings.

```bash
# ~
$ sudo opscode-analytics-ctl reconfigure
Starting Chef Client, version 11.18.0
Compiling Cookbooks...
Recipe: opscode-analytics::default
  * directory[/etc/opscode-analytics] action create
    - change owner from '999' to 'root'
    - change group from '999' to 'root'
Generating RSA private key, 2048 bit long modulus
[...]
Recipe: opscode-analytics::alaska
  * runit_service[alaska] action restart
    - restart service runit_service[alaska]
  * execute[restart_alaska_log_service] action run
    - execute /opt/opscode-analytics/embedded/bin/sv restart /opt/opscode-analytics/sv/alaska/log

Running handlers:
Running handlers complete
Chef Client finished, 282/302 resources updated in 112.87384101 seconds
opscode-analytics Reconfigured!
```

[END_BOX]

[START_BOX]

## 7. Verify your Chef Analytics configuration

> Perform this part from your Chef Analytics server.

Finally, verify your Chef Analytics configuration.

```bash
# ~
$ opscode-analytics-ctl test
Running with options:

{:config_file=>"/opt/opscode-analytics/embedded/service/analytics-test/config.rb", :smoke_tests_only=>true}

Running tests from the following directory:
/opt/opscode-analytics/embedded/service/analytics-test/spec/integration

Randomized with seed 48629


basic server state check
  is running

Finished in 0.05267 seconds
1 example, 0 failures

Randomized with seed 48629
```

[END_BOX]
