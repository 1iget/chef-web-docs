---
title: 'Set up Chef server'
order: 1
keywords: TODO
layout: lesson
sections: [1, 2, 3, 4, 5]
next: {heading: Next, partial: next}
time_to_complete: 15 minutes
---

## Ensure your Chef server can access its public FQDN

```
$ hostname -f
ip-172-31-14-100.us-west-2.compute.internal
ubuntu@ip-172-31-14-100:/etc/opscode-analytics$ sudo hostname 'ec2-52-25-239-111.us-west-2.compute.amazonaws.com'
ubuntu@ip-172-31-14-100:/etc/opscode-analytics$ hostname -f
ec2-52-25-239-111.us-west-2.compute.amazonaws.com
ubuntu@ip-172-31-14-100:/etc/opscode-analytics$ cat /etc/hostname
ip-172-31-14-100
ubuntu@ip-172-31-14-100:/etc/opscode-analytics$ echo "ec2-52-25-239-111.us-west-2.compute.amazonaws.com" | sudo tee /etc/hostname
ec2-52-25-239-111.us-west-2.compute.amazonaws.com
```

To complete this tutorial, you'll need three things &dash; the Chef Development Kit (Chef DK) installed on your workstation, an Ubuntu node to manage, and a hosted Chef account.

You'll also create a Chef code repository and a blank cookbook on your workstation to set up your web application project.

## Prerequisits

You'll need four servers, all accessible from the same network.

1. Server for Chef server
1. Server for Chef Analytics
1. Your workstation
1. A node to manage

Prerequisites are [here], but to summarize the important parts

1. RAM
1. Inbound access on ports 80 (HTTP) and 443 (HTTPS)

Remember, your node can be any physical machine, virtual machine, or cloud instance, as long as:

* its IP address is accessible from your network.
* it has inbound network access on ports 22 (SSH) and 80 (HTTP) and outbound network access on port 443 (HTTPS).
* it meets the [system requirements](https://docs.chef.io/chef_system_requirements.html#chef-client) for running `chef-client`.
* you have root or `sudo` access.

WinRM 2.0 uses port 5985 for HTTP and port 5986 for HTTPS traffic, by default.

## Set up your workstation

Install ChefDK

```
$ chef generate repo chef-repo
```

# Install Chef server

Because compute blah blah, you'll need a separate Chef server installation

* Get an Ubuntu or Red Hat Enterprise Linux / CentOS machine that has ports 80 (HTTP) and 443 (HTTPS) open to inbound traffic.
* Download Chef server http://downloads.chef.io/chef-server/
  * Available for U and RHEL, but not Windows Server. But both support Windows Server clients!
*

```bash
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::default"]
Synchronizing Cookbooks:
  - private-chef
  - enterprise
  - apt
  - yum
  - runit
  - build-essential
  - yum-epel
Compiling Cookbooks...
Recipe: private-chef::default
  * directory[/etc/opscode] action create (up to date)
  * directory[/etc/opscode/logrotate.d] action create
    - create new directory /etc/opscode/logrotate.d
    - change mode from '' to '0755'
    - change owner from '' to 'root'
    - change group from '' to 'root'
[...]
Recipe: private-chef::opscode-chef-mover
  * execute[restart_opscode-chef-mover_log_service] action run
    - execute /opt/opscode/embedded/bin/sv restart /opt/opscode/sv/opscode-chef-mover/log
Recipe: private-chef::redis_lb
  * execute[restart_redis_lb_log_service] action run
    - execute /opt/opscode/embedded/bin/sv restart /opt/opscode/sv/redis_lb/log
Recipe: <Dynamically Defined Resource>
  * service[nginx] action restart
    - restart service service[nginx]
Recipe: private-chef::nginx
  * execute[restart_nginx_log_service] action run
    - execute /opt/opscode/embedded/bin/sv restart /opt/opscode/sv/nginx/log

Running handlers:
Running handlers complete
Chef Client finished, 450/467 resources updated in 181.468051745 seconds
opscode Reconfigured!
```

initial organization on the command line first, then you can create the rest in the web UI.

```
$ sudo chef-server-ctl user-create tpetchel Thomas Petchel tpetchel@chef.io passw0rd --filename tpetchel-chef.pem
```

```
$ sudo chef-server-ctl org-create learnchef "Learn Chef" --association tpetchel --filename learnchef-validator.pem
```

[TIP] Note the values you provide for X, Y, and Z, as you'll need them again in the following steps.

```
$ ls *.pem
learnchef-validator.pem  tpetchel-chef.pem
```

```bash
$ mkdir .chef
$ scp -i ~/.ssh/tpetchel.pem -o stricthostkeychecking=no ubuntu@52.25.239.111:/home/ubuntu/tpetchel-chef.pem .chef/tpetchel-chef.pem
tpetchel-chef.pem                             100% 1674     1.6KB/s   00:00
$ scp -i ~/.ssh/tpetchel.pem -o stricthostkeychecking=no ubuntu@52.25.239.111:/home/ubuntu/learnchef-validator.pem .chef/learnchef-validator.pem
learnchef-validator.pem                       100% 1678     1.6KB/s   00:00
$ ls .chef
learnchef-validator.pem tpetchel-chef.pem
```

Create knife.rb

```
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "tpetchel"
client_key               "#{current_dir}/tpetchel-chef.pem"
validation_client_name   "learnchef-validator"
validation_key           "#{current_dir}/learnchef-validator.pem"
chef_server_url          "https://ec2-52-25-239-111.us-west-2.compute.amazonaws.com/organizations/learnchef"
cache_type               'BasicFile'
cache_options( :path => "#{ENV['HOME']}/.chef/checksums" )
cookbook_path            ["#{current_dir}/../cookbooks"]
```

```
knife client list
learnchef-validator
```

If you get an error, checking the following:

* You can access https://server-centos65.vagrantup.com:443 from a web browser.
* You are running commands from inside the chef-repo directory.
* The .chef directory contains two .pem files and a knife.rb.
* Your authentication fiels have the correct file permissions (they should be only user-readable).
* You are using the Chef Development Kit 0.3.5 and/or chef-client 11.18.0 (or higher). These tools needed some updates to work properly with Chef Server 12.
* If you have confirmed the preceding steps and are still unable to connect to Chef Server, please consult the Chef online documentation.

## Install the Chef reporting server

https://docs.chef.io/install_reporting.html

Install the package on each frontend and backend Chef server:

```bash
# ~
$ sudo chef-server-ctl install opscode-reporting
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::add_ons_wrapper"]
Synchronizing Cookbooks:
  - apt
  - private-chef
  - yum
  - enterprise
  - runit
  - yum-epel
  - build-essential
Compiling Cookbooks...
Converging 12 resources
[...]
Recipe: private-chef::add_ons_wrapper
  * ruby_block[addon_install_notification_opscode-reporting] action create
    - execute the ruby block addon_install_notification_opscode-reporting

Running handlers:
-- Installed Add-On Package: opscode-reporting
  - #<Class:0x00000003a6aab0>::AddonInstallHandler
Running handlers complete
Chef Client finished, 2/9 resources updated in 32.960512623 seconds
```

Reconfigure the Chef server on the backend primary server (bootstrap):

```bash
# ~
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::default"]
[...]
Recipe: private-chef::default
  * file[/etc/opscode/chef-server-running.json] action create (up to date)

Running handlers:
Running handlers complete
Chef Client finished, 32/390 resources updated in 35.212935898 seconds
opscode Reconfigured!
```

Reconfigure the Chef reporting server on the backend primary server (bootstrap):

```bash
# ~
$ sudo opscode-reporting-ctl reconfigure
Starting Chef Client, version 11.12.2
resolving cookbooks for run list: ["opscode-reporting::default"]
Synchronizing Cookbooks:
  - opscode-reporting
  - enterprise
  - runit
  - build-essential
  - yum
Compiling Cookbooks...
[...]
Recipe: <Dynamically Defined Resource>
  * service[opscode-reporting] action restart
    - restart service service[opscode-reporting]


Running handlers:
Running handlers complete

Chef Client finished, 43/48 resources updated in 21.696493562 seconds
opscode-reporting Reconfigured!
```

Copy the entire /etc/opscode-reporting directory from the backend primary server to all frontend and backend servers. For example, from each server run:

$ scp -r <Bootstrap server IP>:/etc/opscode-reporting /etc

or from the backend primary server:

$ scp -r /etc/opscode-reporting <each servers IP>:/etc

Reconfigure any Chef server on which Chef reporting services have been installed:

$ chef-server-ctl reconfigure

Reconfigure Chef reporting services on each server:

$ opscode-reporting-ctl reconfigure

Verify the installation:

```bash
# ~
$ sudo opscode-reporting-ctl test
Configuring logging...
Creating platform...
Configured URL: https://ec2-52-25-239-111.us-west-2.compute.amazonaws.com
Creating org pedant-testorg-21264
Starting Pedant Run: 2015-06-16 17:47:06 UTC
setting up rspec config for #<Pedant::ReportingPlatform:0x00000001097d78>
Configuring RSpec for Multi-Tenant Tests
[...]
Finished in 2 minutes 37.5 seconds
222 examples, 0 failures, 4 pending
```

### Install the Chef management console

https://docs.chef.io/install_server.html
http://docs.chef.io/ctl_chef_server.html#install

Something abou thow this is optional, but you must have it  to use features such as Chef Analytics.

The web UI is now a premium feature of Chef Server. It is not installed by default. To install the web UI on your Chef Server, run the following commands to install the opscode-manage plugin and reconfigure both the web UI configuration and the Chef Server configuration to use the web UI:

http://docs.chef.io/ctl_chef_server.html#install

```bash
# ~
$ chef-server-ctl install opscode-manage
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::add_ons_wrapper"]
Synchronizing Cookbooks:
  - apt
  - runit
  - yum-epel
  - enterprise
  - yum
  - private-chef
  - build-essential
Compiling Cookbooks...
Converging 12 resources
[...]
Running handlers:
-- Installed Add-On Package: opscode-manage
  - #<Class:0x0000000351b640>::AddonInstallHandler
Running handlers complete
Chef Client finished, 11/13 resources updated in 52.390675701 seconds
```

```bash
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::default"]
[...]
Running handlers:
Running handlers complete
Chef Client finished, 31/387 resources updated in 28.702313877 seconds
opscode Reconfigured!
```

```bash
# ~
$ sudo opscode-manage-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["opscode-manage::default"]
Synchronizing Cookbooks:
  - opscode-manage
  - enterprise
  - private_chef_addon
  - runit
  - unicorn
  - build-essential
  - yum
  - yum-epel
Compiling Cookbooks...
[...]
Recipe: opscode-manage::nginx
  * service[nginx] action restart
    - restart service service[nginx]

Running handlers:
Running handlers complete
Chef Client finished, 74/80 resources updated in 50.271242885 seconds
opscode-manage Reconfigured!
```

![The Chef Manage sign-in page](chef-server/sign-in.png)


![The Chef management console](chef-server/manage-learnchef.png)


### Create the hello\_chef\_server cookbook

```bash
# ~/chef-repo
$ chef generate cookbook cookbooks/hello_chef_server
Compiling Cookbooks...
Recipe: code_generator::cookbook
  * directory[/Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server] action create
    - create new directory /Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server
  * template[/Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server/metadata.rb] action create_if_missing
    - create new file /Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server/metadata.rb
    - update content in file /Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server/metadata.rb from none to d531e8
    (diff output suppressed by config)
[...]
  * execute[initialize-git] action run
    - execute git init .
  * cookbook_file[/Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server/.gitignore] action create
    - create new file /Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server/.gitignore
    - update content in file /Users/thomaspetchel/chef-repo-analytics/cookbooks/hello_chef_server/.gitignore from none to dd37b2
    (diff output suppressed by config)
```

```ruby
# ~/chef-repo/cookbooks/hello_chef_server/recipes/default.rb
file "#{Chef::Config[:file_cache_path]}/hello.txt" do
  contents 'Hello, Chef server!'
end
```

## Upload the hello\_chef\_server cookbook to the Chef server

```bash
knife cookbook upload hello_chef_server
Uploading hello_chef_server [0.1.0]
Uploaded 1 cookbook.
```

The output confirms that the cookbook successfully uploaded to your Chef server, but you can also run the following command to verify this.

```bash
$ knife cookbook list
hello_chef_server   0.1.0
```

## Bootstrap your node

### Bootstrap a Linux node

Remember, your node can be any physical machine, virtual machine, or cloud instance, as long as:

* its IP address is accessible from your network.
* it has inbound network access on ports 22 (SSH) and 80 (HTTP) and outbound network access on port 443 (HTTPS).
* it meets the [system requirements](https://docs.chef.io/chef_system_requirements.html#chef-client) for running `chef-client`.
* you have root or `sudo` access.

TODO: Change this to purple button and use it in Chef server and this tutorial.

Choose the option below that matches how you can authenticate and bootstrap your node.

### Option 1: Use a user name and password

This is what we did in [Manage a node](/manage-a-node/ubuntu/). From your workstation, run this command to bootstrap your node. Replace `{address}` with your remote node's external address, `{user}` with your username, and `{password}` with your password.

```bash
# ~/chef-repo
$ knife bootstrap {address} --ssh-user {user} --ssh-password '{password}' --sudo --use-sudo-password --node-name web_app_ubuntu --run-list 'recipe[awesome_customers]'
```

You'll see lots of output as your node installs `chef-client` and runs the `awesome_customers` cookbook.

### Option 2: Use key-based authentication

From your workstation, run this command to bootstrap your node. Replace `{address}` with your remote node's external address, and `{identity-file}` with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/chef-repo
$ knife bootstrap {address} --ssh-user {user} --sudo --identity-file {identity-file} --node-name chef_server_test --run-list 'recipe[hello_chef_server]'
```

You'll see lots of output as your node installs `chef-client` and runs the `awesome_customers` cookbook.

<a class="help-button radius" href="#" data-reveal-id="knife-help-modal">Need help troubleshooting?</a>

<div id="knife-help-modal" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <h3 id="modalTitle">If the operation times out or fails, here are some things to try</h3>
  <ul>
    <li>Ensure that your environment is active before you run <code>knife</code>. For example, CloudShare instances suspend after a period of inactivity. <img class="border" src="/assets/images/ubuntu/cloudshare-suspend.png"></img></li>
    <li>Ensure that you run <code>knife</code> commands from your <code class="file-path">chef-repo</code> directory or one of its sub-directories.</li>
    <li>Ensure you have a <code class="file-path">chef-repo/.chef</code> directory and that it contains a <code class="file-path">knife.rb</code> file and two <code class="file-path">.pem</code> files. If you don't, <a href="/manage-a-node/ubuntu/set-up-your-chef-server/#2installthestarterkit" target="_blank">install the Starter Kit</a>.</li>
    <li>Ensure that your node's IP address is accessible from your network.</li>
    <li>Ensure the user name you provide has root or <code>sudo</code> access on the node.</li>
    <li>Ensure your workstation has outbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
        <li>80 (HTTP)</li>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
    <li>Ensure your node has inbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
      </ul>
    </li>
    <li>Ensure your node has outbound access (including firewall) on these ports:
      <ul>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
  </ul>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>


### Bootstrap a Windows Server node

<div class="indent" id="bootstrap-intro" data-type="windows-fundamentals" ng-non-bindable>
From your workstation, run this command to bootstrap your node. Replace <code>{{address}}</code> with your remote node's external address, <code>{{user}}</code> with your username, and <code>{{password}}</code> with your password.
</div>
<p/>
<div id="bootstrap-command" class="window" ng-non-bindable>
  <nav class="control-window">
    <div class="close">&times;</div>
    <div class="minimize"></div>
    <div class="deactivate"></div>
  </nav>
  <h1 class="titleInside">Terminal: ~\chef-repo</h1>
  <div class="container" data-type="windows-fundamentals"><div class="terminal"><table>
    <tbody>
      <tr>
        <td class="gutter"><pre class="line-numbers"><span class="line-number">$</span></pre></td>
        <td class="code"><pre><code><span class="line command">knife bootstrap windows winrm {{address}} --winrm-user {{user}} --winrm-password '{{password}}' --node-name node1 --run-list 'recipe[hello\_chef\_server]'</span></code></pre></td>
      </tr>
    </tbody></table></div></div>
</div>

[COMMENT] This is a long command &ndash; use the scrollbar to see the entire thing.

[WINDOWS] This command uses Windows Remote Management (WinRM), a popular network protocol for connecting to Windows Server remotely. Although WinRM is how you typically connect to Windows, you can also bootstrap [using the Secure Shell (SSH) protocol](https://docs.chef.io/plugin_knife_windows.html#bootstrap-windows-ssh), which is more typical of Linux-based systems.

The optional `--node-name` argument uniquely identifies the node with the Chef server. Its value can be whatever you want. The server's FQDN is the default. If you previously used the name `node1` to bootstrap a different node, you'll need to choose a different name or remove the previous node.

<a class="help-button radius" href="#" data-reveal-id="knife-help-modal-windows">Need help troubleshooting?</a>

<div id="knife-help-modal-windows" class="reveal-modal" data-reveal aria-labelledby="modalTitle" aria-hidden="true" role="dialog">
  <h3 id="modalTitle">If the operation times out or fails, here are some things to try</h3>
  <ul>
    <li>Ensure that your environment is active before you run <code>knife</code>. For example, CloudShare instances suspend after a period of inactivity. <img class="border" src="/assets/images/windows/cloudshare-suspend.png"></img></li>
    <li>Ensure that you run <code>knife</code> commands from your <code class="file-path">chef-repo</code> directory or one of its sub-directories.</li>
    <li>Ensure you have a <code class="file-path">chef-repo\.chef</code> directory and that it contains a <code class="file-path">knife.rb</code> file and two <code class="file-path">.pem</code> files. If you don't, <a href="/manage-a-node/windows/set-up-your-chef-server/#2installthestarterkit" target="_blank">install the Starter Kit</a>.</li>
    <li>Ensure that you have the <a href="/manage-a-node/windows/bootstrap-your-node/#3installtheknifewindowsplugin" target="_blank">knife windows plugin</a> installed.</li>
    <li>Ensure that your node's IP address is accessible from your network.</li>
    <li>Ensure the user name you provide has Administrator access on the node.</li>
    <li>Ensure your workstation has outbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
        <li>80 (HTTP)</li>
        <li>443 (HTTPS)</li>
        <li>5985 and 5986 (WinRM)</li>
      </ul>
    </li>
    <li>Ensure your node has inbound access (including firewall) on these ports:
      <ul>
        <li>22 (SSH)</li>
        <li>5985 and 5986 (WinRM)</li>
      </ul>
    </li>
    <li>Ensure your node has outbound access (including firewall) on these ports:
      <ul>
        <li>443 (HTTPS)</li>
      </ul>
    </li>
    <li>Ensure your node is <a href="https://docs.chef.io/plugin_knife_windows.html#requirements" target="_blank">configured to accept outside WinRM connections.</a></li>
  </ul>
  <a class="close-reveal-modal" aria-label="Close">&#215;</a>
</div>

<p style="font-size: 14px; font-style: italic;">
Excerpts from this tutorial were adapted from <a href="http://misheska.com/blog/2014/11/25/chef-server-12/">Chef Server 12</a>, by Mischa Taylor.
</p>

## Exercises

Log in to manage and find node, status of last cc run

Log on to your node and confirm that your <code class="file-path">hello.txt</code> file

You'll see from the output that hello.txt was written to ...

```bash
$ cat /var/chef/cache/hello.txt
Hello, Chef server!
```

Alternatively, you can use the `knife ssh` command to confirm this from your workstation.

```bash
# ~
$ knife ssh 52.25.26.65 'more /var/chef/cache/hello.txt' --manual-list --ssh-user ubuntu --identity-file ~/.ssh/tpetchel.pem
52.25.26.65 Hello, Chef server!
```

# Chef Analytics

This tutorial will walk you through writing your first rule and notifying yourself via e-mail.

## Install Chef Analytics

https://downloads.chef.io/analytics/

Full documentation at https://docs.chef.io/install_analytics.html

## Connect your Chef server to Chef Analytics

Add the FQDN for the Chef server and the Chef analytics server to /etc/opscode/chef-server.rb. The ending slash is required.

```ruby
# /etc/opscode/chef-server.rb
oc_id['applications'] = {
  'analytics' => {
    'api_fqdn' => 'ec2-52-25-239-111.us-west-2.compute.amazonaws.com, # Chef server
    'redirect_uri' => 'https://ec2-52-26-198-33.us-west-2.compute.amazonaws.com/' # Chef Analytics server
  }
}
```

```bash
# ~
$ sudo chef-server-ctl stop
ok: down: bookshelf: 0s, normally up
ok: down: nginx: 0s, normally up
ok: down: oc_bifrost: 0s, normally up
ok: down: oc_id: 0s, normally up
ok: down: opscode-chef-mover: 106283s, normally up
ok: down: opscode-erchef: 0s, normally up
ok: down: opscode-expander: 0s, normally up
ok: down: opscode-expander-reindexer: 1s, normally up
ok: down: opscode-solr4: 0s, normally up
ok: down: postgresql: 0s, normally up
ok: down: rabbitmq: 1s, normally up
ok: down: redis_lb: 0s, normally up
```

Enable remote access to RabbitMQ on the Chef server backend by adding the following settings to /etc/opscode/chef-server.rb:

```ruby
# /etc/opscode/chef-server.rb
rabbitmq['vip'] = '52.25.239.111'
rabbitmq['node_ip_address'] = '0.0.0.0'
```

Reconfigure the Chef server:

```bash
# ~
$ sudo chef-server-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["private-chef::default"]
[...]
Recipe: private-chef::opscode-erchef
  * runit_service[opscode-erchef] action restart
    - restart service runit_service[opscode-erchef]

Running handlers:
Running handlers complete
Chef Client finished, 43/394 resources updated in 44.728455365 seconds
opscode Reconfigured!
```

This updates the Chef server and creates the actions-source.json file, which is required by Chef analytics, and adds it to the /etc/opscode-analytics directory on the Chef server.

```bash
# ~
$ sudo cat /etc/opscode-analytics/actions-source.json
{
  "private_chef": {
    "api_fqdn": "ip-172-31-14-100.us-west-2.compute.internal",
    "oc_id_application": {
      "name": "analytics",
      "uid": "f5999ce143e88035fbdc02a773470c03e607bbf64dc147759736b06d535126fd",
      "secret": "3109e45765e8bc02f4a2df824f8966076e4b665da762bcb28df4574a63a56d72",
      "redirect_uri": "https://ec2-52-26-198-33.us-west-2.compute.amazonaws.com/"
    },
    "rabbitmq_host": "52.25.239.111",
    "rabbitmq_port": "5672",
    "rabbitmq_vhost": "/analytics",
    "rabbitmq_exchange": "actions",
    "rabbitmq_user": "actions",
    "rabbitmq_password": "d563bb892f9fe4d393dc83075b81602436c387825f0483d3791ba0197e88eaee337a464ff1f80cb5e8cd696c790394df5c1a"
  }
}
```

Restart the Chef server.

```bash
# ~
$ sudo chef-server-ctl restart
ok: run: bookshelf: (pid 8338) 1s
ok: run: nginx: (pid 8368) 0s
ok: run: oc_bifrost: (pid 8373) 1s
ok: run: oc_id: (pid 8403) 0s
ok: run: opscode-chef-mover: (pid 8406) 1s
ok: run: opscode-erchef: (pid 8426) 0s
ok: run: opscode-expander: (pid 8456) 0s
ok: run: opscode-expander-reindexer: (pid 8488) 1s
ok: run: opscode-solr4: (pid 8521) 0s
ok: run: postgresql: (pid 8570) 0s
ok: run: rabbitmq: (pid 8572) 0s
ok: run: redis_lb: (pid 8605) 1s
```

Reconfigure the Chef management console.

```bash
# ~
$ sudo opscode-manage-ctl reconfigure
Starting Chef Client, version 12.0.3
resolving cookbooks for run list: ["opscode-manage::default"]
[...]
Recipe: opscode-manage::nginx
  * service[nginx] action nothing (skipped due to action :nothing)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_upstreams.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_internal.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/addon.d/30-opscode-manage_external.conf] action create (up to date)
  * template[/var/opt/opscode/nginx/etc/nginx.d/manage.conf] action delete (up to date)
Recipe: opscode-manage::default
  * file[/var/opt/opscode-manage/etc/opscode-manage-running.json] action create (up to date)

Running handlers:
Running handlers complete
Chef Client finished, 5/68 resources updated in 12.49658619 seconds
opscode-manage Reconfigured!
```

## Configure the Chef analytics standalone server

Perform these steps from your Chef Analytics server.

Copy over the files in the /etc/opscode-analytics directory from the Chef server to the standalone Chef analytics server.

One way to do this is to 1) tar the files 2) scp them to your workstation 3) extract them over SSH to the Chef Analtyics server

Run this from your workstation.

### Option 1: Use a user name and password

TODO

### Option 2: Use key-based authentication

52.25.239.111
52.26.198.33

```bash
$ ssh -i ~/.ssh/tpetchel.pem ubuntu@52.25.239.111 sudo tar -czvf /tmp/opscode-analytics.tar /etc/opscode-analytics
tar: Removing leading `/' from member names
/etc/opscode-analytics/
/etc/opscode-analytics/webui_priv.pem
/etc/opscode-analytics/actions-source.json
$ scp -p -i ~/.ssh/tpetchel.pem -o stricthostkeychecking=no ubuntu@52.25.239.111:/tmp/opscode-analytics.tar /tmp
opscode-analytics.tar                         100% 1975     1.9KB/s   00:00
$ cat /tmp/opscode-analytics.tar | ssh -i ~/.ssh/tpetchel.pem ubuntu@52.26.198.33 sudo tar -xzf - -C /
```

Configure the Chef analytics server by setting the analytics_fqdn in /etc/opscode-analytics/opscode-analytics.rb. This is the FQDN for the Chef analytics web application. For example:

```ruby
# /etc/opscode-analytics/opscode-analytics.rb
analytics_fqdn "ec2-52-26-198-33.us-west-2.compute.amazonaws.com"
topology "standalone"
```

Verify the configuration using the preflight check command:

```bash
# ~
$ sudo opscode-analytics-ctl preflight-check

[SUCCESS] Preflight check successful!
```

If there are any errors in the preflight check, correct them before carrying on to the next step.

Reconfigure the Chef analytics server on the Chef analytics server:

```bash
# ~
$ sudo opscode-analytics-ctl reconfigure
Starting Chef Client, version 11.18.0
Compiling Cookbooks...
Recipe: opscode-analytics::default
  * directory[/etc/opscode-analytics] action create
    - change owner from '999' to 'root'
    - change group from '999' to 'root'
Generating RSA private key, 2048 bit long modulus
[...]
Recipe: opscode-analytics::alaska
  * runit_service[alaska] action restart
    - restart service runit_service[alaska]
  * execute[restart_alaska_log_service] action run
    - execute /opt/opscode-analytics/embedded/bin/sv restart /opt/opscode-analytics/sv/alaska/log

Running handlers:
Running handlers complete
Chef Client finished, 282/302 resources updated in 112.87384101 seconds
opscode-analytics Reconfigured!
```

Verify the installation on the Chef analytics server:

```bash
# ~
$ opscode-analytics-ctl test
Running with options:

{:config_file=>"/opt/opscode-analytics/embedded/service/analytics-test/config.rb", :smoke_tests_only=>true}

Running tests from the following directory:
/opt/opscode-analytics/embedded/service/analytics-test/spec/integration

Randomized with seed 48629


basic server state check
  is running

Finished in 0.05267 seconds
1 example, 0 failures

Randomized with seed 48629

```

## Sign in to Analytics server

From your web browser, navigate to the URL for your Chef Analytics server. Click the **Start Analytics** button and you'll be temporarily redirected to your Chef server logon page.

![The Chef Analytics sign-in page](chef-analytics/sign-in.png)

Sign in with the administrator user name and password that you used when you set up your Chef server.

![The Chef Manage sign-in page](chef-server/sign-in.png)

Click **Yes** to authorize Chef Analytics to use your Chef account.

![Authorize Chef Analytics to use your Chef account](chef-analytics/authorize.png)

Nothing much on the home page yet. Let's run `chef-client` on your node to see ...

![The Chef Analytics home page](chef-analytics/home-page.png)

## Run chef-client on your node

Let's run `chef-client` on the node that you boostrapped when you set up your Chef server.

### Option 1: Use a user name and password

Replace `{address}` with your remote node's external address, `{user}` with your username, and `{password}` with your password.

```bash
# ~/chef-repo/cookbooks/awesome_customers
$ knife ssh {address} 'sudo chef-client' --manual-list --ssh-user {user} --ssh-password '{password}'
```

### Option 2: Use key-based authentication

Replace `{address}` with your remote node's external address and `{identity-file}` with your SSH identify file, for example <code class="file-path">~/.ssh/my.pem</code>.

```bash
# ~/chef-repo/cookbooks/awesome_customers
$ knife ssh {address} 'sudo chef-client' --manual-list --ssh-user {user} --identity-file {identity-file}
```

you will see a timeline of events as soon as you first log into Analytics:
This is a rolling list of events that are happening in your Chef-managed infrastructure: machines that are checking in, users updating cookbooks, roles and environments, and so on. You can see more information about each event including what changed in that event by clicking the > icon on the far left hand side of each row:

![The Chef Analytics timeline](chef-analytics/timeline.png)

Obviously, if you have an infrastructure of any substantial size, inspecting individual events like this by hand is not that productive. One only wishes to be alerted about events of interest. That’s where the rule system and notifications come in.

# Writing Your First Rule

Chef Analytics is equipped with a powerful rules processing system that allow you to generate notifications based on any observed events in the data stream. Example of events of interest might be:

* cookbooks being uploaded
* certain environments being changed
* machines whose Chef Client runs are failing (failure to converge)
* machines whose Chef Client audit runs are failing
* Chef Client runs which have updated resources

You can send these notifications to your email, chat systems like Hipchat, or to a webhook-based service for generic integrations. For the purpose of this tutorial, we’re going to write a rule that emails us whenever a node converges -- not necessarily a rule you want in real life, but one that is sufficient to show off the power of Analytics!

## Configure a Notification

Before we begin, you’ll need to know the hostname of an SMTP server that you can send email through (and a username and password if it requires authentication).

Click on Notifications to make sure we have a destination to send our rule output to. By default, there aren’t any destinations, so let’s create one by clicking the “+” sign and selecting “E-Mail”:

![Adding an email notification](chef-analytics/add-email-notification.png)

Rename the suggested name from “New Email 1” to “send_email” by clicking the title. Then fill in some of the fields in the form with values that make sense for your company. If your SMTP server requires authentication, enter the username and password as well. Then click Save.

[COMMENT] http://aws.amazon.com/ses/

![The completed email notification setup form](chef-analytics/add-email-notification-form.png)

We’re now ready to write our first rule that will use this notification.

## Write a Rule

Rules are essentially conditional (_if this, then that_) logic for your infrastructure events. The general syntax of a rule is:

```ruby
# Untitled
rule on <message_type>
  when
    // some condition
  then
    // some action
  end
end
```

Some examples of message types are:

* `action` &ndash; an operation on the Chef Server
* `run_converge` &ndash; a Chef Client run
* `run_resource` &ndash; an individual resource
* `run_control` &ndash; a control run as part of Chef Client Audit Mode

Remember, to _converge_ a node means to run `chef-client` and bring the node towards its desired configuration.

Since we want a rule that emails us every time a node converges, we’ll want to write a rule on `run_converge` message types.

Click the **Rules** tab and click **+** to create a new rule; the rule editor pops up. Rules live within a rule group, which can have a name; we can change the name of the group to something more intuitive, like `email_on_run_converge`.

![Adding a new rule](chef-analytics/add-rule.png)

Let’s change a couple things in the boilerplate rule for the rule we want:

* Since we know we are writing a rule on converges, and not on Chef server actions, we change “rule on action” to “rule on run_converge”
* We can leave the “when” as “true” as we don’t want to set any additional conditions right now
* Under the “then” clause, we can write something like:

    `notify("send_email", "The node {{ message.run.node_name }} just converged.")``

(The complete list of fields that can be used in the rules editor can be seen in the reference documentation.)

The complete rule should look like this:

```ruby
# huh
rules 'email_me_every_converge'
  rule on run_converge
  when
    true
  then
    notify("send_email", "The node {{ message.run.node_name }} just converged.")
  end
end
```

Click **Save** and you are brought back to the list of rules.

![Saving the rule](chef-analytics/add-rule-save.png)

## Testing It Out

To test it out, you’ll need to converge, or run Chef Client on a node that is registered to your Chef Server. After this happens, you should receive an email in your inbox like the following:

[SHOW THE PURPLE BUTTON HERE]

![Adding a new rule](chef-analytics/notification-email.png)

[TIP] Run `sudo opscode-analytics-ctl tail` if it ain't workin'.

## Summary

You’ve just written your first rule with Chef Analytics. This shows off the power of the rules language and notifications, but doesn’t do anything real. There are several more example use cases that are more useful in our documentation, or you can begin looking directly at the rules language reference for more information.

We'll have more. In the meantime, check out

Joshua Timberman’s tutorials on this (maybe we should move them off the blog?)


## Exercises

Write a rule that sends a notification when a cookbook is uploaded to Chef server

Change the rule to show

Who initiated the cc run
The time the run started, completed, and its duration
whether the run failed
if the run failed, teh stacktrace

Update recipe to run only when a resource was actually updated

Make your recipe fail and show the stacktrace

Integrate with your notification system, such as HitChat. Office hours are available if you need help!
